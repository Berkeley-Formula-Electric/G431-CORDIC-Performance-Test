
G431 CORDIC Performance Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000766c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  08007850  08007850  00017850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800807c  0800807c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008084  08008084  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800808c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001dc  08008268  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08008268  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8af  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec0  00000000  00000000  0002dabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002f980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  00030450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfd0  00000000  00000000  00030e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf64  00000000  00000000  0004ee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba304  00000000  00000000  0005bd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  001160e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007834 	.word	0x08007834

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08007834 	.word	0x08007834

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <WRAP_TO_PI>:

#define TWO_TO_POW_31 2147483648.0f
#define Q31_TO_FLOAT(x) ( (float)(x)/(TWO_TO_POW_31))
#define FLOAT_TO_Q31(x) ( (int)( (float)(x)*(float)0x7FFFFFFF ) )

float WRAP_TO_PI(float angle_radians) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (angle_radians>=0)
 8000faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	db26      	blt.n	8001006 <WRAP_TO_PI+0x66>
        return fmodf(angle_radians+M_PI, 2.0f*M_PI)-M_PI;
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff faed 	bl	8000598 <__aeabi_f2d>
 8000fbe:	a328      	add	r3, pc, #160	; (adr r3, 8001060 <WRAP_TO_PI+0xc0>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff f98a 	bl	80002dc <__adddf3>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fe12 	bl	8000bf8 <__aeabi_d2f>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001068 <WRAP_TO_PI+0xc8>
 8000fda:	ee00 3a10 	vmov	s0, r3
 8000fde:	f005 fe71 	bl	8006cc4 <fmodf>
 8000fe2:	ee10 3a10 	vmov	r3, s0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fad6 	bl	8000598 <__aeabi_f2d>
 8000fec:	a31c      	add	r3, pc, #112	; (adr r3, 8001060 <WRAP_TO_PI+0xc0>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff f971 	bl	80002d8 <__aeabi_dsub>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fdfb 	bl	8000bf8 <__aeabi_d2f>
 8001002:	4603      	mov	r3, r0
 8001004:	e025      	b.n	8001052 <WRAP_TO_PI+0xb2>
    else
      return fmodf(angle_radians-M_PI, 2.0f*M_PI)+M_PI;
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fac6 	bl	8000598 <__aeabi_f2d>
 800100c:	a314      	add	r3, pc, #80	; (adr r3, 8001060 <WRAP_TO_PI+0xc0>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff f961 	bl	80002d8 <__aeabi_dsub>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fdeb 	bl	8000bf8 <__aeabi_d2f>
 8001022:	4603      	mov	r3, r0
 8001024:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001068 <WRAP_TO_PI+0xc8>
 8001028:	ee00 3a10 	vmov	s0, r3
 800102c:	f005 fe4a 	bl	8006cc4 <fmodf>
 8001030:	ee10 3a10 	vmov	r3, s0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff faaf 	bl	8000598 <__aeabi_f2d>
 800103a:	a309      	add	r3, pc, #36	; (adr r3, 8001060 <WRAP_TO_PI+0xc0>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff f94c 	bl	80002dc <__adddf3>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fdd4 	bl	8000bf8 <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
}
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	54442d18 	.word	0x54442d18
 8001064:	400921fb 	.word	0x400921fb
 8001068:	40c90fdb 	.word	0x40c90fdb
 800106c:	00000000 	.word	0x00000000

08001070 <FLOAT_RADIANS_TO_Q31>:

int32_t FLOAT_RADIANS_TO_Q31(float angle_radians)  // Q31 have a scaled input with the range [-1 1] mapping to [-pi pi).
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
  return FLOAT_TO_Q31(WRAP_TO_PI(angle_radians)/M_PI);
 800107a:	ed97 0a01 	vldr	s0, [r7, #4]
 800107e:	f7ff ff8f 	bl	8000fa0 <WRAP_TO_PI>
 8001082:	ee10 3a10 	vmov	r3, s0
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa86 	bl	8000598 <__aeabi_f2d>
 800108c:	a30d      	add	r3, pc, #52	; (adr r3, 80010c4 <FLOAT_RADIANS_TO_Q31+0x54>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fc03 	bl	800089c <__aeabi_ddiv>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fdab 	bl	8000bf8 <__aeabi_d2f>
 80010a2:	ee07 0a10 	vmov	s14, r0
 80010a6:	eddf 7a06 	vldr	s15, [pc, #24]	; 80010c0 <FLOAT_RADIANS_TO_Q31+0x50>
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b2:	ee17 3a90 	vmov	r3, s15
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	4f000000 	.word	0x4f000000
 80010c4:	54442d18 	.word	0x54442d18
 80010c8:	400921fb 	.word	0x400921fb

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d0:	b0bc      	sub	sp, #240	; 0xf0
 80010d2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f000 fbe3 	bl	800189e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f944 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 f9ee 	bl	80014bc <MX_GPIO_Init>
  MX_CORDIC_Init();
 80010e0:	f000 f98c 	bl	80013fc <MX_CORDIC_Init>
  MX_USART2_UART_Init();
 80010e4:	f000 f99e 	bl	8001424 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CORDIC_ConfigTypeDef config = {
 80010e8:	4b97      	ldr	r3, [pc, #604]	; (8001348 <main+0x27c>)
 80010ea:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80010ee:	461d      	mov	r5, r3
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    CORDIC_OUTSIZE_32BITS, // q31
    CORDIC_NBWRITE_1, // ARG2 is 1 default
    CORDIC_NBREAD_2, // read cosine and sine
    CORDIC_PRECISION_6CYCLES // better than 10-3
  };
  HAL_CORDIC_Configure(&hcordic, &config);
 80010fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001100:	4619      	mov	r1, r3
 8001102:	4892      	ldr	r0, [pc, #584]	; (800134c <main+0x280>)
 8001104:	f000 fc90 	bl	8001a28 <HAL_CORDIC_Configure>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    float normal_sum = 0;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    float cordic_sum = 0;
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    float theta;

    uint32_t start_t;

    uint32_t n_iters = 10000;
 8001118:	f242 7310 	movw	r3, #10000	; 0x2710
 800111c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    start_t = HAL_GetTick();
 8001120:	f000 fc22 	bl	8001968 <HAL_GetTick>
 8001124:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

    for (uint32_t i=0; i<n_iters; i+=1) {
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800112e:	e047      	b.n	80011c0 <main+0xf4>
      theta = (float)i;
 8001130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
      normal_sum += cosf(theta) * 0.5 + sinf(theta) * 0.25;
 8001140:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001144:	f7ff fa28 	bl	8000598 <__aeabi_f2d>
 8001148:	4604      	mov	r4, r0
 800114a:	460d      	mov	r5, r1
 800114c:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8001150:	f005 fd2e 	bl	8006bb0 <cosf>
 8001154:	ee10 3a10 	vmov	r3, s0
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fa1d 	bl	8000598 <__aeabi_f2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b7b      	ldr	r3, [pc, #492]	; (8001350 <main+0x284>)
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4690      	mov	r8, r2
 800116e:	4699      	mov	r9, r3
 8001170:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8001174:	f005 fd60 	bl	8006c38 <sinf>
 8001178:	ee10 3a10 	vmov	r3, s0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fa0b 	bl	8000598 <__aeabi_f2d>
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b73      	ldr	r3, [pc, #460]	; (8001354 <main+0x288>)
 8001188:	f7ff fa5e 	bl	8000648 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4640      	mov	r0, r8
 8001192:	4649      	mov	r1, r9
 8001194:	f7ff f8a2 	bl	80002dc <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4620      	mov	r0, r4
 800119e:	4629      	mov	r1, r5
 80011a0:	f7ff f89c 	bl	80002dc <__adddf3>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fd24 	bl	8000bf8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    for (uint32_t i=0; i<n_iters; i+=1) {
 80011b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80011c0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80011c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d3b1      	bcc.n	8001130 <main+0x64>
    }
    uint32_t normal_t = HAL_GetTick() - start_t;
 80011cc:	f000 fbcc 	bl	8001968 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4


    int32_t InBuff[1] = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t OutBuff[2] = {0,0};
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    start_t = HAL_GetTick();
 80011ee:	f000 fbbb 	bl	8001968 <HAL_GetTick>
 80011f2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    for (uint32_t i=0; i<n_iters; i+=1) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80011fc:	e06d      	b.n	80012da <main+0x20e>
      theta = (float)i;
 80011fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

      InBuff[0] = FLOAT_RADIANS_TO_Q31(theta);
 800120e:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8001212:	f7ff ff2d 	bl	8001070 <FLOAT_RADIANS_TO_Q31>
 8001216:	4603      	mov	r3, r0
 8001218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      float cosine_theta;
      float sine_theta;
      HAL_StatusTypeDef result = HAL_CORDIC_Calculate(&hcordic,InBuff,OutBuff,1,10);
 800121c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001220:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001224:	230a      	movs	r3, #10
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	4848      	ldr	r0, [pc, #288]	; (800134c <main+0x280>)
 800122c:	f000 fc38 	bl	8001aa0 <HAL_CORDIC_Calculate>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
      if(HAL_OK==result)
 8001236:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800123a:	2b00      	cmp	r3, #0
 800123c:	d117      	bne.n	800126e <main+0x1a2>
      {
          cosine_theta = Q31_TO_FLOAT(OutBuff[0]);
 800123e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001358 <main+0x28c>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
          sine_theta = Q31_TO_FLOAT(OutBuff[1]);
 8001256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001358 <main+0x28c>
 8001266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
      }
      cordic_sum += cosine_theta * 0.5 + sine_theta * 0.25;
 800126e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001272:	f7ff f991 	bl	8000598 <__aeabi_f2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800127e:	f7ff f98b 	bl	8000598 <__aeabi_f2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <main+0x284>)
 8001288:	f7ff f9de 	bl	8000648 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4690      	mov	r8, r2
 8001292:	4699      	mov	r9, r3
 8001294:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001298:	f7ff f97e 	bl	8000598 <__aeabi_f2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <main+0x288>)
 80012a2:	f7ff f9d1 	bl	8000648 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4640      	mov	r0, r8
 80012ac:	4649      	mov	r1, r9
 80012ae:	f7ff f815 	bl	80002dc <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7ff f80f 	bl	80002dc <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc97 	bl	8000bf8 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    for (uint32_t i=0; i<n_iters; i+=1) {
 80012d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80012d4:	3301      	adds	r3, #1
 80012d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80012da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80012de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d38b      	bcc.n	80011fe <main+0x132>
    }
    uint32_t cordic_t = HAL_GetTick() - start_t;
 80012e6:	f000 fb3f 	bl	8001968 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    char str[128];
    sprintf(str, "normal: %f %d, cordic: %f %d\r\n", normal_sum, normal_t, cordic_sum, cordic_t);
 80012f6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80012fa:	f7ff f94d 	bl	8000598 <__aeabi_f2d>
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001306:	f7ff f947 	bl	8000598 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4638      	mov	r0, r7
 8001310:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001314:	9104      	str	r1, [sp, #16]
 8001316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800131a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4622      	mov	r2, r4
 8001322:	462b      	mov	r3, r5
 8001324:	490d      	ldr	r1, [pc, #52]	; (800135c <main+0x290>)
 8001326:	f003 f9cb 	bl	80046c0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 100);
 800132a:	463b      	mov	r3, r7
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff77 	bl	8000220 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	4639      	mov	r1, r7
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <main+0x294>)
 800133c:	f001 ff0a 	bl	8003154 <HAL_UART_Transmit>

    HAL_Delay(100);
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	f000 fb1d 	bl	8001980 <HAL_Delay>
  {
 8001346:	e6df      	b.n	8001108 <main+0x3c>
 8001348:	08007870 	.word	0x08007870
 800134c:	200001f8 	.word	0x200001f8
 8001350:	3fe00000 	.word	0x3fe00000
 8001354:	3fd00000 	.word	0x3fd00000
 8001358:	4f000000 	.word	0x4f000000
 800135c:	08007850 	.word	0x08007850
 8001360:	20000220 	.word	0x20000220

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	; 0x50
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	2238      	movs	r2, #56	; 0x38
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fd32 	bl	8003ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 febc 	bl	8002104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139a:	2302      	movs	r3, #2
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139e:	2302      	movs	r3, #2
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80013a6:	2314      	movs	r3, #20
 80013a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 ff56 	bl	800226c <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013c6:	f000 f89d 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2303      	movs	r3, #3
 80013d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2104      	movs	r1, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fa5a 	bl	800289c <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013ee:	f000 f889 	bl	8001504 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	; 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_CORDIC_Init+0x20>)
 8001402:	4a07      	ldr	r2, [pc, #28]	; (8001420 <MX_CORDIC_Init+0x24>)
 8001404:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_CORDIC_Init+0x20>)
 8001408:	f000 fadc 	bl	80019c4 <HAL_CORDIC_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001412:	f000 f877 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001f8 	.word	0x200001f8
 8001420:	40020c00 	.word	0x40020c00

08001424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <MX_USART2_UART_Init+0x94>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 800146e:	f001 fe21 	bl	80030b4 <HAL_UART_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001478:	f000 f844 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001480:	f002 fbb8 	bl	8003bf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800148a:	f000 f83b 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 8001492:	f002 fbed 	bl	8003c70 <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 f832 	bl	8001504 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_USART2_UART_Init+0x90>)
 80014a2:	f002 fb6e 	bl	8003b82 <HAL_UARTEx_DisableFifoMode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014ac:	f000 f82a 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000220 	.word	0x20000220
 80014b8:	40004400 	.word	0x40004400

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_GPIO_Init+0x44>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <MX_GPIO_Init+0x44>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_GPIO_Init+0x44>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_GPIO_Init+0x44>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <MX_GPIO_Init+0x44>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_GPIO_Init+0x44>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6613      	str	r3, [r2, #96]	; 0x60
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x44>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x44>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x44>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001546:	f000 fe81 	bl	800224c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_CORDIC_MspInit+0x38>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10b      	bne.n	8001582 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_CORDIC_MspInit+0x3c>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_CORDIC_MspInit+0x3c>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6493      	str	r3, [r2, #72]	; 0x48
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_CORDIC_MspInit+0x3c>)
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40020c00 	.word	0x40020c00
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09a      	sub	sp, #104	; 0x68
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2244      	movs	r2, #68	; 0x44
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fc0f 	bl	8003ddc <memset>
  if(huart->Instance==USART2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_UART_MspInit+0xa4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d135      	bne.n	8001634 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fb7d 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e0:	f7ff ff90 	bl	8001504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_UART_MspInit+0xa8>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_UART_MspInit+0xa8>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	6593      	str	r3, [r2, #88]	; 0x58
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_UART_MspInit+0xa8>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_UART_MspInit+0xa8>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_UART_MspInit+0xa8>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_UART_MspInit+0xa8>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001614:	2318      	movs	r3, #24
 8001616:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001624:	2307      	movs	r3, #7
 8001626:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_MspInit+0xac>)
 8001630:	f000 fbe6 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3768      	adds	r7, #104	; 0x68
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40004400 	.word	0x40004400
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 f956 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_kill>:

int _kill(int pid, int sig)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016b6:	f002 fb67 	bl	8003d88 <__errno>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2216      	movs	r2, #22
 80016be:	601a      	str	r2, [r3, #0]
	return -1;
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_exit>:

void _exit (int status)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffe7 	bl	80016ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80016de:	e7fe      	b.n	80016de <_exit+0x12>

080016e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e00a      	b.n	8001708 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f2:	f3af 8000 	nop.w
 80016f6:	4601      	mov	r1, r0
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	b2ca      	uxtb	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbf0      	blt.n	80016f2 <_read+0x12>
	}

return len;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e009      	b.n	8001740 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60ba      	str	r2, [r7, #8]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf1      	blt.n	800172c <_write+0x12>
	}
	return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_close>:

int _close(int file)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	return -1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177a:	605a      	str	r2, [r3, #4]
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_isatty>:

int _isatty(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	return 1;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f002 facc 	bl	8003d88 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20008000 	.word	0x20008000
 800181c:	00000400 	.word	0x00000400
 8001820:	200002b0 	.word	0x200002b0
 8001824:	200002c8 	.word	0x200002c8

08001828 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <SystemInit+0x20>)
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <SystemInit+0x20>)
 8001834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800184e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <LoopForever+0x6>)
  ldr r1, =_edata
 8001852:	490e      	ldr	r1, [pc, #56]	; (800188c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <LoopForever+0xe>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001868:	4c0b      	ldr	r4, [pc, #44]	; (8001898 <LoopForever+0x16>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001876:	f7ff ffd7 	bl	8001828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187a:	f002 fa8b 	bl	8003d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800187e:	f7ff fc25 	bl	80010cc <main>

08001882 <LoopForever>:

LoopForever:
    b LoopForever
 8001882:	e7fe      	b.n	8001882 <LoopForever>
  ldr   r0, =_estack
 8001884:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001890:	0800808c 	.word	0x0800808c
  ldr r2, =_sbss
 8001894:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001898:	200002c8 	.word	0x200002c8

0800189c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC1_2_IRQHandler>

0800189e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 fa77 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f80e 	bl	80018d0 <HAL_InitTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	e001      	b.n	80018c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c0:	f7ff fe26 	bl	8001510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c4:	79fb      	ldrb	r3, [r7, #7]

}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_InitTick+0x68>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d022      	beq.n	800192a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_InitTick+0x6c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_InitTick+0x68>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fa74 	bl	8001de6 <HAL_SYSTICK_Config>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10f      	bne.n	8001924 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	d809      	bhi.n	800191e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190a:	2200      	movs	r2, #0
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	f000 fa4e 	bl	8001db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_InitTick+0x70>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e007      	b.n	800192e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e004      	b.n	800192e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e001      	b.n	800192e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000008 	.word	0x20000008
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_IncTick+0x1c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x20>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4413      	add	r3, r2
 8001952:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_IncTick+0x1c>)
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	200002b4 	.word	0x200002b4
 8001964:	20000008 	.word	0x20000008

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200002b4 	.word	0x200002b4

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d004      	beq.n	80019a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_Delay+0x40>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a4:	bf00      	nop
 80019a6:	f7ff ffdf 	bl	8001968 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d8f7      	bhi.n	80019a6 <HAL_Delay+0x26>
  {
  }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000008 	.word	0x20000008

080019c4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e023      	b.n	8001a1e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fdb4 	bl	8001558 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d11d      	bne.n	8001a7e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_CORDIC_Configure+0x74>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	6811      	ldr	r1, [r2, #0]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	6992      	ldr	r2, [r2, #24]
 8001a54:	4311      	orrs	r1, r2
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	6852      	ldr	r2, [r2, #4]
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	6912      	ldr	r2, [r2, #16]
 8001a60:	4311      	orrs	r1, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	6952      	ldr	r2, [r2, #20]
 8001a66:	4311      	orrs	r1, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	6892      	ldr	r2, [r2, #8]
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	68d2      	ldr	r2, [r2, #12]
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e007      	b.n	8001a8e <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	ff87f800 	.word	0xff87f800

08001aa0 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  int32_t *p_tmp_in_buff = pInBuff;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_CORDIC_Calculate+0x28>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_CORDIC_Calculate+0x28>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e058      	b.n	8001b8a <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d14b      	bne.n	8001b7c <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8001af2:	f7ff ff39 	bl	8001968 <HAL_GetTick>
 8001af6:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f847 	bl	8001b92 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e028      	b.n	8001b5e <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f83d 	bl	8001b92 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1e:	d010      	beq.n	8001b42 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8001b20:	f7ff ff22 	bl	8001968 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d208      	bcs.n	8001b42 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2204      	movs	r2, #4
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Return function status */
            return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e023      	b.n	8001b8a <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	dae5      	bge.n	8001b18 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f846 	bl	8001be4 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1d3      	bne.n	8001b0c <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4619      	mov	r1, r3
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f83a 	bl	8001be4 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Return function status */
    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e006      	b.n	8001b8a <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1d1a      	adds	r2, r3, #4
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bc0:	d10a      	bne.n	8001bd8 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1d1a      	adds	r2, r3, #4
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	601a      	str	r2, [r3, #0]
  }
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c12:	d10a      	bne.n	8001c2a <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1d1a      	adds	r2, r3, #4
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff47 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff5e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff90 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5f 	bl	8001c9c <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffb2 	bl	8001d58 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e0e:	e15a      	b.n	80020c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 814c 	beq.w	80020c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d005      	beq.n	8001e40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d130      	bne.n	8001ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0201 	and.w	r2, r3, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d017      	beq.n	8001ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d123      	bne.n	8001f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0203 	and.w	r2, r3, #3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80a6 	beq.w	80020c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f74:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f80:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8c:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb6:	d01f      	beq.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <HAL_GPIO_Init+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d019      	beq.n	8001ff4 <HAL_GPIO_Init+0x1f4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a4b      	ldr	r2, [pc, #300]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_GPIO_Init+0x1f0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a49      	ldr	r2, [pc, #292]	; (80020f8 <HAL_GPIO_Init+0x2f8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2fc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_Init+0x1e4>
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	e00a      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001fe4:	2306      	movs	r3, #6
 8001fe6:	e008      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e004      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	f002 0203 	and.w	r2, r2, #3
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	4093      	lsls	r3, r2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200a:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_GPIO_Init+0x300>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <HAL_GPIO_Init+0x300>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002066:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_GPIO_Init+0x300>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_GPIO_Init+0x300>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f ae9d 	bne.w	8001e10 <HAL_GPIO_Init+0x10>
  }
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	48000400 	.word	0x48000400
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48000c00 	.word	0x48000c00
 80020f8:	48001000 	.word	0x48001000
 80020fc:	48001400 	.word	0x48001400
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d141      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002112:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d131      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002126:	4a46      	ldr	r2, [pc, #280]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800212c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002138:	4a41      	ldr	r2, [pc, #260]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002140:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2232      	movs	r2, #50	; 0x32
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a3f      	ldr	r2, [pc, #252]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	3301      	adds	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002156:	e002      	b.n	800215e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216a:	d102      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d158      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e057      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218a:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002194:	e04d      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219c:	d141      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021aa:	d131      	bne.n	8002210 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c4:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2232      	movs	r2, #50	; 0x32
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	3301      	adds	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e2:	e002      	b.n	80021ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f6:	d102      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f2      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220a:	d112      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e011      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002220:	e007      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002230:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40007000 	.word	0x40007000
 8002244:	20000000 	.word	0x20000000
 8002248:	431bde83 	.word	0x431bde83

0800224c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225a:	6093      	str	r3, [r2, #8]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e306      	b.n	800288c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d075      	beq.n	8002376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b97      	ldr	r3, [pc, #604]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b94      	ldr	r3, [pc, #592]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0x3e>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_OscConfig+0x44>
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05b      	beq.n	8002374 <HAL_RCC_OscConfig+0x108>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d157      	bne.n	8002374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e2e1      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x74>
 80022d2:	4b85      	ldr	r3, [pc, #532]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a84      	ldr	r2, [pc, #528]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b7f      	ldr	r3, [pc, #508]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7e      	ldr	r2, [pc, #504]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b7c      	ldr	r3, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7b      	ldr	r2, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xb0>
 8002304:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a77      	ldr	r2, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a74      	ldr	r2, [pc, #464]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fb20 	bl	8001968 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fb1c 	bl	8001968 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e2a6      	b.n	800288c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233e:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xc0>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fb0c 	bl	8001968 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fb08 	bl	8001968 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e292      	b.n	800288c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002366:	4b60      	ldr	r3, [pc, #384]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0xe8>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238c:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0x136>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_OscConfig+0x13c>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11f      	bne.n	80023e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x154>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e265      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	4946      	ldr	r1, [pc, #280]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <HAL_RCC_OscConfig+0x280>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fa79 	bl	80018d0 <HAL_InitTick>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d043      	beq.n	800246c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e251      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f0:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3c      	ldr	r2, [pc, #240]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fab4 	bl	8001968 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fab0 	bl	8001968 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e23a      	b.n	800288c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	492d      	ldr	r1, [pc, #180]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 8002436:	e01a      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800243e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff fa90 	bl	8001968 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244c:	f7ff fa8c 	bl	8001968 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e216      	b.n	800288c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x1e0>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d041      	beq.n	80024fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01c      	beq.n	80024bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002488:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7ff fa69 	bl	8001968 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249a:	f7ff fa65 	bl	8001968 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1ef      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ef      	beq.n	800249a <HAL_RCC_OscConfig+0x22e>
 80024ba:	e020      	b.n	80024fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_OscConfig+0x27c>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff fa4c 	bl	8001968 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d2:	e00d      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7ff fa48 	bl	8001968 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d906      	bls.n	80024f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1d2      	b.n	800288c <HAL_RCC_OscConfig+0x620>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f0:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ea      	bne.n	80024d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80a6 	beq.w	8002658 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002510:	4b84      	ldr	r3, [pc, #528]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x2b4>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x2b6>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	; 0x58
 8002532:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002542:	4b79      	ldr	r3, [pc, #484]	; (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7ff fa05 	bl	8001968 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7ff fa01 	bl	8001968 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e18b      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x4bc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_RCC_OscConfig+0x32e>
 8002588:	4b66      	ldr	r3, [pc, #408]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a65      	ldr	r2, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002598:	e024      	b.n	80025e4 <HAL_RCC_OscConfig+0x378>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d110      	bne.n	80025c4 <HAL_RCC_OscConfig+0x358>
 80025a2:	4b60      	ldr	r3, [pc, #384]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	4a5e      	ldr	r2, [pc, #376]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b2:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	4a5a      	ldr	r2, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_OscConfig+0x378>
 80025c4:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7ff f9bc 	bl	8001968 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7ff f9b8 	bl	8001968 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e140      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ed      	beq.n	80025f4 <HAL_RCC_OscConfig+0x388>
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff f9a5 	bl	8001968 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7ff f9a1 	bl	8001968 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e129      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002638:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ed      	bne.n	8002622 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002646:	7ffb      	ldrb	r3, [r7, #31]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b35      	ldr	r3, [pc, #212]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	4a34      	ldr	r2, [pc, #208]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03c      	beq.n	80026de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 800266e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002672:	4a2c      	ldr	r2, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff f974 	bl	8001968 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002684:	f7ff f970 	bl	8001968 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e0fa      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCC_OscConfig+0x418>
 80026a4:	e01b      	b.n	80026de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7ff f957 	bl	8001968 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026be:	f7ff f953 	bl	8001968 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0dd      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80d1 	beq.w	800288a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	f000 808b 	beq.w	800280c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d15e      	bne.n	80027bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x4b8>)
 8002704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7ff f92d 	bl	8001968 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	e00c      	b.n	800272c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff f929 	bl	8001968 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d905      	bls.n	800272c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0b3      	b.n	800288c <HAL_RCC_OscConfig+0x620>
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ec      	bne.n	8002712 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4b56      	ldr	r3, [pc, #344]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6a11      	ldr	r1, [r2, #32]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002748:	3a01      	subs	r2, #1
 800274a:	0112      	lsls	r2, r2, #4
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002752:	0212      	lsls	r2, r2, #8
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0552      	lsls	r2, r2, #21
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002766:	0852      	lsrs	r2, r2, #1
 8002768:	3a01      	subs	r2, #1
 800276a:	0652      	lsls	r2, r2, #25
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002772:	06d2      	lsls	r2, r2, #27
 8002774:	430a      	orrs	r2, r1
 8002776:	4947      	ldr	r1, [pc, #284]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 8002778:	4313      	orrs	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b45      	ldr	r3, [pc, #276]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a44      	ldr	r2, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002786:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a41      	ldr	r2, [pc, #260]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 800278e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f8e8 	bl	8001968 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff f8e4 	bl	8001968 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e06e      	b.n	800288c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x530>
 80027ba:	e066      	b.n	800288a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a31      	ldr	r2, [pc, #196]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 80027da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7ff f8c0 	bl	8001968 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff f8bc 	bl	8001968 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e046      	b.n	800288c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fe:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x580>
 800280a:	e03e      	b.n	800288a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e039      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_OscConfig+0x628>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	429a      	cmp	r2, r3
 800282a:	d12c      	bne.n	8002886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d123      	bne.n	8002886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11b      	bne.n	8002886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d113      	bne.n	8002886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d109      	bne.n	8002886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	019f800c 	.word	0x019f800c

0800289c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e11e      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b91      	ldr	r3, [pc, #580]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b8e      	ldr	r3, [pc, #568]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 020f 	bic.w	r2, r3, #15
 80028ca:	498c      	ldr	r1, [pc, #560]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e106      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d073      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d129      	bne.n	800294c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f8:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0f4      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002908:	f000 f99e 	bl	8002c48 <RCC_GetSysClockFreqFromPLLSource>
 800290c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a7c      	ldr	r2, [pc, #496]	; (8002b04 <HAL_RCC_ClockConfig+0x268>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d93f      	bls.n	8002996 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002916:	4b7a      	ldr	r3, [pc, #488]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800292a:	2b00      	cmp	r3, #0
 800292c:	d033      	beq.n	8002996 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d12f      	bne.n	8002996 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293e:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e024      	b.n	8002996 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0c6      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0be      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002974:	f000 f8ce 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4a61      	ldr	r2, [pc, #388]	; (8002b04 <HAL_RCC_ClockConfig+0x268>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d909      	bls.n	8002996 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298a:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 800298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002990:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002996:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4957      	ldr	r1, [pc, #348]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe ffde 	bl	8001968 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7fe ffda 	bl	8001968 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e095      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b4e      	ldr	r3, [pc, #312]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 020c 	and.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1eb      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a08:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a10:	4a3b      	ldr	r2, [pc, #236]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4936      	ldr	r1, [pc, #216]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d21d      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 020f 	bic.w	r2, r3, #15
 8002a54:	4929      	ldr	r1, [pc, #164]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe ff84 	bl	8001968 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe ff80 	bl	8001968 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e03b      	b.n	8002af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1ed      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4917      	ldr	r1, [pc, #92]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490f      	ldr	r1, [pc, #60]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac6:	f000 f825 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_ClockConfig+0x264>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490c      	ldr	r1, [pc, #48]	; (8002b08 <HAL_RCC_ClockConfig+0x26c>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x270>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x274>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fef0 	bl	80018d0 <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40021000 	.word	0x40021000
 8002b04:	04c4b400 	.word	0x04c4b400
 8002b08:	0800788c 	.word	0x0800788c
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e047      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e03e      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d136      	bne.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	68d2      	ldr	r2, [r2, #12]
 8002b74:	0a12      	lsrs	r2, r2, #8
 8002b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
      break;
 8002b80:	e00c      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	0a12      	lsrs	r2, r2, #8
 8002b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
      break;
 8002b9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	0e5b      	lsrs	r3, r3, #25
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e001      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bbc:	693b      	ldr	r3, [r7, #16]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_GetHCLKFreq+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf4:	f7ff fff0 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	0800789c 	.word	0x0800789c

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c20:	f7ff ffda 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0adb      	lsrs	r3, r3, #11
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	0800789c 	.word	0x0800789c

08002c48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	3301      	adds	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d10c      	bne.n	8002c86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c6c:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c76:	68d2      	ldr	r2, [r2, #12]
 8002c78:	0a12      	lsrs	r2, r2, #8
 8002c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
    break;
 8002c84:	e00c      	b.n	8002ca0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	0a12      	lsrs	r2, r2, #8
 8002c94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    break;
 8002c9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0e5b      	lsrs	r3, r3, #25
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cba:	687b      	ldr	r3, [r7, #4]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	00f42400 	.word	0x00f42400

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8098 	beq.w	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	4a3f      	ldr	r2, [pc, #252]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1e:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a39      	ldr	r2, [pc, #228]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fe1d 	bl	8001968 <HAL_GetTick>
 8002d2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d30:	e009      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe fe19 	bl	8001968 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d902      	bls.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	74fb      	strb	r3, [r7, #19]
        break;
 8002d44:	e005      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d46:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0ef      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d159      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01e      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d019      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d74:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da0:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fdd9 	bl	8001968 <HAL_GetTick>
 8002db6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fdd5 	bl	8001968 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	74fb      	strb	r3, [r7, #19]
            break;
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ec      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dfc:	e008      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	74bb      	strb	r3, [r7, #18]
 8002e02:	e005      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e10:	7c7b      	ldrb	r3, [r7, #17]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4ba6      	ldr	r3, [pc, #664]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	4aa5      	ldr	r2, [pc, #660]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2e:	4ba0      	ldr	r3, [pc, #640]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f023 0203 	bic.w	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	499c      	ldr	r1, [pc, #624]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e50:	4b97      	ldr	r3, [pc, #604]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f023 020c 	bic.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4994      	ldr	r1, [pc, #592]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e72:	4b8f      	ldr	r3, [pc, #572]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	498b      	ldr	r1, [pc, #556]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e94:	4b86      	ldr	r3, [pc, #536]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4983      	ldr	r1, [pc, #524]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb6:	4b7e      	ldr	r3, [pc, #504]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	497a      	ldr	r1, [pc, #488]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed8:	4b75      	ldr	r3, [pc, #468]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4972      	ldr	r1, [pc, #456]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4969      	ldr	r1, [pc, #420]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f1c:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4961      	ldr	r1, [pc, #388]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	4958      	ldr	r1, [pc, #352]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	4950      	ldr	r1, [pc, #320]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	4942      	ldr	r1, [pc, #264]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fee:	d105      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003008:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	4926      	ldr	r1, [pc, #152]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003032:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	4918      	ldr	r1, [pc, #96]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	490a      	ldr	r1, [pc, #40]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800309e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e042      	b.n	800314c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe fa5d 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2224      	movs	r2, #36	; 0x24
 80030e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8c2 	bl	8003280 <UART_SetConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e022      	b.n	800314c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fb82 	bl	8003818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fc09 	bl	800395c <UART_CheckIdleState>
 800314a:	4603      	mov	r3, r0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316a:	2b20      	cmp	r3, #32
 800316c:	f040 8083 	bne.w	8003276 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Transmit+0x28>
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e07b      	b.n	8003278 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit+0x3a>
 800318a:	2302      	movs	r3, #2
 800318c:	e074      	b.n	8003278 <HAL_UART_Transmit+0x124>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2221      	movs	r2, #33	; 0x21
 80031a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031a6:	f7fe fbdf 	bl	8001968 <HAL_GetTick>
 80031aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d108      	bne.n	80031d8 <HAL_UART_Transmit+0x84>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e003      	b.n	80031e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80031e8:	e02c      	b.n	8003244 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fbfc 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e039      	b.n	8003278 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3302      	adds	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e007      	b.n	8003232 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3301      	adds	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1cc      	bne.n	80031ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2200      	movs	r2, #0
 8003258:	2140      	movs	r1, #64	; 0x40
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fbc9 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e006      	b.n	8003278 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b08c      	sub	sp, #48	; 0x30
 8003286:	af00      	add	r7, sp, #0
 8003288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	431a      	orrs	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4bab      	ldr	r3, [pc, #684]	; (800355c <UART_SetConfig+0x2dc>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4aa0      	ldr	r2, [pc, #640]	; (8003560 <UART_SetConfig+0x2e0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	4313      	orrs	r3, r2
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003300:	430b      	orrs	r3, r1
 8003302:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f023 010f 	bic.w	r1, r3, #15
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a91      	ldr	r2, [pc, #580]	; (8003564 <UART_SetConfig+0x2e4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d125      	bne.n	8003370 <UART_SetConfig+0xf0>
 8003324:	4b90      	ldr	r3, [pc, #576]	; (8003568 <UART_SetConfig+0x2e8>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b03      	cmp	r3, #3
 8003330:	d81a      	bhi.n	8003368 <UART_SetConfig+0xe8>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0xb8>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	08003349 	.word	0x08003349
 800333c:	08003359 	.word	0x08003359
 8003340:	08003351 	.word	0x08003351
 8003344:	08003361 	.word	0x08003361
 8003348:	2301      	movs	r3, #1
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334e:	e0d6      	b.n	80034fe <UART_SetConfig+0x27e>
 8003350:	2302      	movs	r3, #2
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003356:	e0d2      	b.n	80034fe <UART_SetConfig+0x27e>
 8003358:	2304      	movs	r3, #4
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800335e:	e0ce      	b.n	80034fe <UART_SetConfig+0x27e>
 8003360:	2308      	movs	r3, #8
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003366:	e0ca      	b.n	80034fe <UART_SetConfig+0x27e>
 8003368:	2310      	movs	r3, #16
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800336e:	e0c6      	b.n	80034fe <UART_SetConfig+0x27e>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7d      	ldr	r2, [pc, #500]	; (800356c <UART_SetConfig+0x2ec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d138      	bne.n	80033ec <UART_SetConfig+0x16c>
 800337a:	4b7b      	ldr	r3, [pc, #492]	; (8003568 <UART_SetConfig+0x2e8>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d82d      	bhi.n	80033e4 <UART_SetConfig+0x164>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <UART_SetConfig+0x110>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080033e5 	.word	0x080033e5
 8003398:	080033e5 	.word	0x080033e5
 800339c:	080033e5 	.word	0x080033e5
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033e5 	.word	0x080033e5
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	080033cd 	.word	0x080033cd
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033e5 	.word	0x080033e5
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033dd 	.word	0x080033dd
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ca:	e098      	b.n	80034fe <UART_SetConfig+0x27e>
 80033cc:	2302      	movs	r3, #2
 80033ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033d2:	e094      	b.n	80034fe <UART_SetConfig+0x27e>
 80033d4:	2304      	movs	r3, #4
 80033d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033da:	e090      	b.n	80034fe <UART_SetConfig+0x27e>
 80033dc:	2308      	movs	r3, #8
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e2:	e08c      	b.n	80034fe <UART_SetConfig+0x27e>
 80033e4:	2310      	movs	r3, #16
 80033e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ea:	e088      	b.n	80034fe <UART_SetConfig+0x27e>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5f      	ldr	r2, [pc, #380]	; (8003570 <UART_SetConfig+0x2f0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d125      	bne.n	8003442 <UART_SetConfig+0x1c2>
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <UART_SetConfig+0x2e8>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d016      	beq.n	8003432 <UART_SetConfig+0x1b2>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d818      	bhi.n	800343a <UART_SetConfig+0x1ba>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d00a      	beq.n	8003422 <UART_SetConfig+0x1a2>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d814      	bhi.n	800343a <UART_SetConfig+0x1ba>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <UART_SetConfig+0x19a>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d008      	beq.n	800342a <UART_SetConfig+0x1aa>
 8003418:	e00f      	b.n	800343a <UART_SetConfig+0x1ba>
 800341a:	2300      	movs	r3, #0
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003420:	e06d      	b.n	80034fe <UART_SetConfig+0x27e>
 8003422:	2302      	movs	r3, #2
 8003424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003428:	e069      	b.n	80034fe <UART_SetConfig+0x27e>
 800342a:	2304      	movs	r3, #4
 800342c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003430:	e065      	b.n	80034fe <UART_SetConfig+0x27e>
 8003432:	2308      	movs	r3, #8
 8003434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003438:	e061      	b.n	80034fe <UART_SetConfig+0x27e>
 800343a:	2310      	movs	r3, #16
 800343c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003440:	e05d      	b.n	80034fe <UART_SetConfig+0x27e>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4b      	ldr	r2, [pc, #300]	; (8003574 <UART_SetConfig+0x2f4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d125      	bne.n	8003498 <UART_SetConfig+0x218>
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <UART_SetConfig+0x2e8>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003452:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003456:	2bc0      	cmp	r3, #192	; 0xc0
 8003458:	d016      	beq.n	8003488 <UART_SetConfig+0x208>
 800345a:	2bc0      	cmp	r3, #192	; 0xc0
 800345c:	d818      	bhi.n	8003490 <UART_SetConfig+0x210>
 800345e:	2b80      	cmp	r3, #128	; 0x80
 8003460:	d00a      	beq.n	8003478 <UART_SetConfig+0x1f8>
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d814      	bhi.n	8003490 <UART_SetConfig+0x210>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <UART_SetConfig+0x1f0>
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d008      	beq.n	8003480 <UART_SetConfig+0x200>
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x210>
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003476:	e042      	b.n	80034fe <UART_SetConfig+0x27e>
 8003478:	2302      	movs	r3, #2
 800347a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347e:	e03e      	b.n	80034fe <UART_SetConfig+0x27e>
 8003480:	2304      	movs	r3, #4
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003486:	e03a      	b.n	80034fe <UART_SetConfig+0x27e>
 8003488:	2308      	movs	r3, #8
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800348e:	e036      	b.n	80034fe <UART_SetConfig+0x27e>
 8003490:	2310      	movs	r3, #16
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003496:	e032      	b.n	80034fe <UART_SetConfig+0x27e>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a30      	ldr	r2, [pc, #192]	; (8003560 <UART_SetConfig+0x2e0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12a      	bne.n	80034f8 <UART_SetConfig+0x278>
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <UART_SetConfig+0x2e8>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034b0:	d01a      	beq.n	80034e8 <UART_SetConfig+0x268>
 80034b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034b6:	d81b      	bhi.n	80034f0 <UART_SetConfig+0x270>
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034bc:	d00c      	beq.n	80034d8 <UART_SetConfig+0x258>
 80034be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c2:	d815      	bhi.n	80034f0 <UART_SetConfig+0x270>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <UART_SetConfig+0x250>
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034cc:	d008      	beq.n	80034e0 <UART_SetConfig+0x260>
 80034ce:	e00f      	b.n	80034f0 <UART_SetConfig+0x270>
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d6:	e012      	b.n	80034fe <UART_SetConfig+0x27e>
 80034d8:	2302      	movs	r3, #2
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034de:	e00e      	b.n	80034fe <UART_SetConfig+0x27e>
 80034e0:	2304      	movs	r3, #4
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e6:	e00a      	b.n	80034fe <UART_SetConfig+0x27e>
 80034e8:	2308      	movs	r3, #8
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ee:	e006      	b.n	80034fe <UART_SetConfig+0x27e>
 80034f0:	2310      	movs	r3, #16
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f6:	e002      	b.n	80034fe <UART_SetConfig+0x27e>
 80034f8:	2310      	movs	r3, #16
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <UART_SetConfig+0x2e0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	f040 80a8 	bne.w	800365a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800350a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800350e:	2b08      	cmp	r3, #8
 8003510:	d834      	bhi.n	800357c <UART_SetConfig+0x2fc>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <UART_SetConfig+0x298>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	0800353d 	.word	0x0800353d
 800351c:	0800357d 	.word	0x0800357d
 8003520:	08003545 	.word	0x08003545
 8003524:	0800357d 	.word	0x0800357d
 8003528:	0800354b 	.word	0x0800354b
 800352c:	0800357d 	.word	0x0800357d
 8003530:	0800357d 	.word	0x0800357d
 8003534:	0800357d 	.word	0x0800357d
 8003538:	08003553 	.word	0x08003553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff fb58 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003542:	e021      	b.n	8003588 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <UART_SetConfig+0x2f8>)
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003548:	e01e      	b.n	8003588 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354a:	f7ff fae3 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 800354e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003550:	e01a      	b.n	8003588 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003558:	e016      	b.n	8003588 <UART_SetConfig+0x308>
 800355a:	bf00      	nop
 800355c:	cfff69f3 	.word	0xcfff69f3
 8003560:	40008000 	.word	0x40008000
 8003564:	40013800 	.word	0x40013800
 8003568:	40021000 	.word	0x40021000
 800356c:	40004400 	.word	0x40004400
 8003570:	40004800 	.word	0x40004800
 8003574:	40004c00 	.word	0x40004c00
 8003578:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003586:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 812a 	beq.w	80037e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	4a9e      	ldr	r2, [pc, #632]	; (8003810 <UART_SetConfig+0x590>)
 8003596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800359a:	461a      	mov	r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d305      	bcc.n	80035c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d903      	bls.n	80035c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035c6:	e10d      	b.n	80037e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	2200      	movs	r2, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	60fa      	str	r2, [r7, #12]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	4a8e      	ldr	r2, [pc, #568]	; (8003810 <UART_SetConfig+0x590>)
 80035d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ea:	f7fd fb55 	bl	8000c98 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	020b      	lsls	r3, r1, #8
 8003600:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003604:	0202      	lsls	r2, r0, #8
 8003606:	6979      	ldr	r1, [r7, #20]
 8003608:	6849      	ldr	r1, [r1, #4]
 800360a:	0849      	lsrs	r1, r1, #1
 800360c:	2000      	movs	r0, #0
 800360e:	460c      	mov	r4, r1
 8003610:	4605      	mov	r5, r0
 8003612:	eb12 0804 	adds.w	r8, r2, r4
 8003616:	eb43 0905 	adc.w	r9, r3, r5
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	469a      	mov	sl, r3
 8003622:	4693      	mov	fp, r2
 8003624:	4652      	mov	r2, sl
 8003626:	465b      	mov	r3, fp
 8003628:	4640      	mov	r0, r8
 800362a:	4649      	mov	r1, r9
 800362c:	f7fd fb34 	bl	8000c98 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363e:	d308      	bcc.n	8003652 <UART_SetConfig+0x3d2>
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003646:	d204      	bcs.n	8003652 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	e0c8      	b.n	80037e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003658:	e0c4      	b.n	80037e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003662:	d167      	bne.n	8003734 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003668:	2b08      	cmp	r3, #8
 800366a:	d828      	bhi.n	80036be <UART_SetConfig+0x43e>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <UART_SetConfig+0x3f4>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003699 	.word	0x08003699
 8003678:	080036a1 	.word	0x080036a1
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036bf 	.word	0x080036bf
 8003684:	080036af 	.word	0x080036af
 8003688:	080036bf 	.word	0x080036bf
 800368c:	080036bf 	.word	0x080036bf
 8003690:	080036bf 	.word	0x080036bf
 8003694:	080036b7 	.word	0x080036b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7ff faaa 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 800369c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800369e:	e014      	b.n	80036ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7ff fabc 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 80036a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036a6:	e010      	b.n	80036ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b5a      	ldr	r3, [pc, #360]	; (8003814 <UART_SetConfig+0x594>)
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036ac:	e00d      	b.n	80036ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7ff fa31 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 80036b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036b4:	e009      	b.n	80036ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036bc:	e005      	b.n	80036ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8089 	beq.w	80037e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <UART_SetConfig+0x590>)
 80036d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036dc:	461a      	mov	r2, r3
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e4:	005a      	lsls	r2, r3, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	441a      	add	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d916      	bls.n	800372c <UART_SetConfig+0x4ac>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d212      	bcs.n	800372c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f023 030f 	bic.w	r3, r3, #15
 800370e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	b29b      	uxth	r3, r3
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	b29a      	uxth	r2, r3
 800371c:	8bfb      	ldrh	r3, [r7, #30]
 800371e:	4313      	orrs	r3, r2
 8003720:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	8bfa      	ldrh	r2, [r7, #30]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	e05b      	b.n	80037e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003732:	e057      	b.n	80037e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003738:	2b08      	cmp	r3, #8
 800373a:	d828      	bhi.n	800378e <UART_SetConfig+0x50e>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x4c4>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff fa42 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376e:	e014      	b.n	800379a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7ff fa54 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003776:	e010      	b.n	800379a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b26      	ldr	r3, [pc, #152]	; (8003814 <UART_SetConfig+0x594>)
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7ff f9c9 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003784:	e009      	b.n	800379a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800378c:	e005      	b.n	800379a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003798:	bf00      	nop
    }

    if (pclk != 0U)
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	d021      	beq.n	80037e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <UART_SetConfig+0x590>)
 80037a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037aa:	461a      	mov	r2, r3
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	441a      	add	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d909      	bls.n	80037de <UART_SetConfig+0x55e>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d205      	bcs.n	80037de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e002      	b.n	80037e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2200      	movs	r2, #0
 80037f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003800:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	; 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380e:	bf00      	nop
 8003810:	080078a4 	.word	0x080078a4
 8003814:	00f42400 	.word	0x00f42400

08003818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01a      	beq.n	800392e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003916:	d10a      	bne.n	800392e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
  }
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800396c:	f7fd fffc 	bl	8001968 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b08      	cmp	r3, #8
 800397e:	d10e      	bne.n	800399e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f82f 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e025      	b.n	80039ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d10e      	bne.n	80039ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f819 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e00f      	b.n	80039ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b09c      	sub	sp, #112	; 0x70
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	e0a9      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0a:	f000 80a5 	beq.w	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fd ffab 	bl	8001968 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d140      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a38:	667b      	str	r3, [r7, #100]	; 0x64
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e6      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a76:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e5      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e069      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d051      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac2:	d149      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003acc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
 8003aee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b20:	623a      	str	r2, [r7, #32]
 8003b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e010      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f43f af46 	beq.w	8003a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3770      	adds	r7, #112	; 0x70
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e027      	b.n	8003be8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e02d      	b.n	8003c68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f84f 	bl	8003cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e02d      	b.n	8003ce4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f811 	bl	8003cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d0c:	e031      	b.n	8003d72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d12:	2308      	movs	r3, #8
 8003d14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	0e5b      	lsrs	r3, r3, #25
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	0f5b      	lsrs	r3, r3, #29
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d36:	7bbb      	ldrb	r3, [r7, #14]
 8003d38:	7b3a      	ldrb	r2, [r7, #12]
 8003d3a:	4911      	ldr	r1, [pc, #68]	; (8003d80 <UARTEx_SetNbDataToProcess+0x94>)
 8003d3c:	5c8a      	ldrb	r2, [r1, r2]
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d42:	7b3a      	ldrb	r2, [r7, #12]
 8003d44:	490f      	ldr	r1, [pc, #60]	; (8003d84 <UARTEx_SetNbDataToProcess+0x98>)
 8003d46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	7b7a      	ldrb	r2, [r7, #13]
 8003d58:	4909      	ldr	r1, [pc, #36]	; (8003d80 <UARTEx_SetNbDataToProcess+0x94>)
 8003d5a:	5c8a      	ldrb	r2, [r1, r2]
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d60:	7b7a      	ldrb	r2, [r7, #13]
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <UARTEx_SetNbDataToProcess+0x98>)
 8003d64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	080078bc 	.word	0x080078bc
 8003d84:	080078c4 	.word	0x080078c4

08003d88 <__errno>:
 8003d88:	4b01      	ldr	r3, [pc, #4]	; (8003d90 <__errno+0x8>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <__libc_init_array>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4d0d      	ldr	r5, [pc, #52]	; (8003dcc <__libc_init_array+0x38>)
 8003d98:	4c0d      	ldr	r4, [pc, #52]	; (8003dd0 <__libc_init_array+0x3c>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	2600      	movs	r6, #0
 8003da0:	42a6      	cmp	r6, r4
 8003da2:	d109      	bne.n	8003db8 <__libc_init_array+0x24>
 8003da4:	4d0b      	ldr	r5, [pc, #44]	; (8003dd4 <__libc_init_array+0x40>)
 8003da6:	4c0c      	ldr	r4, [pc, #48]	; (8003dd8 <__libc_init_array+0x44>)
 8003da8:	f003 fd44 	bl	8007834 <_init>
 8003dac:	1b64      	subs	r4, r4, r5
 8003dae:	10a4      	asrs	r4, r4, #2
 8003db0:	2600      	movs	r6, #0
 8003db2:	42a6      	cmp	r6, r4
 8003db4:	d105      	bne.n	8003dc2 <__libc_init_array+0x2e>
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dbc:	4798      	blx	r3
 8003dbe:	3601      	adds	r6, #1
 8003dc0:	e7ee      	b.n	8003da0 <__libc_init_array+0xc>
 8003dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc6:	4798      	blx	r3
 8003dc8:	3601      	adds	r6, #1
 8003dca:	e7f2      	b.n	8003db2 <__libc_init_array+0x1e>
 8003dcc:	08008084 	.word	0x08008084
 8003dd0:	08008084 	.word	0x08008084
 8003dd4:	08008084 	.word	0x08008084
 8003dd8:	08008088 	.word	0x08008088

08003ddc <memset>:
 8003ddc:	4402      	add	r2, r0
 8003dde:	4603      	mov	r3, r0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <__cvt>:
 8003dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	ec55 4b10 	vmov	r4, r5, d0
 8003df4:	2d00      	cmp	r5, #0
 8003df6:	460e      	mov	r6, r1
 8003df8:	4619      	mov	r1, r3
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	bfbb      	ittet	lt
 8003dfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e02:	461d      	movlt	r5, r3
 8003e04:	2300      	movge	r3, #0
 8003e06:	232d      	movlt	r3, #45	; 0x2d
 8003e08:	700b      	strb	r3, [r1, #0]
 8003e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e10:	4691      	mov	r9, r2
 8003e12:	f023 0820 	bic.w	r8, r3, #32
 8003e16:	bfbc      	itt	lt
 8003e18:	4622      	movlt	r2, r4
 8003e1a:	4614      	movlt	r4, r2
 8003e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e20:	d005      	beq.n	8003e2e <__cvt+0x42>
 8003e22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e26:	d100      	bne.n	8003e2a <__cvt+0x3e>
 8003e28:	3601      	adds	r6, #1
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	e000      	b.n	8003e30 <__cvt+0x44>
 8003e2e:	2103      	movs	r1, #3
 8003e30:	ab03      	add	r3, sp, #12
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	ab02      	add	r3, sp, #8
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	ec45 4b10 	vmov	d0, r4, r5
 8003e3c:	4653      	mov	r3, sl
 8003e3e:	4632      	mov	r2, r6
 8003e40:	f000 fcea 	bl	8004818 <_dtoa_r>
 8003e44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e48:	4607      	mov	r7, r0
 8003e4a:	d102      	bne.n	8003e52 <__cvt+0x66>
 8003e4c:	f019 0f01 	tst.w	r9, #1
 8003e50:	d022      	beq.n	8003e98 <__cvt+0xac>
 8003e52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e56:	eb07 0906 	add.w	r9, r7, r6
 8003e5a:	d110      	bne.n	8003e7e <__cvt+0x92>
 8003e5c:	783b      	ldrb	r3, [r7, #0]
 8003e5e:	2b30      	cmp	r3, #48	; 0x30
 8003e60:	d10a      	bne.n	8003e78 <__cvt+0x8c>
 8003e62:	2200      	movs	r2, #0
 8003e64:	2300      	movs	r3, #0
 8003e66:	4620      	mov	r0, r4
 8003e68:	4629      	mov	r1, r5
 8003e6a:	f7fc fe55 	bl	8000b18 <__aeabi_dcmpeq>
 8003e6e:	b918      	cbnz	r0, 8003e78 <__cvt+0x8c>
 8003e70:	f1c6 0601 	rsb	r6, r6, #1
 8003e74:	f8ca 6000 	str.w	r6, [sl]
 8003e78:	f8da 3000 	ldr.w	r3, [sl]
 8003e7c:	4499      	add	r9, r3
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2300      	movs	r3, #0
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7fc fe47 	bl	8000b18 <__aeabi_dcmpeq>
 8003e8a:	b108      	cbz	r0, 8003e90 <__cvt+0xa4>
 8003e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e90:	2230      	movs	r2, #48	; 0x30
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	454b      	cmp	r3, r9
 8003e96:	d307      	bcc.n	8003ea8 <__cvt+0xbc>
 8003e98:	9b03      	ldr	r3, [sp, #12]
 8003e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e9c:	1bdb      	subs	r3, r3, r7
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	b004      	add	sp, #16
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	9103      	str	r1, [sp, #12]
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e7f0      	b.n	8003e92 <__cvt+0xa6>

08003eb0 <__exponent>:
 8003eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	bfb8      	it	lt
 8003eb8:	4249      	neglt	r1, r1
 8003eba:	f803 2b02 	strb.w	r2, [r3], #2
 8003ebe:	bfb4      	ite	lt
 8003ec0:	222d      	movlt	r2, #45	; 0x2d
 8003ec2:	222b      	movge	r2, #43	; 0x2b
 8003ec4:	2909      	cmp	r1, #9
 8003ec6:	7042      	strb	r2, [r0, #1]
 8003ec8:	dd2a      	ble.n	8003f20 <__exponent+0x70>
 8003eca:	f10d 0407 	add.w	r4, sp, #7
 8003ece:	46a4      	mov	ip, r4
 8003ed0:	270a      	movs	r7, #10
 8003ed2:	46a6      	mov	lr, r4
 8003ed4:	460a      	mov	r2, r1
 8003ed6:	fb91 f6f7 	sdiv	r6, r1, r7
 8003eda:	fb07 1516 	mls	r5, r7, r6, r1
 8003ede:	3530      	adds	r5, #48	; 0x30
 8003ee0:	2a63      	cmp	r2, #99	; 0x63
 8003ee2:	f104 34ff 	add.w	r4, r4, #4294967295
 8003ee6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003eea:	4631      	mov	r1, r6
 8003eec:	dcf1      	bgt.n	8003ed2 <__exponent+0x22>
 8003eee:	3130      	adds	r1, #48	; 0x30
 8003ef0:	f1ae 0502 	sub.w	r5, lr, #2
 8003ef4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ef8:	1c44      	adds	r4, r0, #1
 8003efa:	4629      	mov	r1, r5
 8003efc:	4561      	cmp	r1, ip
 8003efe:	d30a      	bcc.n	8003f16 <__exponent+0x66>
 8003f00:	f10d 0209 	add.w	r2, sp, #9
 8003f04:	eba2 020e 	sub.w	r2, r2, lr
 8003f08:	4565      	cmp	r5, ip
 8003f0a:	bf88      	it	hi
 8003f0c:	2200      	movhi	r2, #0
 8003f0e:	4413      	add	r3, r2
 8003f10:	1a18      	subs	r0, r3, r0
 8003f12:	b003      	add	sp, #12
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f1e:	e7ed      	b.n	8003efc <__exponent+0x4c>
 8003f20:	2330      	movs	r3, #48	; 0x30
 8003f22:	3130      	adds	r1, #48	; 0x30
 8003f24:	7083      	strb	r3, [r0, #2]
 8003f26:	70c1      	strb	r1, [r0, #3]
 8003f28:	1d03      	adds	r3, r0, #4
 8003f2a:	e7f1      	b.n	8003f10 <__exponent+0x60>

08003f2c <_printf_float>:
 8003f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	ed2d 8b02 	vpush	{d8}
 8003f34:	b08d      	sub	sp, #52	; 0x34
 8003f36:	460c      	mov	r4, r1
 8003f38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f3c:	4616      	mov	r6, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	4605      	mov	r5, r0
 8003f42:	f001 fa57 	bl	80053f4 <_localeconv_r>
 8003f46:	f8d0 a000 	ldr.w	sl, [r0]
 8003f4a:	4650      	mov	r0, sl
 8003f4c:	f7fc f968 	bl	8000220 <strlen>
 8003f50:	2300      	movs	r3, #0
 8003f52:	930a      	str	r3, [sp, #40]	; 0x28
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	9305      	str	r3, [sp, #20]
 8003f58:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f60:	3307      	adds	r3, #7
 8003f62:	f023 0307 	bic.w	r3, r3, #7
 8003f66:	f103 0208 	add.w	r2, r3, #8
 8003f6a:	f8c8 2000 	str.w	r2, [r8]
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f7e:	9307      	str	r3, [sp, #28]
 8003f80:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f84:	ee08 0a10 	vmov	s16, r0
 8003f88:	4b9f      	ldr	r3, [pc, #636]	; (8004208 <_printf_float+0x2dc>)
 8003f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f92:	f7fc fdf3 	bl	8000b7c <__aeabi_dcmpun>
 8003f96:	bb88      	cbnz	r0, 8003ffc <_printf_float+0xd0>
 8003f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f9c:	4b9a      	ldr	r3, [pc, #616]	; (8004208 <_printf_float+0x2dc>)
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	f7fc fdcd 	bl	8000b40 <__aeabi_dcmple>
 8003fa6:	bb48      	cbnz	r0, 8003ffc <_printf_float+0xd0>
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2300      	movs	r3, #0
 8003fac:	4640      	mov	r0, r8
 8003fae:	4649      	mov	r1, r9
 8003fb0:	f7fc fdbc 	bl	8000b2c <__aeabi_dcmplt>
 8003fb4:	b110      	cbz	r0, 8003fbc <_printf_float+0x90>
 8003fb6:	232d      	movs	r3, #45	; 0x2d
 8003fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fbc:	4b93      	ldr	r3, [pc, #588]	; (800420c <_printf_float+0x2e0>)
 8003fbe:	4894      	ldr	r0, [pc, #592]	; (8004210 <_printf_float+0x2e4>)
 8003fc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003fc4:	bf94      	ite	ls
 8003fc6:	4698      	movls	r8, r3
 8003fc8:	4680      	movhi	r8, r0
 8003fca:	2303      	movs	r3, #3
 8003fcc:	6123      	str	r3, [r4, #16]
 8003fce:	9b05      	ldr	r3, [sp, #20]
 8003fd0:	f023 0204 	bic.w	r2, r3, #4
 8003fd4:	6022      	str	r2, [r4, #0]
 8003fd6:	f04f 0900 	mov.w	r9, #0
 8003fda:	9700      	str	r7, [sp, #0]
 8003fdc:	4633      	mov	r3, r6
 8003fde:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f000 f9d8 	bl	8004398 <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f040 8090 	bne.w	800410e <_printf_float+0x1e2>
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff2:	b00d      	add	sp, #52	; 0x34
 8003ff4:	ecbd 8b02 	vpop	{d8}
 8003ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	4640      	mov	r0, r8
 8004002:	4649      	mov	r1, r9
 8004004:	f7fc fdba 	bl	8000b7c <__aeabi_dcmpun>
 8004008:	b140      	cbz	r0, 800401c <_printf_float+0xf0>
 800400a:	464b      	mov	r3, r9
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfbc      	itt	lt
 8004010:	232d      	movlt	r3, #45	; 0x2d
 8004012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004016:	487f      	ldr	r0, [pc, #508]	; (8004214 <_printf_float+0x2e8>)
 8004018:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <_printf_float+0x2ec>)
 800401a:	e7d1      	b.n	8003fc0 <_printf_float+0x94>
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004022:	9206      	str	r2, [sp, #24]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	d13f      	bne.n	80040a8 <_printf_float+0x17c>
 8004028:	2306      	movs	r3, #6
 800402a:	6063      	str	r3, [r4, #4]
 800402c:	9b05      	ldr	r3, [sp, #20]
 800402e:	6861      	ldr	r1, [r4, #4]
 8004030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004034:	2300      	movs	r3, #0
 8004036:	9303      	str	r3, [sp, #12]
 8004038:	ab0a      	add	r3, sp, #40	; 0x28
 800403a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800403e:	ab09      	add	r3, sp, #36	; 0x24
 8004040:	ec49 8b10 	vmov	d0, r8, r9
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6022      	str	r2, [r4, #0]
 8004048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800404c:	4628      	mov	r0, r5
 800404e:	f7ff fecd 	bl	8003dec <__cvt>
 8004052:	9b06      	ldr	r3, [sp, #24]
 8004054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004056:	2b47      	cmp	r3, #71	; 0x47
 8004058:	4680      	mov	r8, r0
 800405a:	d108      	bne.n	800406e <_printf_float+0x142>
 800405c:	1cc8      	adds	r0, r1, #3
 800405e:	db02      	blt.n	8004066 <_printf_float+0x13a>
 8004060:	6863      	ldr	r3, [r4, #4]
 8004062:	4299      	cmp	r1, r3
 8004064:	dd41      	ble.n	80040ea <_printf_float+0x1be>
 8004066:	f1ab 0b02 	sub.w	fp, fp, #2
 800406a:	fa5f fb8b 	uxtb.w	fp, fp
 800406e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004072:	d820      	bhi.n	80040b6 <_printf_float+0x18a>
 8004074:	3901      	subs	r1, #1
 8004076:	465a      	mov	r2, fp
 8004078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800407c:	9109      	str	r1, [sp, #36]	; 0x24
 800407e:	f7ff ff17 	bl	8003eb0 <__exponent>
 8004082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004084:	1813      	adds	r3, r2, r0
 8004086:	2a01      	cmp	r2, #1
 8004088:	4681      	mov	r9, r0
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	dc02      	bgt.n	8004094 <_printf_float+0x168>
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	07d2      	lsls	r2, r2, #31
 8004092:	d501      	bpl.n	8004098 <_printf_float+0x16c>
 8004094:	3301      	adds	r3, #1
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800409c:	2b00      	cmp	r3, #0
 800409e:	d09c      	beq.n	8003fda <_printf_float+0xae>
 80040a0:	232d      	movs	r3, #45	; 0x2d
 80040a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040a6:	e798      	b.n	8003fda <_printf_float+0xae>
 80040a8:	9a06      	ldr	r2, [sp, #24]
 80040aa:	2a47      	cmp	r2, #71	; 0x47
 80040ac:	d1be      	bne.n	800402c <_printf_float+0x100>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1bc      	bne.n	800402c <_printf_float+0x100>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e7b9      	b.n	800402a <_printf_float+0xfe>
 80040b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80040ba:	d118      	bne.n	80040ee <_printf_float+0x1c2>
 80040bc:	2900      	cmp	r1, #0
 80040be:	6863      	ldr	r3, [r4, #4]
 80040c0:	dd0b      	ble.n	80040da <_printf_float+0x1ae>
 80040c2:	6121      	str	r1, [r4, #16]
 80040c4:	b913      	cbnz	r3, 80040cc <_printf_float+0x1a0>
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	07d0      	lsls	r0, r2, #31
 80040ca:	d502      	bpl.n	80040d2 <_printf_float+0x1a6>
 80040cc:	3301      	adds	r3, #1
 80040ce:	440b      	add	r3, r1
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80040d4:	f04f 0900 	mov.w	r9, #0
 80040d8:	e7de      	b.n	8004098 <_printf_float+0x16c>
 80040da:	b913      	cbnz	r3, 80040e2 <_printf_float+0x1b6>
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	07d2      	lsls	r2, r2, #31
 80040e0:	d501      	bpl.n	80040e6 <_printf_float+0x1ba>
 80040e2:	3302      	adds	r3, #2
 80040e4:	e7f4      	b.n	80040d0 <_printf_float+0x1a4>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e7f2      	b.n	80040d0 <_printf_float+0x1a4>
 80040ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80040ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040f0:	4299      	cmp	r1, r3
 80040f2:	db05      	blt.n	8004100 <_printf_float+0x1d4>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	6121      	str	r1, [r4, #16]
 80040f8:	07d8      	lsls	r0, r3, #31
 80040fa:	d5ea      	bpl.n	80040d2 <_printf_float+0x1a6>
 80040fc:	1c4b      	adds	r3, r1, #1
 80040fe:	e7e7      	b.n	80040d0 <_printf_float+0x1a4>
 8004100:	2900      	cmp	r1, #0
 8004102:	bfd4      	ite	le
 8004104:	f1c1 0202 	rsble	r2, r1, #2
 8004108:	2201      	movgt	r2, #1
 800410a:	4413      	add	r3, r2
 800410c:	e7e0      	b.n	80040d0 <_printf_float+0x1a4>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	055a      	lsls	r2, r3, #21
 8004112:	d407      	bmi.n	8004124 <_printf_float+0x1f8>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	4642      	mov	r2, r8
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	d12c      	bne.n	800417c <_printf_float+0x250>
 8004122:	e764      	b.n	8003fee <_printf_float+0xc2>
 8004124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004128:	f240 80e0 	bls.w	80042ec <_printf_float+0x3c0>
 800412c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004130:	2200      	movs	r2, #0
 8004132:	2300      	movs	r3, #0
 8004134:	f7fc fcf0 	bl	8000b18 <__aeabi_dcmpeq>
 8004138:	2800      	cmp	r0, #0
 800413a:	d034      	beq.n	80041a6 <_printf_float+0x27a>
 800413c:	4a37      	ldr	r2, [pc, #220]	; (800421c <_printf_float+0x2f0>)
 800413e:	2301      	movs	r3, #1
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af51 	beq.w	8003fee <_printf_float+0xc2>
 800414c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004150:	429a      	cmp	r2, r3
 8004152:	db02      	blt.n	800415a <_printf_float+0x22e>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07d8      	lsls	r0, r3, #31
 8004158:	d510      	bpl.n	800417c <_printf_float+0x250>
 800415a:	ee18 3a10 	vmov	r3, s16
 800415e:	4652      	mov	r2, sl
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f af41 	beq.w	8003fee <_printf_float+0xc2>
 800416c:	f04f 0800 	mov.w	r8, #0
 8004170:	f104 091a 	add.w	r9, r4, #26
 8004174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	4543      	cmp	r3, r8
 800417a:	dc09      	bgt.n	8004190 <_printf_float+0x264>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	079b      	lsls	r3, r3, #30
 8004180:	f100 8105 	bmi.w	800438e <_printf_float+0x462>
 8004184:	68e0      	ldr	r0, [r4, #12]
 8004186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004188:	4298      	cmp	r0, r3
 800418a:	bfb8      	it	lt
 800418c:	4618      	movlt	r0, r3
 800418e:	e730      	b.n	8003ff2 <_printf_float+0xc6>
 8004190:	2301      	movs	r3, #1
 8004192:	464a      	mov	r2, r9
 8004194:	4631      	mov	r1, r6
 8004196:	4628      	mov	r0, r5
 8004198:	47b8      	blx	r7
 800419a:	3001      	adds	r0, #1
 800419c:	f43f af27 	beq.w	8003fee <_printf_float+0xc2>
 80041a0:	f108 0801 	add.w	r8, r8, #1
 80041a4:	e7e6      	b.n	8004174 <_printf_float+0x248>
 80041a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dc39      	bgt.n	8004220 <_printf_float+0x2f4>
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <_printf_float+0x2f0>)
 80041ae:	2301      	movs	r3, #1
 80041b0:	4631      	mov	r1, r6
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	f43f af19 	beq.w	8003fee <_printf_float+0xc2>
 80041bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d102      	bne.n	80041ca <_printf_float+0x29e>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	07d9      	lsls	r1, r3, #31
 80041c8:	d5d8      	bpl.n	800417c <_printf_float+0x250>
 80041ca:	ee18 3a10 	vmov	r3, s16
 80041ce:	4652      	mov	r2, sl
 80041d0:	4631      	mov	r1, r6
 80041d2:	4628      	mov	r0, r5
 80041d4:	47b8      	blx	r7
 80041d6:	3001      	adds	r0, #1
 80041d8:	f43f af09 	beq.w	8003fee <_printf_float+0xc2>
 80041dc:	f04f 0900 	mov.w	r9, #0
 80041e0:	f104 0a1a 	add.w	sl, r4, #26
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	425b      	negs	r3, r3
 80041e8:	454b      	cmp	r3, r9
 80041ea:	dc01      	bgt.n	80041f0 <_printf_float+0x2c4>
 80041ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ee:	e792      	b.n	8004116 <_printf_float+0x1ea>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4652      	mov	r2, sl
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b8      	blx	r7
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f aef7 	beq.w	8003fee <_printf_float+0xc2>
 8004200:	f109 0901 	add.w	r9, r9, #1
 8004204:	e7ee      	b.n	80041e4 <_printf_float+0x2b8>
 8004206:	bf00      	nop
 8004208:	7fefffff 	.word	0x7fefffff
 800420c:	080078d0 	.word	0x080078d0
 8004210:	080078d4 	.word	0x080078d4
 8004214:	080078dc 	.word	0x080078dc
 8004218:	080078d8 	.word	0x080078d8
 800421c:	080078e0 	.word	0x080078e0
 8004220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004224:	429a      	cmp	r2, r3
 8004226:	bfa8      	it	ge
 8004228:	461a      	movge	r2, r3
 800422a:	2a00      	cmp	r2, #0
 800422c:	4691      	mov	r9, r2
 800422e:	dc37      	bgt.n	80042a0 <_printf_float+0x374>
 8004230:	f04f 0b00 	mov.w	fp, #0
 8004234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004238:	f104 021a 	add.w	r2, r4, #26
 800423c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800423e:	9305      	str	r3, [sp, #20]
 8004240:	eba3 0309 	sub.w	r3, r3, r9
 8004244:	455b      	cmp	r3, fp
 8004246:	dc33      	bgt.n	80042b0 <_printf_float+0x384>
 8004248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800424c:	429a      	cmp	r2, r3
 800424e:	db3b      	blt.n	80042c8 <_printf_float+0x39c>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	07da      	lsls	r2, r3, #31
 8004254:	d438      	bmi.n	80042c8 <_printf_float+0x39c>
 8004256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004258:	9a05      	ldr	r2, [sp, #20]
 800425a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800425c:	1a9a      	subs	r2, r3, r2
 800425e:	eba3 0901 	sub.w	r9, r3, r1
 8004262:	4591      	cmp	r9, r2
 8004264:	bfa8      	it	ge
 8004266:	4691      	movge	r9, r2
 8004268:	f1b9 0f00 	cmp.w	r9, #0
 800426c:	dc35      	bgt.n	80042da <_printf_float+0x3ae>
 800426e:	f04f 0800 	mov.w	r8, #0
 8004272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004276:	f104 0a1a 	add.w	sl, r4, #26
 800427a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	eba3 0309 	sub.w	r3, r3, r9
 8004284:	4543      	cmp	r3, r8
 8004286:	f77f af79 	ble.w	800417c <_printf_float+0x250>
 800428a:	2301      	movs	r3, #1
 800428c:	4652      	mov	r2, sl
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	47b8      	blx	r7
 8004294:	3001      	adds	r0, #1
 8004296:	f43f aeaa 	beq.w	8003fee <_printf_float+0xc2>
 800429a:	f108 0801 	add.w	r8, r8, #1
 800429e:	e7ec      	b.n	800427a <_printf_float+0x34e>
 80042a0:	4613      	mov	r3, r2
 80042a2:	4631      	mov	r1, r6
 80042a4:	4642      	mov	r2, r8
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	d1c0      	bne.n	8004230 <_printf_float+0x304>
 80042ae:	e69e      	b.n	8003fee <_printf_float+0xc2>
 80042b0:	2301      	movs	r3, #1
 80042b2:	4631      	mov	r1, r6
 80042b4:	4628      	mov	r0, r5
 80042b6:	9205      	str	r2, [sp, #20]
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f ae97 	beq.w	8003fee <_printf_float+0xc2>
 80042c0:	9a05      	ldr	r2, [sp, #20]
 80042c2:	f10b 0b01 	add.w	fp, fp, #1
 80042c6:	e7b9      	b.n	800423c <_printf_float+0x310>
 80042c8:	ee18 3a10 	vmov	r3, s16
 80042cc:	4652      	mov	r2, sl
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	d1be      	bne.n	8004256 <_printf_float+0x32a>
 80042d8:	e689      	b.n	8003fee <_printf_float+0xc2>
 80042da:	9a05      	ldr	r2, [sp, #20]
 80042dc:	464b      	mov	r3, r9
 80042de:	4442      	add	r2, r8
 80042e0:	4631      	mov	r1, r6
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b8      	blx	r7
 80042e6:	3001      	adds	r0, #1
 80042e8:	d1c1      	bne.n	800426e <_printf_float+0x342>
 80042ea:	e680      	b.n	8003fee <_printf_float+0xc2>
 80042ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ee:	2a01      	cmp	r2, #1
 80042f0:	dc01      	bgt.n	80042f6 <_printf_float+0x3ca>
 80042f2:	07db      	lsls	r3, r3, #31
 80042f4:	d538      	bpl.n	8004368 <_printf_float+0x43c>
 80042f6:	2301      	movs	r3, #1
 80042f8:	4642      	mov	r2, r8
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f ae74 	beq.w	8003fee <_printf_float+0xc2>
 8004306:	ee18 3a10 	vmov	r3, s16
 800430a:	4652      	mov	r2, sl
 800430c:	4631      	mov	r1, r6
 800430e:	4628      	mov	r0, r5
 8004310:	47b8      	blx	r7
 8004312:	3001      	adds	r0, #1
 8004314:	f43f ae6b 	beq.w	8003fee <_printf_float+0xc2>
 8004318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800431c:	2200      	movs	r2, #0
 800431e:	2300      	movs	r3, #0
 8004320:	f7fc fbfa 	bl	8000b18 <__aeabi_dcmpeq>
 8004324:	b9d8      	cbnz	r0, 800435e <_printf_float+0x432>
 8004326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004328:	f108 0201 	add.w	r2, r8, #1
 800432c:	3b01      	subs	r3, #1
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	d10e      	bne.n	8004356 <_printf_float+0x42a>
 8004338:	e659      	b.n	8003fee <_printf_float+0xc2>
 800433a:	2301      	movs	r3, #1
 800433c:	4652      	mov	r2, sl
 800433e:	4631      	mov	r1, r6
 8004340:	4628      	mov	r0, r5
 8004342:	47b8      	blx	r7
 8004344:	3001      	adds	r0, #1
 8004346:	f43f ae52 	beq.w	8003fee <_printf_float+0xc2>
 800434a:	f108 0801 	add.w	r8, r8, #1
 800434e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	4543      	cmp	r3, r8
 8004354:	dcf1      	bgt.n	800433a <_printf_float+0x40e>
 8004356:	464b      	mov	r3, r9
 8004358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800435c:	e6dc      	b.n	8004118 <_printf_float+0x1ec>
 800435e:	f04f 0800 	mov.w	r8, #0
 8004362:	f104 0a1a 	add.w	sl, r4, #26
 8004366:	e7f2      	b.n	800434e <_printf_float+0x422>
 8004368:	2301      	movs	r3, #1
 800436a:	4642      	mov	r2, r8
 800436c:	e7df      	b.n	800432e <_printf_float+0x402>
 800436e:	2301      	movs	r3, #1
 8004370:	464a      	mov	r2, r9
 8004372:	4631      	mov	r1, r6
 8004374:	4628      	mov	r0, r5
 8004376:	47b8      	blx	r7
 8004378:	3001      	adds	r0, #1
 800437a:	f43f ae38 	beq.w	8003fee <_printf_float+0xc2>
 800437e:	f108 0801 	add.w	r8, r8, #1
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004386:	1a5b      	subs	r3, r3, r1
 8004388:	4543      	cmp	r3, r8
 800438a:	dcf0      	bgt.n	800436e <_printf_float+0x442>
 800438c:	e6fa      	b.n	8004184 <_printf_float+0x258>
 800438e:	f04f 0800 	mov.w	r8, #0
 8004392:	f104 0919 	add.w	r9, r4, #25
 8004396:	e7f4      	b.n	8004382 <_printf_float+0x456>

08004398 <_printf_common>:
 8004398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	4616      	mov	r6, r2
 800439e:	4699      	mov	r9, r3
 80043a0:	688a      	ldr	r2, [r1, #8]
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bfb8      	it	lt
 80043ac:	4613      	movlt	r3, r2
 80043ae:	6033      	str	r3, [r6, #0]
 80043b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043b4:	4607      	mov	r7, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	b10a      	cbz	r2, 80043be <_printf_common+0x26>
 80043ba:	3301      	adds	r3, #1
 80043bc:	6033      	str	r3, [r6, #0]
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	0699      	lsls	r1, r3, #26
 80043c2:	bf42      	ittt	mi
 80043c4:	6833      	ldrmi	r3, [r6, #0]
 80043c6:	3302      	addmi	r3, #2
 80043c8:	6033      	strmi	r3, [r6, #0]
 80043ca:	6825      	ldr	r5, [r4, #0]
 80043cc:	f015 0506 	ands.w	r5, r5, #6
 80043d0:	d106      	bne.n	80043e0 <_printf_common+0x48>
 80043d2:	f104 0a19 	add.w	sl, r4, #25
 80043d6:	68e3      	ldr	r3, [r4, #12]
 80043d8:	6832      	ldr	r2, [r6, #0]
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	42ab      	cmp	r3, r5
 80043de:	dc26      	bgt.n	800442e <_printf_common+0x96>
 80043e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043e4:	1e13      	subs	r3, r2, #0
 80043e6:	6822      	ldr	r2, [r4, #0]
 80043e8:	bf18      	it	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	0692      	lsls	r2, r2, #26
 80043ee:	d42b      	bmi.n	8004448 <_printf_common+0xb0>
 80043f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043f4:	4649      	mov	r1, r9
 80043f6:	4638      	mov	r0, r7
 80043f8:	47c0      	blx	r8
 80043fa:	3001      	adds	r0, #1
 80043fc:	d01e      	beq.n	800443c <_printf_common+0xa4>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	68e5      	ldr	r5, [r4, #12]
 8004402:	6832      	ldr	r2, [r6, #0]
 8004404:	f003 0306 	and.w	r3, r3, #6
 8004408:	2b04      	cmp	r3, #4
 800440a:	bf08      	it	eq
 800440c:	1aad      	subeq	r5, r5, r2
 800440e:	68a3      	ldr	r3, [r4, #8]
 8004410:	6922      	ldr	r2, [r4, #16]
 8004412:	bf0c      	ite	eq
 8004414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004418:	2500      	movne	r5, #0
 800441a:	4293      	cmp	r3, r2
 800441c:	bfc4      	itt	gt
 800441e:	1a9b      	subgt	r3, r3, r2
 8004420:	18ed      	addgt	r5, r5, r3
 8004422:	2600      	movs	r6, #0
 8004424:	341a      	adds	r4, #26
 8004426:	42b5      	cmp	r5, r6
 8004428:	d11a      	bne.n	8004460 <_printf_common+0xc8>
 800442a:	2000      	movs	r0, #0
 800442c:	e008      	b.n	8004440 <_printf_common+0xa8>
 800442e:	2301      	movs	r3, #1
 8004430:	4652      	mov	r2, sl
 8004432:	4649      	mov	r1, r9
 8004434:	4638      	mov	r0, r7
 8004436:	47c0      	blx	r8
 8004438:	3001      	adds	r0, #1
 800443a:	d103      	bne.n	8004444 <_printf_common+0xac>
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004444:	3501      	adds	r5, #1
 8004446:	e7c6      	b.n	80043d6 <_printf_common+0x3e>
 8004448:	18e1      	adds	r1, r4, r3
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	2030      	movs	r0, #48	; 0x30
 800444e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004452:	4422      	add	r2, r4
 8004454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800445c:	3302      	adds	r3, #2
 800445e:	e7c7      	b.n	80043f0 <_printf_common+0x58>
 8004460:	2301      	movs	r3, #1
 8004462:	4622      	mov	r2, r4
 8004464:	4649      	mov	r1, r9
 8004466:	4638      	mov	r0, r7
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d0e6      	beq.n	800443c <_printf_common+0xa4>
 800446e:	3601      	adds	r6, #1
 8004470:	e7d9      	b.n	8004426 <_printf_common+0x8e>
	...

08004474 <_printf_i>:
 8004474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	7e0f      	ldrb	r7, [r1, #24]
 800447a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800447c:	2f78      	cmp	r7, #120	; 0x78
 800447e:	4691      	mov	r9, r2
 8004480:	4680      	mov	r8, r0
 8004482:	460c      	mov	r4, r1
 8004484:	469a      	mov	sl, r3
 8004486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800448a:	d807      	bhi.n	800449c <_printf_i+0x28>
 800448c:	2f62      	cmp	r7, #98	; 0x62
 800448e:	d80a      	bhi.n	80044a6 <_printf_i+0x32>
 8004490:	2f00      	cmp	r7, #0
 8004492:	f000 80d8 	beq.w	8004646 <_printf_i+0x1d2>
 8004496:	2f58      	cmp	r7, #88	; 0x58
 8004498:	f000 80a3 	beq.w	80045e2 <_printf_i+0x16e>
 800449c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044a4:	e03a      	b.n	800451c <_printf_i+0xa8>
 80044a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044aa:	2b15      	cmp	r3, #21
 80044ac:	d8f6      	bhi.n	800449c <_printf_i+0x28>
 80044ae:	a101      	add	r1, pc, #4	; (adr r1, 80044b4 <_printf_i+0x40>)
 80044b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	08004521 	.word	0x08004521
 80044bc:	0800449d 	.word	0x0800449d
 80044c0:	0800449d 	.word	0x0800449d
 80044c4:	0800449d 	.word	0x0800449d
 80044c8:	0800449d 	.word	0x0800449d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800449d 	.word	0x0800449d
 80044d4:	0800449d 	.word	0x0800449d
 80044d8:	0800449d 	.word	0x0800449d
 80044dc:	0800449d 	.word	0x0800449d
 80044e0:	0800462d 	.word	0x0800462d
 80044e4:	08004551 	.word	0x08004551
 80044e8:	0800460f 	.word	0x0800460f
 80044ec:	0800449d 	.word	0x0800449d
 80044f0:	0800449d 	.word	0x0800449d
 80044f4:	0800464f 	.word	0x0800464f
 80044f8:	0800449d 	.word	0x0800449d
 80044fc:	08004551 	.word	0x08004551
 8004500:	0800449d 	.word	0x0800449d
 8004504:	0800449d 	.word	0x0800449d
 8004508:	08004617 	.word	0x08004617
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800451c:	2301      	movs	r3, #1
 800451e:	e0a3      	b.n	8004668 <_printf_i+0x1f4>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	6829      	ldr	r1, [r5, #0]
 8004524:	0606      	lsls	r6, r0, #24
 8004526:	f101 0304 	add.w	r3, r1, #4
 800452a:	d50a      	bpl.n	8004542 <_printf_i+0xce>
 800452c:	680e      	ldr	r6, [r1, #0]
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	2e00      	cmp	r6, #0
 8004532:	da03      	bge.n	800453c <_printf_i+0xc8>
 8004534:	232d      	movs	r3, #45	; 0x2d
 8004536:	4276      	negs	r6, r6
 8004538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453c:	485e      	ldr	r0, [pc, #376]	; (80046b8 <_printf_i+0x244>)
 800453e:	230a      	movs	r3, #10
 8004540:	e019      	b.n	8004576 <_printf_i+0x102>
 8004542:	680e      	ldr	r6, [r1, #0]
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800454a:	bf18      	it	ne
 800454c:	b236      	sxthne	r6, r6
 800454e:	e7ef      	b.n	8004530 <_printf_i+0xbc>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	6029      	str	r1, [r5, #0]
 8004558:	0601      	lsls	r1, r0, #24
 800455a:	d501      	bpl.n	8004560 <_printf_i+0xec>
 800455c:	681e      	ldr	r6, [r3, #0]
 800455e:	e002      	b.n	8004566 <_printf_i+0xf2>
 8004560:	0646      	lsls	r6, r0, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0xe8>
 8004564:	881e      	ldrh	r6, [r3, #0]
 8004566:	4854      	ldr	r0, [pc, #336]	; (80046b8 <_printf_i+0x244>)
 8004568:	2f6f      	cmp	r7, #111	; 0x6f
 800456a:	bf0c      	ite	eq
 800456c:	2308      	moveq	r3, #8
 800456e:	230a      	movne	r3, #10
 8004570:	2100      	movs	r1, #0
 8004572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004576:	6865      	ldr	r5, [r4, #4]
 8004578:	60a5      	str	r5, [r4, #8]
 800457a:	2d00      	cmp	r5, #0
 800457c:	bfa2      	ittt	ge
 800457e:	6821      	ldrge	r1, [r4, #0]
 8004580:	f021 0104 	bicge.w	r1, r1, #4
 8004584:	6021      	strge	r1, [r4, #0]
 8004586:	b90e      	cbnz	r6, 800458c <_printf_i+0x118>
 8004588:	2d00      	cmp	r5, #0
 800458a:	d04d      	beq.n	8004628 <_printf_i+0x1b4>
 800458c:	4615      	mov	r5, r2
 800458e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004592:	fb03 6711 	mls	r7, r3, r1, r6
 8004596:	5dc7      	ldrb	r7, [r0, r7]
 8004598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800459c:	4637      	mov	r7, r6
 800459e:	42bb      	cmp	r3, r7
 80045a0:	460e      	mov	r6, r1
 80045a2:	d9f4      	bls.n	800458e <_printf_i+0x11a>
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10b      	bne.n	80045c0 <_printf_i+0x14c>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	07de      	lsls	r6, r3, #31
 80045ac:	d508      	bpl.n	80045c0 <_printf_i+0x14c>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	6861      	ldr	r1, [r4, #4]
 80045b2:	4299      	cmp	r1, r3
 80045b4:	bfde      	ittt	le
 80045b6:	2330      	movle	r3, #48	; 0x30
 80045b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045c0:	1b52      	subs	r2, r2, r5
 80045c2:	6122      	str	r2, [r4, #16]
 80045c4:	f8cd a000 	str.w	sl, [sp]
 80045c8:	464b      	mov	r3, r9
 80045ca:	aa03      	add	r2, sp, #12
 80045cc:	4621      	mov	r1, r4
 80045ce:	4640      	mov	r0, r8
 80045d0:	f7ff fee2 	bl	8004398 <_printf_common>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d14c      	bne.n	8004672 <_printf_i+0x1fe>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	b004      	add	sp, #16
 80045de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e2:	4835      	ldr	r0, [pc, #212]	; (80046b8 <_printf_i+0x244>)
 80045e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045e8:	6829      	ldr	r1, [r5, #0]
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80045f0:	6029      	str	r1, [r5, #0]
 80045f2:	061d      	lsls	r5, r3, #24
 80045f4:	d514      	bpl.n	8004620 <_printf_i+0x1ac>
 80045f6:	07df      	lsls	r7, r3, #31
 80045f8:	bf44      	itt	mi
 80045fa:	f043 0320 	orrmi.w	r3, r3, #32
 80045fe:	6023      	strmi	r3, [r4, #0]
 8004600:	b91e      	cbnz	r6, 800460a <_printf_i+0x196>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f023 0320 	bic.w	r3, r3, #32
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	2310      	movs	r3, #16
 800460c:	e7b0      	b.n	8004570 <_printf_i+0xfc>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	2378      	movs	r3, #120	; 0x78
 8004618:	4828      	ldr	r0, [pc, #160]	; (80046bc <_printf_i+0x248>)
 800461a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800461e:	e7e3      	b.n	80045e8 <_printf_i+0x174>
 8004620:	0659      	lsls	r1, r3, #25
 8004622:	bf48      	it	mi
 8004624:	b2b6      	uxthmi	r6, r6
 8004626:	e7e6      	b.n	80045f6 <_printf_i+0x182>
 8004628:	4615      	mov	r5, r2
 800462a:	e7bb      	b.n	80045a4 <_printf_i+0x130>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	6826      	ldr	r6, [r4, #0]
 8004630:	6961      	ldr	r1, [r4, #20]
 8004632:	1d18      	adds	r0, r3, #4
 8004634:	6028      	str	r0, [r5, #0]
 8004636:	0635      	lsls	r5, r6, #24
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	d501      	bpl.n	8004640 <_printf_i+0x1cc>
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	e002      	b.n	8004646 <_printf_i+0x1d2>
 8004640:	0670      	lsls	r0, r6, #25
 8004642:	d5fb      	bpl.n	800463c <_printf_i+0x1c8>
 8004644:	8019      	strh	r1, [r3, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	6123      	str	r3, [r4, #16]
 800464a:	4615      	mov	r5, r2
 800464c:	e7ba      	b.n	80045c4 <_printf_i+0x150>
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	1d1a      	adds	r2, r3, #4
 8004652:	602a      	str	r2, [r5, #0]
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	6862      	ldr	r2, [r4, #4]
 8004658:	2100      	movs	r1, #0
 800465a:	4628      	mov	r0, r5
 800465c:	f7fb fde8 	bl	8000230 <memchr>
 8004660:	b108      	cbz	r0, 8004666 <_printf_i+0x1f2>
 8004662:	1b40      	subs	r0, r0, r5
 8004664:	6060      	str	r0, [r4, #4]
 8004666:	6863      	ldr	r3, [r4, #4]
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	2300      	movs	r3, #0
 800466c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004670:	e7a8      	b.n	80045c4 <_printf_i+0x150>
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	462a      	mov	r2, r5
 8004676:	4649      	mov	r1, r9
 8004678:	4640      	mov	r0, r8
 800467a:	47d0      	blx	sl
 800467c:	3001      	adds	r0, #1
 800467e:	d0ab      	beq.n	80045d8 <_printf_i+0x164>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	079b      	lsls	r3, r3, #30
 8004684:	d413      	bmi.n	80046ae <_printf_i+0x23a>
 8004686:	68e0      	ldr	r0, [r4, #12]
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	4298      	cmp	r0, r3
 800468c:	bfb8      	it	lt
 800468e:	4618      	movlt	r0, r3
 8004690:	e7a4      	b.n	80045dc <_printf_i+0x168>
 8004692:	2301      	movs	r3, #1
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d09b      	beq.n	80045d8 <_printf_i+0x164>
 80046a0:	3501      	adds	r5, #1
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	9903      	ldr	r1, [sp, #12]
 80046a6:	1a5b      	subs	r3, r3, r1
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	dcf2      	bgt.n	8004692 <_printf_i+0x21e>
 80046ac:	e7eb      	b.n	8004686 <_printf_i+0x212>
 80046ae:	2500      	movs	r5, #0
 80046b0:	f104 0619 	add.w	r6, r4, #25
 80046b4:	e7f5      	b.n	80046a2 <_printf_i+0x22e>
 80046b6:	bf00      	nop
 80046b8:	080078e2 	.word	0x080078e2
 80046bc:	080078f3 	.word	0x080078f3

080046c0 <siprintf>:
 80046c0:	b40e      	push	{r1, r2, r3}
 80046c2:	b500      	push	{lr}
 80046c4:	b09c      	sub	sp, #112	; 0x70
 80046c6:	ab1d      	add	r3, sp, #116	; 0x74
 80046c8:	9002      	str	r0, [sp, #8]
 80046ca:	9006      	str	r0, [sp, #24]
 80046cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046d0:	4809      	ldr	r0, [pc, #36]	; (80046f8 <siprintf+0x38>)
 80046d2:	9107      	str	r1, [sp, #28]
 80046d4:	9104      	str	r1, [sp, #16]
 80046d6:	4909      	ldr	r1, [pc, #36]	; (80046fc <siprintf+0x3c>)
 80046d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046dc:	9105      	str	r1, [sp, #20]
 80046de:	6800      	ldr	r0, [r0, #0]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	a902      	add	r1, sp, #8
 80046e4:	f001 fb76 	bl	8005dd4 <_svfiprintf_r>
 80046e8:	9b02      	ldr	r3, [sp, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	b01c      	add	sp, #112	; 0x70
 80046f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f4:	b003      	add	sp, #12
 80046f6:	4770      	bx	lr
 80046f8:	2000000c 	.word	0x2000000c
 80046fc:	ffff0208 	.word	0xffff0208

08004700 <quorem>:
 8004700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	6903      	ldr	r3, [r0, #16]
 8004706:	690c      	ldr	r4, [r1, #16]
 8004708:	42a3      	cmp	r3, r4
 800470a:	4607      	mov	r7, r0
 800470c:	f2c0 8081 	blt.w	8004812 <quorem+0x112>
 8004710:	3c01      	subs	r4, #1
 8004712:	f101 0814 	add.w	r8, r1, #20
 8004716:	f100 0514 	add.w	r5, r0, #20
 800471a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004728:	3301      	adds	r3, #1
 800472a:	429a      	cmp	r2, r3
 800472c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004734:	fbb2 f6f3 	udiv	r6, r2, r3
 8004738:	d331      	bcc.n	800479e <quorem+0x9e>
 800473a:	f04f 0e00 	mov.w	lr, #0
 800473e:	4640      	mov	r0, r8
 8004740:	46ac      	mov	ip, r5
 8004742:	46f2      	mov	sl, lr
 8004744:	f850 2b04 	ldr.w	r2, [r0], #4
 8004748:	b293      	uxth	r3, r2
 800474a:	fb06 e303 	mla	r3, r6, r3, lr
 800474e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004752:	b29b      	uxth	r3, r3
 8004754:	ebaa 0303 	sub.w	r3, sl, r3
 8004758:	f8dc a000 	ldr.w	sl, [ip]
 800475c:	0c12      	lsrs	r2, r2, #16
 800475e:	fa13 f38a 	uxtah	r3, r3, sl
 8004762:	fb06 e202 	mla	r2, r6, r2, lr
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	9b00      	ldr	r3, [sp, #0]
 800476a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800476e:	b292      	uxth	r2, r2
 8004770:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004778:	f8bd 3000 	ldrh.w	r3, [sp]
 800477c:	4581      	cmp	r9, r0
 800477e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004782:	f84c 3b04 	str.w	r3, [ip], #4
 8004786:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800478a:	d2db      	bcs.n	8004744 <quorem+0x44>
 800478c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004790:	b92b      	cbnz	r3, 800479e <quorem+0x9e>
 8004792:	9b01      	ldr	r3, [sp, #4]
 8004794:	3b04      	subs	r3, #4
 8004796:	429d      	cmp	r5, r3
 8004798:	461a      	mov	r2, r3
 800479a:	d32e      	bcc.n	80047fa <quorem+0xfa>
 800479c:	613c      	str	r4, [r7, #16]
 800479e:	4638      	mov	r0, r7
 80047a0:	f001 f8c4 	bl	800592c <__mcmp>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	db24      	blt.n	80047f2 <quorem+0xf2>
 80047a8:	3601      	adds	r6, #1
 80047aa:	4628      	mov	r0, r5
 80047ac:	f04f 0c00 	mov.w	ip, #0
 80047b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80047b4:	f8d0 e000 	ldr.w	lr, [r0]
 80047b8:	b293      	uxth	r3, r2
 80047ba:	ebac 0303 	sub.w	r3, ip, r3
 80047be:	0c12      	lsrs	r2, r2, #16
 80047c0:	fa13 f38e 	uxtah	r3, r3, lr
 80047c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047d2:	45c1      	cmp	r9, r8
 80047d4:	f840 3b04 	str.w	r3, [r0], #4
 80047d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047dc:	d2e8      	bcs.n	80047b0 <quorem+0xb0>
 80047de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047e6:	b922      	cbnz	r2, 80047f2 <quorem+0xf2>
 80047e8:	3b04      	subs	r3, #4
 80047ea:	429d      	cmp	r5, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	d30a      	bcc.n	8004806 <quorem+0x106>
 80047f0:	613c      	str	r4, [r7, #16]
 80047f2:	4630      	mov	r0, r6
 80047f4:	b003      	add	sp, #12
 80047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d1cc      	bne.n	800479c <quorem+0x9c>
 8004802:	3c01      	subs	r4, #1
 8004804:	e7c7      	b.n	8004796 <quorem+0x96>
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	3b04      	subs	r3, #4
 800480a:	2a00      	cmp	r2, #0
 800480c:	d1f0      	bne.n	80047f0 <quorem+0xf0>
 800480e:	3c01      	subs	r4, #1
 8004810:	e7eb      	b.n	80047ea <quorem+0xea>
 8004812:	2000      	movs	r0, #0
 8004814:	e7ee      	b.n	80047f4 <quorem+0xf4>
	...

08004818 <_dtoa_r>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	ed2d 8b04 	vpush	{d8-d9}
 8004820:	ec57 6b10 	vmov	r6, r7, d0
 8004824:	b093      	sub	sp, #76	; 0x4c
 8004826:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004828:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800482c:	9106      	str	r1, [sp, #24]
 800482e:	ee10 aa10 	vmov	sl, s0
 8004832:	4604      	mov	r4, r0
 8004834:	9209      	str	r2, [sp, #36]	; 0x24
 8004836:	930c      	str	r3, [sp, #48]	; 0x30
 8004838:	46bb      	mov	fp, r7
 800483a:	b975      	cbnz	r5, 800485a <_dtoa_r+0x42>
 800483c:	2010      	movs	r0, #16
 800483e:	f000 fddd 	bl	80053fc <malloc>
 8004842:	4602      	mov	r2, r0
 8004844:	6260      	str	r0, [r4, #36]	; 0x24
 8004846:	b920      	cbnz	r0, 8004852 <_dtoa_r+0x3a>
 8004848:	4ba7      	ldr	r3, [pc, #668]	; (8004ae8 <_dtoa_r+0x2d0>)
 800484a:	21ea      	movs	r1, #234	; 0xea
 800484c:	48a7      	ldr	r0, [pc, #668]	; (8004aec <_dtoa_r+0x2d4>)
 800484e:	f001 fbd1 	bl	8005ff4 <__assert_func>
 8004852:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004856:	6005      	str	r5, [r0, #0]
 8004858:	60c5      	str	r5, [r0, #12]
 800485a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800485c:	6819      	ldr	r1, [r3, #0]
 800485e:	b151      	cbz	r1, 8004876 <_dtoa_r+0x5e>
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	604a      	str	r2, [r1, #4]
 8004864:	2301      	movs	r3, #1
 8004866:	4093      	lsls	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
 800486a:	4620      	mov	r0, r4
 800486c:	f000 fe1c 	bl	80054a8 <_Bfree>
 8004870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	1e3b      	subs	r3, r7, #0
 8004878:	bfaa      	itet	ge
 800487a:	2300      	movge	r3, #0
 800487c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004880:	f8c8 3000 	strge.w	r3, [r8]
 8004884:	4b9a      	ldr	r3, [pc, #616]	; (8004af0 <_dtoa_r+0x2d8>)
 8004886:	bfbc      	itt	lt
 8004888:	2201      	movlt	r2, #1
 800488a:	f8c8 2000 	strlt.w	r2, [r8]
 800488e:	ea33 030b 	bics.w	r3, r3, fp
 8004892:	d11b      	bne.n	80048cc <_dtoa_r+0xb4>
 8004894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004896:	f242 730f 	movw	r3, #9999	; 0x270f
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048a0:	4333      	orrs	r3, r6
 80048a2:	f000 8592 	beq.w	80053ca <_dtoa_r+0xbb2>
 80048a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048a8:	b963      	cbnz	r3, 80048c4 <_dtoa_r+0xac>
 80048aa:	4b92      	ldr	r3, [pc, #584]	; (8004af4 <_dtoa_r+0x2dc>)
 80048ac:	e022      	b.n	80048f4 <_dtoa_r+0xdc>
 80048ae:	4b92      	ldr	r3, [pc, #584]	; (8004af8 <_dtoa_r+0x2e0>)
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	3308      	adds	r3, #8
 80048b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	9801      	ldr	r0, [sp, #4]
 80048ba:	b013      	add	sp, #76	; 0x4c
 80048bc:	ecbd 8b04 	vpop	{d8-d9}
 80048c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c4:	4b8b      	ldr	r3, [pc, #556]	; (8004af4 <_dtoa_r+0x2dc>)
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	3303      	adds	r3, #3
 80048ca:	e7f3      	b.n	80048b4 <_dtoa_r+0x9c>
 80048cc:	2200      	movs	r2, #0
 80048ce:	2300      	movs	r3, #0
 80048d0:	4650      	mov	r0, sl
 80048d2:	4659      	mov	r1, fp
 80048d4:	f7fc f920 	bl	8000b18 <__aeabi_dcmpeq>
 80048d8:	ec4b ab19 	vmov	d9, sl, fp
 80048dc:	4680      	mov	r8, r0
 80048de:	b158      	cbz	r0, 80048f8 <_dtoa_r+0xe0>
 80048e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048e2:	2301      	movs	r3, #1
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 856b 	beq.w	80053c4 <_dtoa_r+0xbac>
 80048ee:	4883      	ldr	r0, [pc, #524]	; (8004afc <_dtoa_r+0x2e4>)
 80048f0:	6018      	str	r0, [r3, #0]
 80048f2:	1e43      	subs	r3, r0, #1
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	e7df      	b.n	80048b8 <_dtoa_r+0xa0>
 80048f8:	ec4b ab10 	vmov	d0, sl, fp
 80048fc:	aa10      	add	r2, sp, #64	; 0x40
 80048fe:	a911      	add	r1, sp, #68	; 0x44
 8004900:	4620      	mov	r0, r4
 8004902:	f001 f8b9 	bl	8005a78 <__d2b>
 8004906:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800490a:	ee08 0a10 	vmov	s16, r0
 800490e:	2d00      	cmp	r5, #0
 8004910:	f000 8084 	beq.w	8004a1c <_dtoa_r+0x204>
 8004914:	ee19 3a90 	vmov	r3, s19
 8004918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800491c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004920:	4656      	mov	r6, sl
 8004922:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800492a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800492e:	4b74      	ldr	r3, [pc, #464]	; (8004b00 <_dtoa_r+0x2e8>)
 8004930:	2200      	movs	r2, #0
 8004932:	4630      	mov	r0, r6
 8004934:	4639      	mov	r1, r7
 8004936:	f7fb fccf 	bl	80002d8 <__aeabi_dsub>
 800493a:	a365      	add	r3, pc, #404	; (adr r3, 8004ad0 <_dtoa_r+0x2b8>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb fe82 	bl	8000648 <__aeabi_dmul>
 8004944:	a364      	add	r3, pc, #400	; (adr r3, 8004ad8 <_dtoa_r+0x2c0>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f7fb fcc7 	bl	80002dc <__adddf3>
 800494e:	4606      	mov	r6, r0
 8004950:	4628      	mov	r0, r5
 8004952:	460f      	mov	r7, r1
 8004954:	f7fb fe0e 	bl	8000574 <__aeabi_i2d>
 8004958:	a361      	add	r3, pc, #388	; (adr r3, 8004ae0 <_dtoa_r+0x2c8>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fb fe73 	bl	8000648 <__aeabi_dmul>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4630      	mov	r0, r6
 8004968:	4639      	mov	r1, r7
 800496a:	f7fb fcb7 	bl	80002dc <__adddf3>
 800496e:	4606      	mov	r6, r0
 8004970:	460f      	mov	r7, r1
 8004972:	f7fc f919 	bl	8000ba8 <__aeabi_d2iz>
 8004976:	2200      	movs	r2, #0
 8004978:	9000      	str	r0, [sp, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fc f8d4 	bl	8000b2c <__aeabi_dcmplt>
 8004984:	b150      	cbz	r0, 800499c <_dtoa_r+0x184>
 8004986:	9800      	ldr	r0, [sp, #0]
 8004988:	f7fb fdf4 	bl	8000574 <__aeabi_i2d>
 800498c:	4632      	mov	r2, r6
 800498e:	463b      	mov	r3, r7
 8004990:	f7fc f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8004994:	b910      	cbnz	r0, 800499c <_dtoa_r+0x184>
 8004996:	9b00      	ldr	r3, [sp, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	9b00      	ldr	r3, [sp, #0]
 800499e:	2b16      	cmp	r3, #22
 80049a0:	d85a      	bhi.n	8004a58 <_dtoa_r+0x240>
 80049a2:	9a00      	ldr	r2, [sp, #0]
 80049a4:	4b57      	ldr	r3, [pc, #348]	; (8004b04 <_dtoa_r+0x2ec>)
 80049a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	ec51 0b19 	vmov	r0, r1, d9
 80049b2:	f7fc f8bb 	bl	8000b2c <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d050      	beq.n	8004a5c <_dtoa_r+0x244>
 80049ba:	9b00      	ldr	r3, [sp, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80049c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049c6:	1b5d      	subs	r5, r3, r5
 80049c8:	1e6b      	subs	r3, r5, #1
 80049ca:	9305      	str	r3, [sp, #20]
 80049cc:	bf45      	ittet	mi
 80049ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80049d2:	9304      	strmi	r3, [sp, #16]
 80049d4:	2300      	movpl	r3, #0
 80049d6:	2300      	movmi	r3, #0
 80049d8:	bf4c      	ite	mi
 80049da:	9305      	strmi	r3, [sp, #20]
 80049dc:	9304      	strpl	r3, [sp, #16]
 80049de:	9b00      	ldr	r3, [sp, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db3d      	blt.n	8004a60 <_dtoa_r+0x248>
 80049e4:	9b05      	ldr	r3, [sp, #20]
 80049e6:	9a00      	ldr	r2, [sp, #0]
 80049e8:	920a      	str	r2, [sp, #40]	; 0x28
 80049ea:	4413      	add	r3, r2
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9307      	str	r3, [sp, #28]
 80049f2:	9b06      	ldr	r3, [sp, #24]
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	f200 8089 	bhi.w	8004b0c <_dtoa_r+0x2f4>
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	bfc4      	itt	gt
 80049fe:	3b04      	subgt	r3, #4
 8004a00:	9306      	strgt	r3, [sp, #24]
 8004a02:	9b06      	ldr	r3, [sp, #24]
 8004a04:	f1a3 0302 	sub.w	r3, r3, #2
 8004a08:	bfcc      	ite	gt
 8004a0a:	2500      	movgt	r5, #0
 8004a0c:	2501      	movle	r5, #1
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	f200 8087 	bhi.w	8004b22 <_dtoa_r+0x30a>
 8004a14:	e8df f003 	tbb	[pc, r3]
 8004a18:	59383a2d 	.word	0x59383a2d
 8004a1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004a20:	441d      	add	r5, r3
 8004a22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	bfc1      	itttt	gt
 8004a2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a32:	fa0b f303 	lslgt.w	r3, fp, r3
 8004a36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a3a:	bfda      	itte	le
 8004a3c:	f1c3 0320 	rsble	r3, r3, #32
 8004a40:	fa06 f003 	lslle.w	r0, r6, r3
 8004a44:	4318      	orrgt	r0, r3
 8004a46:	f7fb fd85 	bl	8000554 <__aeabi_ui2d>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004a52:	3d01      	subs	r5, #1
 8004a54:	930e      	str	r3, [sp, #56]	; 0x38
 8004a56:	e76a      	b.n	800492e <_dtoa_r+0x116>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e7b2      	b.n	80049c2 <_dtoa_r+0x1aa>
 8004a5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a5e:	e7b1      	b.n	80049c4 <_dtoa_r+0x1ac>
 8004a60:	9b04      	ldr	r3, [sp, #16]
 8004a62:	9a00      	ldr	r2, [sp, #0]
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	4253      	negs	r3, r2
 8004a6a:	9307      	str	r3, [sp, #28]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a70:	e7bf      	b.n	80049f2 <_dtoa_r+0x1da>
 8004a72:	2300      	movs	r3, #0
 8004a74:	9308      	str	r3, [sp, #32]
 8004a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	dc55      	bgt.n	8004b28 <_dtoa_r+0x310>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a82:	461a      	mov	r2, r3
 8004a84:	9209      	str	r2, [sp, #36]	; 0x24
 8004a86:	e00c      	b.n	8004aa2 <_dtoa_r+0x28a>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e7f3      	b.n	8004a74 <_dtoa_r+0x25c>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a90:	9308      	str	r3, [sp, #32]
 8004a92:	9b00      	ldr	r3, [sp, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	9303      	str	r3, [sp, #12]
 8004a9e:	bfb8      	it	lt
 8004aa0:	2301      	movlt	r3, #1
 8004aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	6042      	str	r2, [r0, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	f102 0614 	add.w	r6, r2, #20
 8004aae:	429e      	cmp	r6, r3
 8004ab0:	6841      	ldr	r1, [r0, #4]
 8004ab2:	d93d      	bls.n	8004b30 <_dtoa_r+0x318>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 fcb7 	bl	8005428 <_Balloc>
 8004aba:	9001      	str	r0, [sp, #4]
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d13b      	bne.n	8004b38 <_dtoa_r+0x320>
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <_dtoa_r+0x2f0>)
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ac8:	e6c0      	b.n	800484c <_dtoa_r+0x34>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e7df      	b.n	8004a8e <_dtoa_r+0x276>
 8004ace:	bf00      	nop
 8004ad0:	636f4361 	.word	0x636f4361
 8004ad4:	3fd287a7 	.word	0x3fd287a7
 8004ad8:	8b60c8b3 	.word	0x8b60c8b3
 8004adc:	3fc68a28 	.word	0x3fc68a28
 8004ae0:	509f79fb 	.word	0x509f79fb
 8004ae4:	3fd34413 	.word	0x3fd34413
 8004ae8:	08007911 	.word	0x08007911
 8004aec:	08007928 	.word	0x08007928
 8004af0:	7ff00000 	.word	0x7ff00000
 8004af4:	0800790d 	.word	0x0800790d
 8004af8:	08007904 	.word	0x08007904
 8004afc:	080078e1 	.word	0x080078e1
 8004b00:	3ff80000 	.word	0x3ff80000
 8004b04:	08007a18 	.word	0x08007a18
 8004b08:	08007983 	.word	0x08007983
 8004b0c:	2501      	movs	r5, #1
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9306      	str	r3, [sp, #24]
 8004b12:	9508      	str	r5, [sp, #32]
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
 8004b18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2312      	movs	r3, #18
 8004b20:	e7b0      	b.n	8004a84 <_dtoa_r+0x26c>
 8004b22:	2301      	movs	r3, #1
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	e7f5      	b.n	8004b14 <_dtoa_r+0x2fc>
 8004b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b2e:	e7b8      	b.n	8004aa2 <_dtoa_r+0x28a>
 8004b30:	3101      	adds	r1, #1
 8004b32:	6041      	str	r1, [r0, #4]
 8004b34:	0052      	lsls	r2, r2, #1
 8004b36:	e7b8      	b.n	8004aaa <_dtoa_r+0x292>
 8004b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b3a:	9a01      	ldr	r2, [sp, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	9b03      	ldr	r3, [sp, #12]
 8004b40:	2b0e      	cmp	r3, #14
 8004b42:	f200 809d 	bhi.w	8004c80 <_dtoa_r+0x468>
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	f000 809a 	beq.w	8004c80 <_dtoa_r+0x468>
 8004b4c:	9b00      	ldr	r3, [sp, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dd32      	ble.n	8004bb8 <_dtoa_r+0x3a0>
 8004b52:	4ab7      	ldr	r2, [pc, #732]	; (8004e30 <_dtoa_r+0x618>)
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b60:	9b00      	ldr	r3, [sp, #0]
 8004b62:	05d8      	lsls	r0, r3, #23
 8004b64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004b68:	d516      	bpl.n	8004b98 <_dtoa_r+0x380>
 8004b6a:	4bb2      	ldr	r3, [pc, #712]	; (8004e34 <_dtoa_r+0x61c>)
 8004b6c:	ec51 0b19 	vmov	r0, r1, d9
 8004b70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b74:	f7fb fe92 	bl	800089c <__aeabi_ddiv>
 8004b78:	f007 070f 	and.w	r7, r7, #15
 8004b7c:	4682      	mov	sl, r0
 8004b7e:	468b      	mov	fp, r1
 8004b80:	2503      	movs	r5, #3
 8004b82:	4eac      	ldr	r6, [pc, #688]	; (8004e34 <_dtoa_r+0x61c>)
 8004b84:	b957      	cbnz	r7, 8004b9c <_dtoa_r+0x384>
 8004b86:	4642      	mov	r2, r8
 8004b88:	464b      	mov	r3, r9
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	f7fb fe85 	bl	800089c <__aeabi_ddiv>
 8004b92:	4682      	mov	sl, r0
 8004b94:	468b      	mov	fp, r1
 8004b96:	e028      	b.n	8004bea <_dtoa_r+0x3d2>
 8004b98:	2502      	movs	r5, #2
 8004b9a:	e7f2      	b.n	8004b82 <_dtoa_r+0x36a>
 8004b9c:	07f9      	lsls	r1, r7, #31
 8004b9e:	d508      	bpl.n	8004bb2 <_dtoa_r+0x39a>
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ba8:	f7fb fd4e 	bl	8000648 <__aeabi_dmul>
 8004bac:	3501      	adds	r5, #1
 8004bae:	4680      	mov	r8, r0
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	107f      	asrs	r7, r7, #1
 8004bb4:	3608      	adds	r6, #8
 8004bb6:	e7e5      	b.n	8004b84 <_dtoa_r+0x36c>
 8004bb8:	f000 809b 	beq.w	8004cf2 <_dtoa_r+0x4da>
 8004bbc:	9b00      	ldr	r3, [sp, #0]
 8004bbe:	4f9d      	ldr	r7, [pc, #628]	; (8004e34 <_dtoa_r+0x61c>)
 8004bc0:	425e      	negs	r6, r3
 8004bc2:	4b9b      	ldr	r3, [pc, #620]	; (8004e30 <_dtoa_r+0x618>)
 8004bc4:	f006 020f 	and.w	r2, r6, #15
 8004bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	ec51 0b19 	vmov	r0, r1, d9
 8004bd4:	f7fb fd38 	bl	8000648 <__aeabi_dmul>
 8004bd8:	1136      	asrs	r6, r6, #4
 8004bda:	4682      	mov	sl, r0
 8004bdc:	468b      	mov	fp, r1
 8004bde:	2300      	movs	r3, #0
 8004be0:	2502      	movs	r5, #2
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d17a      	bne.n	8004cdc <_dtoa_r+0x4c4>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1d3      	bne.n	8004b92 <_dtoa_r+0x37a>
 8004bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8082 	beq.w	8004cf6 <_dtoa_r+0x4de>
 8004bf2:	4b91      	ldr	r3, [pc, #580]	; (8004e38 <_dtoa_r+0x620>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	f7fb ff97 	bl	8000b2c <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d079      	beq.n	8004cf6 <_dtoa_r+0x4de>
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d076      	beq.n	8004cf6 <_dtoa_r+0x4de>
 8004c08:	9b02      	ldr	r3, [sp, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dd36      	ble.n	8004c7c <_dtoa_r+0x464>
 8004c0e:	9b00      	ldr	r3, [sp, #0]
 8004c10:	4650      	mov	r0, sl
 8004c12:	4659      	mov	r1, fp
 8004c14:	1e5f      	subs	r7, r3, #1
 8004c16:	2200      	movs	r2, #0
 8004c18:	4b88      	ldr	r3, [pc, #544]	; (8004e3c <_dtoa_r+0x624>)
 8004c1a:	f7fb fd15 	bl	8000648 <__aeabi_dmul>
 8004c1e:	9e02      	ldr	r6, [sp, #8]
 8004c20:	4682      	mov	sl, r0
 8004c22:	468b      	mov	fp, r1
 8004c24:	3501      	adds	r5, #1
 8004c26:	4628      	mov	r0, r5
 8004c28:	f7fb fca4 	bl	8000574 <__aeabi_i2d>
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	465b      	mov	r3, fp
 8004c30:	f7fb fd0a 	bl	8000648 <__aeabi_dmul>
 8004c34:	4b82      	ldr	r3, [pc, #520]	; (8004e40 <_dtoa_r+0x628>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	f7fb fb50 	bl	80002dc <__adddf3>
 8004c3c:	46d0      	mov	r8, sl
 8004c3e:	46d9      	mov	r9, fp
 8004c40:	4682      	mov	sl, r0
 8004c42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004c46:	2e00      	cmp	r6, #0
 8004c48:	d158      	bne.n	8004cfc <_dtoa_r+0x4e4>
 8004c4a:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <_dtoa_r+0x62c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4640      	mov	r0, r8
 8004c50:	4649      	mov	r1, r9
 8004c52:	f7fb fb41 	bl	80002d8 <__aeabi_dsub>
 8004c56:	4652      	mov	r2, sl
 8004c58:	465b      	mov	r3, fp
 8004c5a:	4680      	mov	r8, r0
 8004c5c:	4689      	mov	r9, r1
 8004c5e:	f7fb ff83 	bl	8000b68 <__aeabi_dcmpgt>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f040 8295 	bne.w	8005192 <_dtoa_r+0x97a>
 8004c68:	4652      	mov	r2, sl
 8004c6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb ff5b 	bl	8000b2c <__aeabi_dcmplt>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f040 8289 	bne.w	800518e <_dtoa_r+0x976>
 8004c7c:	ec5b ab19 	vmov	sl, fp, d9
 8004c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f2c0 8148 	blt.w	8004f18 <_dtoa_r+0x700>
 8004c88:	9a00      	ldr	r2, [sp, #0]
 8004c8a:	2a0e      	cmp	r2, #14
 8004c8c:	f300 8144 	bgt.w	8004f18 <_dtoa_r+0x700>
 8004c90:	4b67      	ldr	r3, [pc, #412]	; (8004e30 <_dtoa_r+0x618>)
 8004c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f280 80d5 	bge.w	8004e4c <_dtoa_r+0x634>
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f300 80d1 	bgt.w	8004e4c <_dtoa_r+0x634>
 8004caa:	f040 826f 	bne.w	800518c <_dtoa_r+0x974>
 8004cae:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <_dtoa_r+0x62c>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	f7fb fcc7 	bl	8000648 <__aeabi_dmul>
 8004cba:	4652      	mov	r2, sl
 8004cbc:	465b      	mov	r3, fp
 8004cbe:	f7fb ff49 	bl	8000b54 <__aeabi_dcmpge>
 8004cc2:	9e03      	ldr	r6, [sp, #12]
 8004cc4:	4637      	mov	r7, r6
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	f040 8245 	bne.w	8005156 <_dtoa_r+0x93e>
 8004ccc:	9d01      	ldr	r5, [sp, #4]
 8004cce:	2331      	movs	r3, #49	; 0x31
 8004cd0:	f805 3b01 	strb.w	r3, [r5], #1
 8004cd4:	9b00      	ldr	r3, [sp, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	e240      	b.n	800515e <_dtoa_r+0x946>
 8004cdc:	07f2      	lsls	r2, r6, #31
 8004cde:	d505      	bpl.n	8004cec <_dtoa_r+0x4d4>
 8004ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce4:	f7fb fcb0 	bl	8000648 <__aeabi_dmul>
 8004ce8:	3501      	adds	r5, #1
 8004cea:	2301      	movs	r3, #1
 8004cec:	1076      	asrs	r6, r6, #1
 8004cee:	3708      	adds	r7, #8
 8004cf0:	e777      	b.n	8004be2 <_dtoa_r+0x3ca>
 8004cf2:	2502      	movs	r5, #2
 8004cf4:	e779      	b.n	8004bea <_dtoa_r+0x3d2>
 8004cf6:	9f00      	ldr	r7, [sp, #0]
 8004cf8:	9e03      	ldr	r6, [sp, #12]
 8004cfa:	e794      	b.n	8004c26 <_dtoa_r+0x40e>
 8004cfc:	9901      	ldr	r1, [sp, #4]
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	; (8004e30 <_dtoa_r+0x618>)
 8004d00:	4431      	add	r1, r6
 8004d02:	910d      	str	r1, [sp, #52]	; 0x34
 8004d04:	9908      	ldr	r1, [sp, #32]
 8004d06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d0e:	2900      	cmp	r1, #0
 8004d10:	d043      	beq.n	8004d9a <_dtoa_r+0x582>
 8004d12:	494d      	ldr	r1, [pc, #308]	; (8004e48 <_dtoa_r+0x630>)
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fb fdc1 	bl	800089c <__aeabi_ddiv>
 8004d1a:	4652      	mov	r2, sl
 8004d1c:	465b      	mov	r3, fp
 8004d1e:	f7fb fadb 	bl	80002d8 <__aeabi_dsub>
 8004d22:	9d01      	ldr	r5, [sp, #4]
 8004d24:	4682      	mov	sl, r0
 8004d26:	468b      	mov	fp, r1
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f7fb ff3c 	bl	8000ba8 <__aeabi_d2iz>
 8004d30:	4606      	mov	r6, r0
 8004d32:	f7fb fc1f 	bl	8000574 <__aeabi_i2d>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb facb 	bl	80002d8 <__aeabi_dsub>
 8004d42:	3630      	adds	r6, #48	; 0x30
 8004d44:	f805 6b01 	strb.w	r6, [r5], #1
 8004d48:	4652      	mov	r2, sl
 8004d4a:	465b      	mov	r3, fp
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	4689      	mov	r9, r1
 8004d50:	f7fb feec 	bl	8000b2c <__aeabi_dcmplt>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d163      	bne.n	8004e20 <_dtoa_r+0x608>
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	4936      	ldr	r1, [pc, #216]	; (8004e38 <_dtoa_r+0x620>)
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7fb faba 	bl	80002d8 <__aeabi_dsub>
 8004d64:	4652      	mov	r2, sl
 8004d66:	465b      	mov	r3, fp
 8004d68:	f7fb fee0 	bl	8000b2c <__aeabi_dcmplt>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f040 80b5 	bne.w	8004edc <_dtoa_r+0x6c4>
 8004d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d74:	429d      	cmp	r5, r3
 8004d76:	d081      	beq.n	8004c7c <_dtoa_r+0x464>
 8004d78:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <_dtoa_r+0x624>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4650      	mov	r0, sl
 8004d7e:	4659      	mov	r1, fp
 8004d80:	f7fb fc62 	bl	8000648 <__aeabi_dmul>
 8004d84:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <_dtoa_r+0x624>)
 8004d86:	4682      	mov	sl, r0
 8004d88:	468b      	mov	fp, r1
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f7fb fc5a 	bl	8000648 <__aeabi_dmul>
 8004d94:	4680      	mov	r8, r0
 8004d96:	4689      	mov	r9, r1
 8004d98:	e7c6      	b.n	8004d28 <_dtoa_r+0x510>
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	f7fb fc53 	bl	8000648 <__aeabi_dmul>
 8004da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004da4:	9d01      	ldr	r5, [sp, #4]
 8004da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004da8:	4682      	mov	sl, r0
 8004daa:	468b      	mov	fp, r1
 8004dac:	4649      	mov	r1, r9
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7fb fefa 	bl	8000ba8 <__aeabi_d2iz>
 8004db4:	4606      	mov	r6, r0
 8004db6:	f7fb fbdd 	bl	8000574 <__aeabi_i2d>
 8004dba:	3630      	adds	r6, #48	; 0x30
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	f7fb fa88 	bl	80002d8 <__aeabi_dsub>
 8004dc8:	f805 6b01 	strb.w	r6, [r5], #1
 8004dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dce:	429d      	cmp	r5, r3
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	4689      	mov	r9, r1
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	d124      	bne.n	8004e24 <_dtoa_r+0x60c>
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <_dtoa_r+0x630>)
 8004ddc:	4650      	mov	r0, sl
 8004dde:	4659      	mov	r1, fp
 8004de0:	f7fb fa7c 	bl	80002dc <__adddf3>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4640      	mov	r0, r8
 8004dea:	4649      	mov	r1, r9
 8004dec:	f7fb febc 	bl	8000b68 <__aeabi_dcmpgt>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d173      	bne.n	8004edc <_dtoa_r+0x6c4>
 8004df4:	4652      	mov	r2, sl
 8004df6:	465b      	mov	r3, fp
 8004df8:	4913      	ldr	r1, [pc, #76]	; (8004e48 <_dtoa_r+0x630>)
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f7fb fa6c 	bl	80002d8 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4640      	mov	r0, r8
 8004e06:	4649      	mov	r1, r9
 8004e08:	f7fb fe90 	bl	8000b2c <__aeabi_dcmplt>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	f43f af35 	beq.w	8004c7c <_dtoa_r+0x464>
 8004e12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004e14:	1e6b      	subs	r3, r5, #1
 8004e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e1c:	2b30      	cmp	r3, #48	; 0x30
 8004e1e:	d0f8      	beq.n	8004e12 <_dtoa_r+0x5fa>
 8004e20:	9700      	str	r7, [sp, #0]
 8004e22:	e049      	b.n	8004eb8 <_dtoa_r+0x6a0>
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <_dtoa_r+0x624>)
 8004e26:	f7fb fc0f 	bl	8000648 <__aeabi_dmul>
 8004e2a:	4680      	mov	r8, r0
 8004e2c:	4689      	mov	r9, r1
 8004e2e:	e7bd      	b.n	8004dac <_dtoa_r+0x594>
 8004e30:	08007a18 	.word	0x08007a18
 8004e34:	080079f0 	.word	0x080079f0
 8004e38:	3ff00000 	.word	0x3ff00000
 8004e3c:	40240000 	.word	0x40240000
 8004e40:	401c0000 	.word	0x401c0000
 8004e44:	40140000 	.word	0x40140000
 8004e48:	3fe00000 	.word	0x3fe00000
 8004e4c:	9d01      	ldr	r5, [sp, #4]
 8004e4e:	4656      	mov	r6, sl
 8004e50:	465f      	mov	r7, fp
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	4630      	mov	r0, r6
 8004e58:	4639      	mov	r1, r7
 8004e5a:	f7fb fd1f 	bl	800089c <__aeabi_ddiv>
 8004e5e:	f7fb fea3 	bl	8000ba8 <__aeabi_d2iz>
 8004e62:	4682      	mov	sl, r0
 8004e64:	f7fb fb86 	bl	8000574 <__aeabi_i2d>
 8004e68:	4642      	mov	r2, r8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	f7fb fbec 	bl	8000648 <__aeabi_dmul>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004e7c:	f7fb fa2c 	bl	80002d8 <__aeabi_dsub>
 8004e80:	f805 6b01 	strb.w	r6, [r5], #1
 8004e84:	9e01      	ldr	r6, [sp, #4]
 8004e86:	9f03      	ldr	r7, [sp, #12]
 8004e88:	1bae      	subs	r6, r5, r6
 8004e8a:	42b7      	cmp	r7, r6
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	d135      	bne.n	8004efe <_dtoa_r+0x6e6>
 8004e92:	f7fb fa23 	bl	80002dc <__adddf3>
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	f7fb fe63 	bl	8000b68 <__aeabi_dcmpgt>
 8004ea2:	b9d0      	cbnz	r0, 8004eda <_dtoa_r+0x6c2>
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	4639      	mov	r1, r7
 8004eac:	f7fb fe34 	bl	8000b18 <__aeabi_dcmpeq>
 8004eb0:	b110      	cbz	r0, 8004eb8 <_dtoa_r+0x6a0>
 8004eb2:	f01a 0f01 	tst.w	sl, #1
 8004eb6:	d110      	bne.n	8004eda <_dtoa_r+0x6c2>
 8004eb8:	4620      	mov	r0, r4
 8004eba:	ee18 1a10 	vmov	r1, s16
 8004ebe:	f000 faf3 	bl	80054a8 <_Bfree>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9800      	ldr	r0, [sp, #0]
 8004ec6:	702b      	strb	r3, [r5, #0]
 8004ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eca:	3001      	adds	r0, #1
 8004ecc:	6018      	str	r0, [r3, #0]
 8004ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f43f acf1 	beq.w	80048b8 <_dtoa_r+0xa0>
 8004ed6:	601d      	str	r5, [r3, #0]
 8004ed8:	e4ee      	b.n	80048b8 <_dtoa_r+0xa0>
 8004eda:	9f00      	ldr	r7, [sp, #0]
 8004edc:	462b      	mov	r3, r5
 8004ede:	461d      	mov	r5, r3
 8004ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ee4:	2a39      	cmp	r2, #57	; 0x39
 8004ee6:	d106      	bne.n	8004ef6 <_dtoa_r+0x6de>
 8004ee8:	9a01      	ldr	r2, [sp, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d1f7      	bne.n	8004ede <_dtoa_r+0x6c6>
 8004eee:	9901      	ldr	r1, [sp, #4]
 8004ef0:	2230      	movs	r2, #48	; 0x30
 8004ef2:	3701      	adds	r7, #1
 8004ef4:	700a      	strb	r2, [r1, #0]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	3201      	adds	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e790      	b.n	8004e20 <_dtoa_r+0x608>
 8004efe:	4ba6      	ldr	r3, [pc, #664]	; (8005198 <_dtoa_r+0x980>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	f7fb fba1 	bl	8000648 <__aeabi_dmul>
 8004f06:	2200      	movs	r2, #0
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460f      	mov	r7, r1
 8004f0e:	f7fb fe03 	bl	8000b18 <__aeabi_dcmpeq>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d09d      	beq.n	8004e52 <_dtoa_r+0x63a>
 8004f16:	e7cf      	b.n	8004eb8 <_dtoa_r+0x6a0>
 8004f18:	9a08      	ldr	r2, [sp, #32]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	f000 80d7 	beq.w	80050ce <_dtoa_r+0x8b6>
 8004f20:	9a06      	ldr	r2, [sp, #24]
 8004f22:	2a01      	cmp	r2, #1
 8004f24:	f300 80ba 	bgt.w	800509c <_dtoa_r+0x884>
 8004f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	f000 80b2 	beq.w	8005094 <_dtoa_r+0x87c>
 8004f30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f34:	9e07      	ldr	r6, [sp, #28]
 8004f36:	9d04      	ldr	r5, [sp, #16]
 8004f38:	9a04      	ldr	r2, [sp, #16]
 8004f3a:	441a      	add	r2, r3
 8004f3c:	9204      	str	r2, [sp, #16]
 8004f3e:	9a05      	ldr	r2, [sp, #20]
 8004f40:	2101      	movs	r1, #1
 8004f42:	441a      	add	r2, r3
 8004f44:	4620      	mov	r0, r4
 8004f46:	9205      	str	r2, [sp, #20]
 8004f48:	f000 fb66 	bl	8005618 <__i2b>
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	dd0c      	ble.n	8004f6c <_dtoa_r+0x754>
 8004f52:	9b05      	ldr	r3, [sp, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	dd09      	ble.n	8004f6c <_dtoa_r+0x754>
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	9a04      	ldr	r2, [sp, #16]
 8004f5c:	bfa8      	it	ge
 8004f5e:	462b      	movge	r3, r5
 8004f60:	1ad2      	subs	r2, r2, r3
 8004f62:	9204      	str	r2, [sp, #16]
 8004f64:	9a05      	ldr	r2, [sp, #20]
 8004f66:	1aed      	subs	r5, r5, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	9305      	str	r3, [sp, #20]
 8004f6c:	9b07      	ldr	r3, [sp, #28]
 8004f6e:	b31b      	cbz	r3, 8004fb8 <_dtoa_r+0x7a0>
 8004f70:	9b08      	ldr	r3, [sp, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80af 	beq.w	80050d6 <_dtoa_r+0x8be>
 8004f78:	2e00      	cmp	r6, #0
 8004f7a:	dd13      	ble.n	8004fa4 <_dtoa_r+0x78c>
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	4632      	mov	r2, r6
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 fc09 	bl	8005798 <__pow5mult>
 8004f86:	ee18 2a10 	vmov	r2, s16
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 fb58 	bl	8005644 <__multiply>
 8004f94:	ee18 1a10 	vmov	r1, s16
 8004f98:	4680      	mov	r8, r0
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f000 fa84 	bl	80054a8 <_Bfree>
 8004fa0:	ee08 8a10 	vmov	s16, r8
 8004fa4:	9b07      	ldr	r3, [sp, #28]
 8004fa6:	1b9a      	subs	r2, r3, r6
 8004fa8:	d006      	beq.n	8004fb8 <_dtoa_r+0x7a0>
 8004faa:	ee18 1a10 	vmov	r1, s16
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f000 fbf2 	bl	8005798 <__pow5mult>
 8004fb4:	ee08 0a10 	vmov	s16, r0
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 fb2c 	bl	8005618 <__i2b>
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	f340 8088 	ble.w	80050da <_dtoa_r+0x8c2>
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4601      	mov	r1, r0
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f000 fbe2 	bl	8005798 <__pow5mult>
 8004fd4:	9b06      	ldr	r3, [sp, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	4606      	mov	r6, r0
 8004fda:	f340 8081 	ble.w	80050e0 <_dtoa_r+0x8c8>
 8004fde:	f04f 0800 	mov.w	r8, #0
 8004fe2:	6933      	ldr	r3, [r6, #16]
 8004fe4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004fe8:	6918      	ldr	r0, [r3, #16]
 8004fea:	f000 fac5 	bl	8005578 <__hi0bits>
 8004fee:	f1c0 0020 	rsb	r0, r0, #32
 8004ff2:	9b05      	ldr	r3, [sp, #20]
 8004ff4:	4418      	add	r0, r3
 8004ff6:	f010 001f 	ands.w	r0, r0, #31
 8004ffa:	f000 8092 	beq.w	8005122 <_dtoa_r+0x90a>
 8004ffe:	f1c0 0320 	rsb	r3, r0, #32
 8005002:	2b04      	cmp	r3, #4
 8005004:	f340 808a 	ble.w	800511c <_dtoa_r+0x904>
 8005008:	f1c0 001c 	rsb	r0, r0, #28
 800500c:	9b04      	ldr	r3, [sp, #16]
 800500e:	4403      	add	r3, r0
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	9b05      	ldr	r3, [sp, #20]
 8005014:	4403      	add	r3, r0
 8005016:	4405      	add	r5, r0
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	9b04      	ldr	r3, [sp, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	dd07      	ble.n	8005030 <_dtoa_r+0x818>
 8005020:	ee18 1a10 	vmov	r1, s16
 8005024:	461a      	mov	r2, r3
 8005026:	4620      	mov	r0, r4
 8005028:	f000 fc10 	bl	800584c <__lshift>
 800502c:	ee08 0a10 	vmov	s16, r0
 8005030:	9b05      	ldr	r3, [sp, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd05      	ble.n	8005042 <_dtoa_r+0x82a>
 8005036:	4631      	mov	r1, r6
 8005038:	461a      	mov	r2, r3
 800503a:	4620      	mov	r0, r4
 800503c:	f000 fc06 	bl	800584c <__lshift>
 8005040:	4606      	mov	r6, r0
 8005042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d06e      	beq.n	8005126 <_dtoa_r+0x90e>
 8005048:	ee18 0a10 	vmov	r0, s16
 800504c:	4631      	mov	r1, r6
 800504e:	f000 fc6d 	bl	800592c <__mcmp>
 8005052:	2800      	cmp	r0, #0
 8005054:	da67      	bge.n	8005126 <_dtoa_r+0x90e>
 8005056:	9b00      	ldr	r3, [sp, #0]
 8005058:	3b01      	subs	r3, #1
 800505a:	ee18 1a10 	vmov	r1, s16
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	220a      	movs	r2, #10
 8005062:	2300      	movs	r3, #0
 8005064:	4620      	mov	r0, r4
 8005066:	f000 fa41 	bl	80054ec <__multadd>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	ee08 0a10 	vmov	s16, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 81b1 	beq.w	80053d8 <_dtoa_r+0xbc0>
 8005076:	2300      	movs	r3, #0
 8005078:	4639      	mov	r1, r7
 800507a:	220a      	movs	r2, #10
 800507c:	4620      	mov	r0, r4
 800507e:	f000 fa35 	bl	80054ec <__multadd>
 8005082:	9b02      	ldr	r3, [sp, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	4607      	mov	r7, r0
 8005088:	f300 808e 	bgt.w	80051a8 <_dtoa_r+0x990>
 800508c:	9b06      	ldr	r3, [sp, #24]
 800508e:	2b02      	cmp	r3, #2
 8005090:	dc51      	bgt.n	8005136 <_dtoa_r+0x91e>
 8005092:	e089      	b.n	80051a8 <_dtoa_r+0x990>
 8005094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800509a:	e74b      	b.n	8004f34 <_dtoa_r+0x71c>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	1e5e      	subs	r6, r3, #1
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	42b3      	cmp	r3, r6
 80050a4:	bfbf      	itttt	lt
 80050a6:	9b07      	ldrlt	r3, [sp, #28]
 80050a8:	9607      	strlt	r6, [sp, #28]
 80050aa:	1af2      	sublt	r2, r6, r3
 80050ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80050ae:	bfb6      	itet	lt
 80050b0:	189b      	addlt	r3, r3, r2
 80050b2:	1b9e      	subge	r6, r3, r6
 80050b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	bfb8      	it	lt
 80050ba:	2600      	movlt	r6, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bfb7      	itett	lt
 80050c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80050c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80050c8:	1a9d      	sublt	r5, r3, r2
 80050ca:	2300      	movlt	r3, #0
 80050cc:	e734      	b.n	8004f38 <_dtoa_r+0x720>
 80050ce:	9e07      	ldr	r6, [sp, #28]
 80050d0:	9d04      	ldr	r5, [sp, #16]
 80050d2:	9f08      	ldr	r7, [sp, #32]
 80050d4:	e73b      	b.n	8004f4e <_dtoa_r+0x736>
 80050d6:	9a07      	ldr	r2, [sp, #28]
 80050d8:	e767      	b.n	8004faa <_dtoa_r+0x792>
 80050da:	9b06      	ldr	r3, [sp, #24]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	dc18      	bgt.n	8005112 <_dtoa_r+0x8fa>
 80050e0:	f1ba 0f00 	cmp.w	sl, #0
 80050e4:	d115      	bne.n	8005112 <_dtoa_r+0x8fa>
 80050e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050ea:	b993      	cbnz	r3, 8005112 <_dtoa_r+0x8fa>
 80050ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80050f0:	0d1b      	lsrs	r3, r3, #20
 80050f2:	051b      	lsls	r3, r3, #20
 80050f4:	b183      	cbz	r3, 8005118 <_dtoa_r+0x900>
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	3301      	adds	r3, #1
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	9b05      	ldr	r3, [sp, #20]
 80050fe:	3301      	adds	r3, #1
 8005100:	9305      	str	r3, [sp, #20]
 8005102:	f04f 0801 	mov.w	r8, #1
 8005106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	f47f af6a 	bne.w	8004fe2 <_dtoa_r+0x7ca>
 800510e:	2001      	movs	r0, #1
 8005110:	e76f      	b.n	8004ff2 <_dtoa_r+0x7da>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	e7f6      	b.n	8005106 <_dtoa_r+0x8ee>
 8005118:	4698      	mov	r8, r3
 800511a:	e7f4      	b.n	8005106 <_dtoa_r+0x8ee>
 800511c:	f43f af7d 	beq.w	800501a <_dtoa_r+0x802>
 8005120:	4618      	mov	r0, r3
 8005122:	301c      	adds	r0, #28
 8005124:	e772      	b.n	800500c <_dtoa_r+0x7f4>
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	dc37      	bgt.n	800519c <_dtoa_r+0x984>
 800512c:	9b06      	ldr	r3, [sp, #24]
 800512e:	2b02      	cmp	r3, #2
 8005130:	dd34      	ble.n	800519c <_dtoa_r+0x984>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	9302      	str	r3, [sp, #8]
 8005136:	9b02      	ldr	r3, [sp, #8]
 8005138:	b96b      	cbnz	r3, 8005156 <_dtoa_r+0x93e>
 800513a:	4631      	mov	r1, r6
 800513c:	2205      	movs	r2, #5
 800513e:	4620      	mov	r0, r4
 8005140:	f000 f9d4 	bl	80054ec <__multadd>
 8005144:	4601      	mov	r1, r0
 8005146:	4606      	mov	r6, r0
 8005148:	ee18 0a10 	vmov	r0, s16
 800514c:	f000 fbee 	bl	800592c <__mcmp>
 8005150:	2800      	cmp	r0, #0
 8005152:	f73f adbb 	bgt.w	8004ccc <_dtoa_r+0x4b4>
 8005156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005158:	9d01      	ldr	r5, [sp, #4]
 800515a:	43db      	mvns	r3, r3
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	f04f 0800 	mov.w	r8, #0
 8005162:	4631      	mov	r1, r6
 8005164:	4620      	mov	r0, r4
 8005166:	f000 f99f 	bl	80054a8 <_Bfree>
 800516a:	2f00      	cmp	r7, #0
 800516c:	f43f aea4 	beq.w	8004eb8 <_dtoa_r+0x6a0>
 8005170:	f1b8 0f00 	cmp.w	r8, #0
 8005174:	d005      	beq.n	8005182 <_dtoa_r+0x96a>
 8005176:	45b8      	cmp	r8, r7
 8005178:	d003      	beq.n	8005182 <_dtoa_r+0x96a>
 800517a:	4641      	mov	r1, r8
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f993 	bl	80054a8 <_Bfree>
 8005182:	4639      	mov	r1, r7
 8005184:	4620      	mov	r0, r4
 8005186:	f000 f98f 	bl	80054a8 <_Bfree>
 800518a:	e695      	b.n	8004eb8 <_dtoa_r+0x6a0>
 800518c:	2600      	movs	r6, #0
 800518e:	4637      	mov	r7, r6
 8005190:	e7e1      	b.n	8005156 <_dtoa_r+0x93e>
 8005192:	9700      	str	r7, [sp, #0]
 8005194:	4637      	mov	r7, r6
 8005196:	e599      	b.n	8004ccc <_dtoa_r+0x4b4>
 8005198:	40240000 	.word	0x40240000
 800519c:	9b08      	ldr	r3, [sp, #32]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80ca 	beq.w	8005338 <_dtoa_r+0xb20>
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	2d00      	cmp	r5, #0
 80051aa:	dd05      	ble.n	80051b8 <_dtoa_r+0x9a0>
 80051ac:	4639      	mov	r1, r7
 80051ae:	462a      	mov	r2, r5
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 fb4b 	bl	800584c <__lshift>
 80051b6:	4607      	mov	r7, r0
 80051b8:	f1b8 0f00 	cmp.w	r8, #0
 80051bc:	d05b      	beq.n	8005276 <_dtoa_r+0xa5e>
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 f931 	bl	8005428 <_Balloc>
 80051c6:	4605      	mov	r5, r0
 80051c8:	b928      	cbnz	r0, 80051d6 <_dtoa_r+0x9be>
 80051ca:	4b87      	ldr	r3, [pc, #540]	; (80053e8 <_dtoa_r+0xbd0>)
 80051cc:	4602      	mov	r2, r0
 80051ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051d2:	f7ff bb3b 	b.w	800484c <_dtoa_r+0x34>
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	3202      	adds	r2, #2
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	f107 010c 	add.w	r1, r7, #12
 80051e0:	300c      	adds	r0, #12
 80051e2:	f000 f913 	bl	800540c <memcpy>
 80051e6:	2201      	movs	r2, #1
 80051e8:	4629      	mov	r1, r5
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 fb2e 	bl	800584c <__lshift>
 80051f0:	9b01      	ldr	r3, [sp, #4]
 80051f2:	f103 0901 	add.w	r9, r3, #1
 80051f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80051fa:	4413      	add	r3, r2
 80051fc:	9305      	str	r3, [sp, #20]
 80051fe:	f00a 0301 	and.w	r3, sl, #1
 8005202:	46b8      	mov	r8, r7
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	4607      	mov	r7, r0
 8005208:	4631      	mov	r1, r6
 800520a:	ee18 0a10 	vmov	r0, s16
 800520e:	f7ff fa77 	bl	8004700 <quorem>
 8005212:	4641      	mov	r1, r8
 8005214:	9002      	str	r0, [sp, #8]
 8005216:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800521a:	ee18 0a10 	vmov	r0, s16
 800521e:	f000 fb85 	bl	800592c <__mcmp>
 8005222:	463a      	mov	r2, r7
 8005224:	9003      	str	r0, [sp, #12]
 8005226:	4631      	mov	r1, r6
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fb9b 	bl	8005964 <__mdiff>
 800522e:	68c2      	ldr	r2, [r0, #12]
 8005230:	f109 3bff 	add.w	fp, r9, #4294967295
 8005234:	4605      	mov	r5, r0
 8005236:	bb02      	cbnz	r2, 800527a <_dtoa_r+0xa62>
 8005238:	4601      	mov	r1, r0
 800523a:	ee18 0a10 	vmov	r0, s16
 800523e:	f000 fb75 	bl	800592c <__mcmp>
 8005242:	4602      	mov	r2, r0
 8005244:	4629      	mov	r1, r5
 8005246:	4620      	mov	r0, r4
 8005248:	9207      	str	r2, [sp, #28]
 800524a:	f000 f92d 	bl	80054a8 <_Bfree>
 800524e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005252:	ea43 0102 	orr.w	r1, r3, r2
 8005256:	9b04      	ldr	r3, [sp, #16]
 8005258:	430b      	orrs	r3, r1
 800525a:	464d      	mov	r5, r9
 800525c:	d10f      	bne.n	800527e <_dtoa_r+0xa66>
 800525e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005262:	d02a      	beq.n	80052ba <_dtoa_r+0xaa2>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd02      	ble.n	8005270 <_dtoa_r+0xa58>
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005270:	f88b a000 	strb.w	sl, [fp]
 8005274:	e775      	b.n	8005162 <_dtoa_r+0x94a>
 8005276:	4638      	mov	r0, r7
 8005278:	e7ba      	b.n	80051f0 <_dtoa_r+0x9d8>
 800527a:	2201      	movs	r2, #1
 800527c:	e7e2      	b.n	8005244 <_dtoa_r+0xa2c>
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db04      	blt.n	800528e <_dtoa_r+0xa76>
 8005284:	9906      	ldr	r1, [sp, #24]
 8005286:	430b      	orrs	r3, r1
 8005288:	9904      	ldr	r1, [sp, #16]
 800528a:	430b      	orrs	r3, r1
 800528c:	d122      	bne.n	80052d4 <_dtoa_r+0xabc>
 800528e:	2a00      	cmp	r2, #0
 8005290:	ddee      	ble.n	8005270 <_dtoa_r+0xa58>
 8005292:	ee18 1a10 	vmov	r1, s16
 8005296:	2201      	movs	r2, #1
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fad7 	bl	800584c <__lshift>
 800529e:	4631      	mov	r1, r6
 80052a0:	ee08 0a10 	vmov	s16, r0
 80052a4:	f000 fb42 	bl	800592c <__mcmp>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	dc03      	bgt.n	80052b4 <_dtoa_r+0xa9c>
 80052ac:	d1e0      	bne.n	8005270 <_dtoa_r+0xa58>
 80052ae:	f01a 0f01 	tst.w	sl, #1
 80052b2:	d0dd      	beq.n	8005270 <_dtoa_r+0xa58>
 80052b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052b8:	d1d7      	bne.n	800526a <_dtoa_r+0xa52>
 80052ba:	2339      	movs	r3, #57	; 0x39
 80052bc:	f88b 3000 	strb.w	r3, [fp]
 80052c0:	462b      	mov	r3, r5
 80052c2:	461d      	mov	r5, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052ca:	2a39      	cmp	r2, #57	; 0x39
 80052cc:	d071      	beq.n	80053b2 <_dtoa_r+0xb9a>
 80052ce:	3201      	adds	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e746      	b.n	8005162 <_dtoa_r+0x94a>
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	dd07      	ble.n	80052e8 <_dtoa_r+0xad0>
 80052d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052dc:	d0ed      	beq.n	80052ba <_dtoa_r+0xaa2>
 80052de:	f10a 0301 	add.w	r3, sl, #1
 80052e2:	f88b 3000 	strb.w	r3, [fp]
 80052e6:	e73c      	b.n	8005162 <_dtoa_r+0x94a>
 80052e8:	9b05      	ldr	r3, [sp, #20]
 80052ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80052ee:	4599      	cmp	r9, r3
 80052f0:	d047      	beq.n	8005382 <_dtoa_r+0xb6a>
 80052f2:	ee18 1a10 	vmov	r1, s16
 80052f6:	2300      	movs	r3, #0
 80052f8:	220a      	movs	r2, #10
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 f8f6 	bl	80054ec <__multadd>
 8005300:	45b8      	cmp	r8, r7
 8005302:	ee08 0a10 	vmov	s16, r0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	f04f 020a 	mov.w	r2, #10
 800530e:	4641      	mov	r1, r8
 8005310:	4620      	mov	r0, r4
 8005312:	d106      	bne.n	8005322 <_dtoa_r+0xb0a>
 8005314:	f000 f8ea 	bl	80054ec <__multadd>
 8005318:	4680      	mov	r8, r0
 800531a:	4607      	mov	r7, r0
 800531c:	f109 0901 	add.w	r9, r9, #1
 8005320:	e772      	b.n	8005208 <_dtoa_r+0x9f0>
 8005322:	f000 f8e3 	bl	80054ec <__multadd>
 8005326:	4639      	mov	r1, r7
 8005328:	4680      	mov	r8, r0
 800532a:	2300      	movs	r3, #0
 800532c:	220a      	movs	r2, #10
 800532e:	4620      	mov	r0, r4
 8005330:	f000 f8dc 	bl	80054ec <__multadd>
 8005334:	4607      	mov	r7, r0
 8005336:	e7f1      	b.n	800531c <_dtoa_r+0xb04>
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	9d01      	ldr	r5, [sp, #4]
 800533e:	ee18 0a10 	vmov	r0, s16
 8005342:	4631      	mov	r1, r6
 8005344:	f7ff f9dc 	bl	8004700 <quorem>
 8005348:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	f805 ab01 	strb.w	sl, [r5], #1
 8005352:	1aea      	subs	r2, r5, r3
 8005354:	9b02      	ldr	r3, [sp, #8]
 8005356:	4293      	cmp	r3, r2
 8005358:	dd09      	ble.n	800536e <_dtoa_r+0xb56>
 800535a:	ee18 1a10 	vmov	r1, s16
 800535e:	2300      	movs	r3, #0
 8005360:	220a      	movs	r2, #10
 8005362:	4620      	mov	r0, r4
 8005364:	f000 f8c2 	bl	80054ec <__multadd>
 8005368:	ee08 0a10 	vmov	s16, r0
 800536c:	e7e7      	b.n	800533e <_dtoa_r+0xb26>
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfc8      	it	gt
 8005374:	461d      	movgt	r5, r3
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	bfd8      	it	le
 800537a:	2501      	movle	r5, #1
 800537c:	441d      	add	r5, r3
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	ee18 1a10 	vmov	r1, s16
 8005386:	2201      	movs	r2, #1
 8005388:	4620      	mov	r0, r4
 800538a:	f000 fa5f 	bl	800584c <__lshift>
 800538e:	4631      	mov	r1, r6
 8005390:	ee08 0a10 	vmov	s16, r0
 8005394:	f000 faca 	bl	800592c <__mcmp>
 8005398:	2800      	cmp	r0, #0
 800539a:	dc91      	bgt.n	80052c0 <_dtoa_r+0xaa8>
 800539c:	d102      	bne.n	80053a4 <_dtoa_r+0xb8c>
 800539e:	f01a 0f01 	tst.w	sl, #1
 80053a2:	d18d      	bne.n	80052c0 <_dtoa_r+0xaa8>
 80053a4:	462b      	mov	r3, r5
 80053a6:	461d      	mov	r5, r3
 80053a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ac:	2a30      	cmp	r2, #48	; 0x30
 80053ae:	d0fa      	beq.n	80053a6 <_dtoa_r+0xb8e>
 80053b0:	e6d7      	b.n	8005162 <_dtoa_r+0x94a>
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d184      	bne.n	80052c2 <_dtoa_r+0xaaa>
 80053b8:	9b00      	ldr	r3, [sp, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2331      	movs	r3, #49	; 0x31
 80053c0:	7013      	strb	r3, [r2, #0]
 80053c2:	e6ce      	b.n	8005162 <_dtoa_r+0x94a>
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <_dtoa_r+0xbd4>)
 80053c6:	f7ff ba95 	b.w	80048f4 <_dtoa_r+0xdc>
 80053ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f47f aa6e 	bne.w	80048ae <_dtoa_r+0x96>
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <_dtoa_r+0xbd8>)
 80053d4:	f7ff ba8e 	b.w	80048f4 <_dtoa_r+0xdc>
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	dcae      	bgt.n	800533c <_dtoa_r+0xb24>
 80053de:	9b06      	ldr	r3, [sp, #24]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	f73f aea8 	bgt.w	8005136 <_dtoa_r+0x91e>
 80053e6:	e7a9      	b.n	800533c <_dtoa_r+0xb24>
 80053e8:	08007983 	.word	0x08007983
 80053ec:	080078e0 	.word	0x080078e0
 80053f0:	08007904 	.word	0x08007904

080053f4 <_localeconv_r>:
 80053f4:	4800      	ldr	r0, [pc, #0]	; (80053f8 <_localeconv_r+0x4>)
 80053f6:	4770      	bx	lr
 80053f8:	20000160 	.word	0x20000160

080053fc <malloc>:
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <malloc+0xc>)
 80053fe:	4601      	mov	r1, r0
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f000 bc17 	b.w	8005c34 <_malloc_r>
 8005406:	bf00      	nop
 8005408:	2000000c 	.word	0x2000000c

0800540c <memcpy>:
 800540c:	440a      	add	r2, r1
 800540e:	4291      	cmp	r1, r2
 8005410:	f100 33ff 	add.w	r3, r0, #4294967295
 8005414:	d100      	bne.n	8005418 <memcpy+0xc>
 8005416:	4770      	bx	lr
 8005418:	b510      	push	{r4, lr}
 800541a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005422:	4291      	cmp	r1, r2
 8005424:	d1f9      	bne.n	800541a <memcpy+0xe>
 8005426:	bd10      	pop	{r4, pc}

08005428 <_Balloc>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800542c:	4604      	mov	r4, r0
 800542e:	460d      	mov	r5, r1
 8005430:	b976      	cbnz	r6, 8005450 <_Balloc+0x28>
 8005432:	2010      	movs	r0, #16
 8005434:	f7ff ffe2 	bl	80053fc <malloc>
 8005438:	4602      	mov	r2, r0
 800543a:	6260      	str	r0, [r4, #36]	; 0x24
 800543c:	b920      	cbnz	r0, 8005448 <_Balloc+0x20>
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <_Balloc+0x78>)
 8005440:	4818      	ldr	r0, [pc, #96]	; (80054a4 <_Balloc+0x7c>)
 8005442:	2166      	movs	r1, #102	; 0x66
 8005444:	f000 fdd6 	bl	8005ff4 <__assert_func>
 8005448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800544c:	6006      	str	r6, [r0, #0]
 800544e:	60c6      	str	r6, [r0, #12]
 8005450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005452:	68f3      	ldr	r3, [r6, #12]
 8005454:	b183      	cbz	r3, 8005478 <_Balloc+0x50>
 8005456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800545e:	b9b8      	cbnz	r0, 8005490 <_Balloc+0x68>
 8005460:	2101      	movs	r1, #1
 8005462:	fa01 f605 	lsl.w	r6, r1, r5
 8005466:	1d72      	adds	r2, r6, #5
 8005468:	0092      	lsls	r2, r2, #2
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fb60 	bl	8005b30 <_calloc_r>
 8005470:	b160      	cbz	r0, 800548c <_Balloc+0x64>
 8005472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005476:	e00e      	b.n	8005496 <_Balloc+0x6e>
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	2104      	movs	r1, #4
 800547c:	4620      	mov	r0, r4
 800547e:	f000 fb57 	bl	8005b30 <_calloc_r>
 8005482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005484:	60f0      	str	r0, [r6, #12]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e4      	bne.n	8005456 <_Balloc+0x2e>
 800548c:	2000      	movs	r0, #0
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	6802      	ldr	r2, [r0, #0]
 8005492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005496:	2300      	movs	r3, #0
 8005498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800549c:	e7f7      	b.n	800548e <_Balloc+0x66>
 800549e:	bf00      	nop
 80054a0:	08007911 	.word	0x08007911
 80054a4:	08007994 	.word	0x08007994

080054a8 <_Bfree>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054ac:	4605      	mov	r5, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	b976      	cbnz	r6, 80054d0 <_Bfree+0x28>
 80054b2:	2010      	movs	r0, #16
 80054b4:	f7ff ffa2 	bl	80053fc <malloc>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6268      	str	r0, [r5, #36]	; 0x24
 80054bc:	b920      	cbnz	r0, 80054c8 <_Bfree+0x20>
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <_Bfree+0x3c>)
 80054c0:	4809      	ldr	r0, [pc, #36]	; (80054e8 <_Bfree+0x40>)
 80054c2:	218a      	movs	r1, #138	; 0x8a
 80054c4:	f000 fd96 	bl	8005ff4 <__assert_func>
 80054c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054cc:	6006      	str	r6, [r0, #0]
 80054ce:	60c6      	str	r6, [r0, #12]
 80054d0:	b13c      	cbz	r4, 80054e2 <_Bfree+0x3a>
 80054d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054d4:	6862      	ldr	r2, [r4, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054dc:	6021      	str	r1, [r4, #0]
 80054de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	08007911 	.word	0x08007911
 80054e8:	08007994 	.word	0x08007994

080054ec <__multadd>:
 80054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	690d      	ldr	r5, [r1, #16]
 80054f2:	4607      	mov	r7, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	461e      	mov	r6, r3
 80054f8:	f101 0c14 	add.w	ip, r1, #20
 80054fc:	2000      	movs	r0, #0
 80054fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005502:	b299      	uxth	r1, r3
 8005504:	fb02 6101 	mla	r1, r2, r1, r6
 8005508:	0c1e      	lsrs	r6, r3, #16
 800550a:	0c0b      	lsrs	r3, r1, #16
 800550c:	fb02 3306 	mla	r3, r2, r6, r3
 8005510:	b289      	uxth	r1, r1
 8005512:	3001      	adds	r0, #1
 8005514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005518:	4285      	cmp	r5, r0
 800551a:	f84c 1b04 	str.w	r1, [ip], #4
 800551e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005522:	dcec      	bgt.n	80054fe <__multadd+0x12>
 8005524:	b30e      	cbz	r6, 800556a <__multadd+0x7e>
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	42ab      	cmp	r3, r5
 800552a:	dc19      	bgt.n	8005560 <__multadd+0x74>
 800552c:	6861      	ldr	r1, [r4, #4]
 800552e:	4638      	mov	r0, r7
 8005530:	3101      	adds	r1, #1
 8005532:	f7ff ff79 	bl	8005428 <_Balloc>
 8005536:	4680      	mov	r8, r0
 8005538:	b928      	cbnz	r0, 8005546 <__multadd+0x5a>
 800553a:	4602      	mov	r2, r0
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <__multadd+0x84>)
 800553e:	480d      	ldr	r0, [pc, #52]	; (8005574 <__multadd+0x88>)
 8005540:	21b5      	movs	r1, #181	; 0xb5
 8005542:	f000 fd57 	bl	8005ff4 <__assert_func>
 8005546:	6922      	ldr	r2, [r4, #16]
 8005548:	3202      	adds	r2, #2
 800554a:	f104 010c 	add.w	r1, r4, #12
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	300c      	adds	r0, #12
 8005552:	f7ff ff5b 	bl	800540c <memcpy>
 8005556:	4621      	mov	r1, r4
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff ffa5 	bl	80054a8 <_Bfree>
 800555e:	4644      	mov	r4, r8
 8005560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005564:	3501      	adds	r5, #1
 8005566:	615e      	str	r6, [r3, #20]
 8005568:	6125      	str	r5, [r4, #16]
 800556a:	4620      	mov	r0, r4
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	08007983 	.word	0x08007983
 8005574:	08007994 	.word	0x08007994

08005578 <__hi0bits>:
 8005578:	0c03      	lsrs	r3, r0, #16
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	b9d3      	cbnz	r3, 80055b4 <__hi0bits+0x3c>
 800557e:	0400      	lsls	r0, r0, #16
 8005580:	2310      	movs	r3, #16
 8005582:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005586:	bf04      	itt	eq
 8005588:	0200      	lsleq	r0, r0, #8
 800558a:	3308      	addeq	r3, #8
 800558c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005590:	bf04      	itt	eq
 8005592:	0100      	lsleq	r0, r0, #4
 8005594:	3304      	addeq	r3, #4
 8005596:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800559a:	bf04      	itt	eq
 800559c:	0080      	lsleq	r0, r0, #2
 800559e:	3302      	addeq	r3, #2
 80055a0:	2800      	cmp	r0, #0
 80055a2:	db05      	blt.n	80055b0 <__hi0bits+0x38>
 80055a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055a8:	f103 0301 	add.w	r3, r3, #1
 80055ac:	bf08      	it	eq
 80055ae:	2320      	moveq	r3, #32
 80055b0:	4618      	mov	r0, r3
 80055b2:	4770      	bx	lr
 80055b4:	2300      	movs	r3, #0
 80055b6:	e7e4      	b.n	8005582 <__hi0bits+0xa>

080055b8 <__lo0bits>:
 80055b8:	6803      	ldr	r3, [r0, #0]
 80055ba:	f013 0207 	ands.w	r2, r3, #7
 80055be:	4601      	mov	r1, r0
 80055c0:	d00b      	beq.n	80055da <__lo0bits+0x22>
 80055c2:	07da      	lsls	r2, r3, #31
 80055c4:	d423      	bmi.n	800560e <__lo0bits+0x56>
 80055c6:	0798      	lsls	r0, r3, #30
 80055c8:	bf49      	itett	mi
 80055ca:	085b      	lsrmi	r3, r3, #1
 80055cc:	089b      	lsrpl	r3, r3, #2
 80055ce:	2001      	movmi	r0, #1
 80055d0:	600b      	strmi	r3, [r1, #0]
 80055d2:	bf5c      	itt	pl
 80055d4:	600b      	strpl	r3, [r1, #0]
 80055d6:	2002      	movpl	r0, #2
 80055d8:	4770      	bx	lr
 80055da:	b298      	uxth	r0, r3
 80055dc:	b9a8      	cbnz	r0, 800560a <__lo0bits+0x52>
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	2010      	movs	r0, #16
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	b90a      	cbnz	r2, 80055ea <__lo0bits+0x32>
 80055e6:	3008      	adds	r0, #8
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	071a      	lsls	r2, r3, #28
 80055ec:	bf04      	itt	eq
 80055ee:	091b      	lsreq	r3, r3, #4
 80055f0:	3004      	addeq	r0, #4
 80055f2:	079a      	lsls	r2, r3, #30
 80055f4:	bf04      	itt	eq
 80055f6:	089b      	lsreq	r3, r3, #2
 80055f8:	3002      	addeq	r0, #2
 80055fa:	07da      	lsls	r2, r3, #31
 80055fc:	d403      	bmi.n	8005606 <__lo0bits+0x4e>
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	f100 0001 	add.w	r0, r0, #1
 8005604:	d005      	beq.n	8005612 <__lo0bits+0x5a>
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	4770      	bx	lr
 800560a:	4610      	mov	r0, r2
 800560c:	e7e9      	b.n	80055e2 <__lo0bits+0x2a>
 800560e:	2000      	movs	r0, #0
 8005610:	4770      	bx	lr
 8005612:	2020      	movs	r0, #32
 8005614:	4770      	bx	lr
	...

08005618 <__i2b>:
 8005618:	b510      	push	{r4, lr}
 800561a:	460c      	mov	r4, r1
 800561c:	2101      	movs	r1, #1
 800561e:	f7ff ff03 	bl	8005428 <_Balloc>
 8005622:	4602      	mov	r2, r0
 8005624:	b928      	cbnz	r0, 8005632 <__i2b+0x1a>
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <__i2b+0x24>)
 8005628:	4805      	ldr	r0, [pc, #20]	; (8005640 <__i2b+0x28>)
 800562a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800562e:	f000 fce1 	bl	8005ff4 <__assert_func>
 8005632:	2301      	movs	r3, #1
 8005634:	6144      	str	r4, [r0, #20]
 8005636:	6103      	str	r3, [r0, #16]
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	08007983 	.word	0x08007983
 8005640:	08007994 	.word	0x08007994

08005644 <__multiply>:
 8005644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005648:	4691      	mov	r9, r2
 800564a:	690a      	ldr	r2, [r1, #16]
 800564c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	bfb8      	it	lt
 8005654:	460b      	movlt	r3, r1
 8005656:	460c      	mov	r4, r1
 8005658:	bfbc      	itt	lt
 800565a:	464c      	movlt	r4, r9
 800565c:	4699      	movlt	r9, r3
 800565e:	6927      	ldr	r7, [r4, #16]
 8005660:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	6861      	ldr	r1, [r4, #4]
 8005668:	eb07 060a 	add.w	r6, r7, sl
 800566c:	42b3      	cmp	r3, r6
 800566e:	b085      	sub	sp, #20
 8005670:	bfb8      	it	lt
 8005672:	3101      	addlt	r1, #1
 8005674:	f7ff fed8 	bl	8005428 <_Balloc>
 8005678:	b930      	cbnz	r0, 8005688 <__multiply+0x44>
 800567a:	4602      	mov	r2, r0
 800567c:	4b44      	ldr	r3, [pc, #272]	; (8005790 <__multiply+0x14c>)
 800567e:	4845      	ldr	r0, [pc, #276]	; (8005794 <__multiply+0x150>)
 8005680:	f240 115d 	movw	r1, #349	; 0x15d
 8005684:	f000 fcb6 	bl	8005ff4 <__assert_func>
 8005688:	f100 0514 	add.w	r5, r0, #20
 800568c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005690:	462b      	mov	r3, r5
 8005692:	2200      	movs	r2, #0
 8005694:	4543      	cmp	r3, r8
 8005696:	d321      	bcc.n	80056dc <__multiply+0x98>
 8005698:	f104 0314 	add.w	r3, r4, #20
 800569c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056a0:	f109 0314 	add.w	r3, r9, #20
 80056a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056a8:	9202      	str	r2, [sp, #8]
 80056aa:	1b3a      	subs	r2, r7, r4
 80056ac:	3a15      	subs	r2, #21
 80056ae:	f022 0203 	bic.w	r2, r2, #3
 80056b2:	3204      	adds	r2, #4
 80056b4:	f104 0115 	add.w	r1, r4, #21
 80056b8:	428f      	cmp	r7, r1
 80056ba:	bf38      	it	cc
 80056bc:	2204      	movcc	r2, #4
 80056be:	9201      	str	r2, [sp, #4]
 80056c0:	9a02      	ldr	r2, [sp, #8]
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d80c      	bhi.n	80056e2 <__multiply+0x9e>
 80056c8:	2e00      	cmp	r6, #0
 80056ca:	dd03      	ble.n	80056d4 <__multiply+0x90>
 80056cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05a      	beq.n	800578a <__multiply+0x146>
 80056d4:	6106      	str	r6, [r0, #16]
 80056d6:	b005      	add	sp, #20
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	f843 2b04 	str.w	r2, [r3], #4
 80056e0:	e7d8      	b.n	8005694 <__multiply+0x50>
 80056e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80056e6:	f1ba 0f00 	cmp.w	sl, #0
 80056ea:	d024      	beq.n	8005736 <__multiply+0xf2>
 80056ec:	f104 0e14 	add.w	lr, r4, #20
 80056f0:	46a9      	mov	r9, r5
 80056f2:	f04f 0c00 	mov.w	ip, #0
 80056f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80056fa:	f8d9 1000 	ldr.w	r1, [r9]
 80056fe:	fa1f fb82 	uxth.w	fp, r2
 8005702:	b289      	uxth	r1, r1
 8005704:	fb0a 110b 	mla	r1, sl, fp, r1
 8005708:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800570c:	f8d9 2000 	ldr.w	r2, [r9]
 8005710:	4461      	add	r1, ip
 8005712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005716:	fb0a c20b 	mla	r2, sl, fp, ip
 800571a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800571e:	b289      	uxth	r1, r1
 8005720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005724:	4577      	cmp	r7, lr
 8005726:	f849 1b04 	str.w	r1, [r9], #4
 800572a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800572e:	d8e2      	bhi.n	80056f6 <__multiply+0xb2>
 8005730:	9a01      	ldr	r2, [sp, #4]
 8005732:	f845 c002 	str.w	ip, [r5, r2]
 8005736:	9a03      	ldr	r2, [sp, #12]
 8005738:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800573c:	3304      	adds	r3, #4
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	d020      	beq.n	8005786 <__multiply+0x142>
 8005744:	6829      	ldr	r1, [r5, #0]
 8005746:	f104 0c14 	add.w	ip, r4, #20
 800574a:	46ae      	mov	lr, r5
 800574c:	f04f 0a00 	mov.w	sl, #0
 8005750:	f8bc b000 	ldrh.w	fp, [ip]
 8005754:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005758:	fb09 220b 	mla	r2, r9, fp, r2
 800575c:	4492      	add	sl, r2
 800575e:	b289      	uxth	r1, r1
 8005760:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005764:	f84e 1b04 	str.w	r1, [lr], #4
 8005768:	f85c 2b04 	ldr.w	r2, [ip], #4
 800576c:	f8be 1000 	ldrh.w	r1, [lr]
 8005770:	0c12      	lsrs	r2, r2, #16
 8005772:	fb09 1102 	mla	r1, r9, r2, r1
 8005776:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800577a:	4567      	cmp	r7, ip
 800577c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005780:	d8e6      	bhi.n	8005750 <__multiply+0x10c>
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	50a9      	str	r1, [r5, r2]
 8005786:	3504      	adds	r5, #4
 8005788:	e79a      	b.n	80056c0 <__multiply+0x7c>
 800578a:	3e01      	subs	r6, #1
 800578c:	e79c      	b.n	80056c8 <__multiply+0x84>
 800578e:	bf00      	nop
 8005790:	08007983 	.word	0x08007983
 8005794:	08007994 	.word	0x08007994

08005798 <__pow5mult>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4615      	mov	r5, r2
 800579e:	f012 0203 	ands.w	r2, r2, #3
 80057a2:	4606      	mov	r6, r0
 80057a4:	460f      	mov	r7, r1
 80057a6:	d007      	beq.n	80057b8 <__pow5mult+0x20>
 80057a8:	4c25      	ldr	r4, [pc, #148]	; (8005840 <__pow5mult+0xa8>)
 80057aa:	3a01      	subs	r2, #1
 80057ac:	2300      	movs	r3, #0
 80057ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057b2:	f7ff fe9b 	bl	80054ec <__multadd>
 80057b6:	4607      	mov	r7, r0
 80057b8:	10ad      	asrs	r5, r5, #2
 80057ba:	d03d      	beq.n	8005838 <__pow5mult+0xa0>
 80057bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057be:	b97c      	cbnz	r4, 80057e0 <__pow5mult+0x48>
 80057c0:	2010      	movs	r0, #16
 80057c2:	f7ff fe1b 	bl	80053fc <malloc>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6270      	str	r0, [r6, #36]	; 0x24
 80057ca:	b928      	cbnz	r0, 80057d8 <__pow5mult+0x40>
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <__pow5mult+0xac>)
 80057ce:	481e      	ldr	r0, [pc, #120]	; (8005848 <__pow5mult+0xb0>)
 80057d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80057d4:	f000 fc0e 	bl	8005ff4 <__assert_func>
 80057d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057dc:	6004      	str	r4, [r0, #0]
 80057de:	60c4      	str	r4, [r0, #12]
 80057e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057e8:	b94c      	cbnz	r4, 80057fe <__pow5mult+0x66>
 80057ea:	f240 2171 	movw	r1, #625	; 0x271
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7ff ff12 	bl	8005618 <__i2b>
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80057fa:	4604      	mov	r4, r0
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	f04f 0900 	mov.w	r9, #0
 8005802:	07eb      	lsls	r3, r5, #31
 8005804:	d50a      	bpl.n	800581c <__pow5mult+0x84>
 8005806:	4639      	mov	r1, r7
 8005808:	4622      	mov	r2, r4
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ff1a 	bl	8005644 <__multiply>
 8005810:	4639      	mov	r1, r7
 8005812:	4680      	mov	r8, r0
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff fe47 	bl	80054a8 <_Bfree>
 800581a:	4647      	mov	r7, r8
 800581c:	106d      	asrs	r5, r5, #1
 800581e:	d00b      	beq.n	8005838 <__pow5mult+0xa0>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	b938      	cbnz	r0, 8005834 <__pow5mult+0x9c>
 8005824:	4622      	mov	r2, r4
 8005826:	4621      	mov	r1, r4
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ff0b 	bl	8005644 <__multiply>
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f8c0 9000 	str.w	r9, [r0]
 8005834:	4604      	mov	r4, r0
 8005836:	e7e4      	b.n	8005802 <__pow5mult+0x6a>
 8005838:	4638      	mov	r0, r7
 800583a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800583e:	bf00      	nop
 8005840:	08007ae0 	.word	0x08007ae0
 8005844:	08007911 	.word	0x08007911
 8005848:	08007994 	.word	0x08007994

0800584c <__lshift>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	460c      	mov	r4, r1
 8005852:	6849      	ldr	r1, [r1, #4]
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	4607      	mov	r7, r0
 800585e:	4691      	mov	r9, r2
 8005860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005864:	f108 0601 	add.w	r6, r8, #1
 8005868:	42b3      	cmp	r3, r6
 800586a:	db0b      	blt.n	8005884 <__lshift+0x38>
 800586c:	4638      	mov	r0, r7
 800586e:	f7ff fddb 	bl	8005428 <_Balloc>
 8005872:	4605      	mov	r5, r0
 8005874:	b948      	cbnz	r0, 800588a <__lshift+0x3e>
 8005876:	4602      	mov	r2, r0
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <__lshift+0xd8>)
 800587a:	482b      	ldr	r0, [pc, #172]	; (8005928 <__lshift+0xdc>)
 800587c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005880:	f000 fbb8 	bl	8005ff4 <__assert_func>
 8005884:	3101      	adds	r1, #1
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	e7ee      	b.n	8005868 <__lshift+0x1c>
 800588a:	2300      	movs	r3, #0
 800588c:	f100 0114 	add.w	r1, r0, #20
 8005890:	f100 0210 	add.w	r2, r0, #16
 8005894:	4618      	mov	r0, r3
 8005896:	4553      	cmp	r3, sl
 8005898:	db37      	blt.n	800590a <__lshift+0xbe>
 800589a:	6920      	ldr	r0, [r4, #16]
 800589c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058a0:	f104 0314 	add.w	r3, r4, #20
 80058a4:	f019 091f 	ands.w	r9, r9, #31
 80058a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058b0:	d02f      	beq.n	8005912 <__lshift+0xc6>
 80058b2:	f1c9 0e20 	rsb	lr, r9, #32
 80058b6:	468a      	mov	sl, r1
 80058b8:	f04f 0c00 	mov.w	ip, #0
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	fa02 f209 	lsl.w	r2, r2, r9
 80058c2:	ea42 020c 	orr.w	r2, r2, ip
 80058c6:	f84a 2b04 	str.w	r2, [sl], #4
 80058ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ce:	4298      	cmp	r0, r3
 80058d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80058d4:	d8f2      	bhi.n	80058bc <__lshift+0x70>
 80058d6:	1b03      	subs	r3, r0, r4
 80058d8:	3b15      	subs	r3, #21
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	3304      	adds	r3, #4
 80058e0:	f104 0215 	add.w	r2, r4, #21
 80058e4:	4290      	cmp	r0, r2
 80058e6:	bf38      	it	cc
 80058e8:	2304      	movcc	r3, #4
 80058ea:	f841 c003 	str.w	ip, [r1, r3]
 80058ee:	f1bc 0f00 	cmp.w	ip, #0
 80058f2:	d001      	beq.n	80058f8 <__lshift+0xac>
 80058f4:	f108 0602 	add.w	r6, r8, #2
 80058f8:	3e01      	subs	r6, #1
 80058fa:	4638      	mov	r0, r7
 80058fc:	612e      	str	r6, [r5, #16]
 80058fe:	4621      	mov	r1, r4
 8005900:	f7ff fdd2 	bl	80054a8 <_Bfree>
 8005904:	4628      	mov	r0, r5
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	f842 0f04 	str.w	r0, [r2, #4]!
 800590e:	3301      	adds	r3, #1
 8005910:	e7c1      	b.n	8005896 <__lshift+0x4a>
 8005912:	3904      	subs	r1, #4
 8005914:	f853 2b04 	ldr.w	r2, [r3], #4
 8005918:	f841 2f04 	str.w	r2, [r1, #4]!
 800591c:	4298      	cmp	r0, r3
 800591e:	d8f9      	bhi.n	8005914 <__lshift+0xc8>
 8005920:	e7ea      	b.n	80058f8 <__lshift+0xac>
 8005922:	bf00      	nop
 8005924:	08007983 	.word	0x08007983
 8005928:	08007994 	.word	0x08007994

0800592c <__mcmp>:
 800592c:	b530      	push	{r4, r5, lr}
 800592e:	6902      	ldr	r2, [r0, #16]
 8005930:	690c      	ldr	r4, [r1, #16]
 8005932:	1b12      	subs	r2, r2, r4
 8005934:	d10e      	bne.n	8005954 <__mcmp+0x28>
 8005936:	f100 0314 	add.w	r3, r0, #20
 800593a:	3114      	adds	r1, #20
 800593c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005940:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005944:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005948:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800594c:	42a5      	cmp	r5, r4
 800594e:	d003      	beq.n	8005958 <__mcmp+0x2c>
 8005950:	d305      	bcc.n	800595e <__mcmp+0x32>
 8005952:	2201      	movs	r2, #1
 8005954:	4610      	mov	r0, r2
 8005956:	bd30      	pop	{r4, r5, pc}
 8005958:	4283      	cmp	r3, r0
 800595a:	d3f3      	bcc.n	8005944 <__mcmp+0x18>
 800595c:	e7fa      	b.n	8005954 <__mcmp+0x28>
 800595e:	f04f 32ff 	mov.w	r2, #4294967295
 8005962:	e7f7      	b.n	8005954 <__mcmp+0x28>

08005964 <__mdiff>:
 8005964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	460c      	mov	r4, r1
 800596a:	4606      	mov	r6, r0
 800596c:	4611      	mov	r1, r2
 800596e:	4620      	mov	r0, r4
 8005970:	4690      	mov	r8, r2
 8005972:	f7ff ffdb 	bl	800592c <__mcmp>
 8005976:	1e05      	subs	r5, r0, #0
 8005978:	d110      	bne.n	800599c <__mdiff+0x38>
 800597a:	4629      	mov	r1, r5
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff fd53 	bl	8005428 <_Balloc>
 8005982:	b930      	cbnz	r0, 8005992 <__mdiff+0x2e>
 8005984:	4b3a      	ldr	r3, [pc, #232]	; (8005a70 <__mdiff+0x10c>)
 8005986:	4602      	mov	r2, r0
 8005988:	f240 2132 	movw	r1, #562	; 0x232
 800598c:	4839      	ldr	r0, [pc, #228]	; (8005a74 <__mdiff+0x110>)
 800598e:	f000 fb31 	bl	8005ff4 <__assert_func>
 8005992:	2301      	movs	r3, #1
 8005994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	bfa4      	itt	ge
 800599e:	4643      	movge	r3, r8
 80059a0:	46a0      	movge	r8, r4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059a8:	bfa6      	itte	ge
 80059aa:	461c      	movge	r4, r3
 80059ac:	2500      	movge	r5, #0
 80059ae:	2501      	movlt	r5, #1
 80059b0:	f7ff fd3a 	bl	8005428 <_Balloc>
 80059b4:	b920      	cbnz	r0, 80059c0 <__mdiff+0x5c>
 80059b6:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <__mdiff+0x10c>)
 80059b8:	4602      	mov	r2, r0
 80059ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80059be:	e7e5      	b.n	800598c <__mdiff+0x28>
 80059c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059c4:	6926      	ldr	r6, [r4, #16]
 80059c6:	60c5      	str	r5, [r0, #12]
 80059c8:	f104 0914 	add.w	r9, r4, #20
 80059cc:	f108 0514 	add.w	r5, r8, #20
 80059d0:	f100 0e14 	add.w	lr, r0, #20
 80059d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80059d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80059dc:	f108 0210 	add.w	r2, r8, #16
 80059e0:	46f2      	mov	sl, lr
 80059e2:	2100      	movs	r1, #0
 80059e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80059e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80059ec:	fa1f f883 	uxth.w	r8, r3
 80059f0:	fa11 f18b 	uxtah	r1, r1, fp
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	eba1 0808 	sub.w	r8, r1, r8
 80059fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a02:	fa1f f888 	uxth.w	r8, r8
 8005a06:	1419      	asrs	r1, r3, #16
 8005a08:	454e      	cmp	r6, r9
 8005a0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a0e:	f84a 3b04 	str.w	r3, [sl], #4
 8005a12:	d8e7      	bhi.n	80059e4 <__mdiff+0x80>
 8005a14:	1b33      	subs	r3, r6, r4
 8005a16:	3b15      	subs	r3, #21
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	3415      	adds	r4, #21
 8005a20:	42a6      	cmp	r6, r4
 8005a22:	bf38      	it	cc
 8005a24:	2304      	movcc	r3, #4
 8005a26:	441d      	add	r5, r3
 8005a28:	4473      	add	r3, lr
 8005a2a:	469e      	mov	lr, r3
 8005a2c:	462e      	mov	r6, r5
 8005a2e:	4566      	cmp	r6, ip
 8005a30:	d30e      	bcc.n	8005a50 <__mdiff+0xec>
 8005a32:	f10c 0203 	add.w	r2, ip, #3
 8005a36:	1b52      	subs	r2, r2, r5
 8005a38:	f022 0203 	bic.w	r2, r2, #3
 8005a3c:	3d03      	subs	r5, #3
 8005a3e:	45ac      	cmp	ip, r5
 8005a40:	bf38      	it	cc
 8005a42:	2200      	movcc	r2, #0
 8005a44:	441a      	add	r2, r3
 8005a46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005a4a:	b17b      	cbz	r3, 8005a6c <__mdiff+0x108>
 8005a4c:	6107      	str	r7, [r0, #16]
 8005a4e:	e7a3      	b.n	8005998 <__mdiff+0x34>
 8005a50:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a54:	fa11 f288 	uxtah	r2, r1, r8
 8005a58:	1414      	asrs	r4, r2, #16
 8005a5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a5e:	b292      	uxth	r2, r2
 8005a60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005a64:	f84e 2b04 	str.w	r2, [lr], #4
 8005a68:	1421      	asrs	r1, r4, #16
 8005a6a:	e7e0      	b.n	8005a2e <__mdiff+0xca>
 8005a6c:	3f01      	subs	r7, #1
 8005a6e:	e7ea      	b.n	8005a46 <__mdiff+0xe2>
 8005a70:	08007983 	.word	0x08007983
 8005a74:	08007994 	.word	0x08007994

08005a78 <__d2b>:
 8005a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	4689      	mov	r9, r1
 8005a7e:	2101      	movs	r1, #1
 8005a80:	ec57 6b10 	vmov	r6, r7, d0
 8005a84:	4690      	mov	r8, r2
 8005a86:	f7ff fccf 	bl	8005428 <_Balloc>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	b930      	cbnz	r0, 8005a9c <__d2b+0x24>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <__d2b+0xb0>)
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <__d2b+0xb4>)
 8005a94:	f240 310a 	movw	r1, #778	; 0x30a
 8005a98:	f000 faac 	bl	8005ff4 <__assert_func>
 8005a9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005aa4:	bb35      	cbnz	r5, 8005af4 <__d2b+0x7c>
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	d028      	beq.n	8005afe <__d2b+0x86>
 8005aac:	4668      	mov	r0, sp
 8005aae:	9600      	str	r6, [sp, #0]
 8005ab0:	f7ff fd82 	bl	80055b8 <__lo0bits>
 8005ab4:	9900      	ldr	r1, [sp, #0]
 8005ab6:	b300      	cbz	r0, 8005afa <__d2b+0x82>
 8005ab8:	9a01      	ldr	r2, [sp, #4]
 8005aba:	f1c0 0320 	rsb	r3, r0, #32
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	40c2      	lsrs	r2, r0
 8005ac6:	6163      	str	r3, [r4, #20]
 8005ac8:	9201      	str	r2, [sp, #4]
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	61a3      	str	r3, [r4, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bf14      	ite	ne
 8005ad2:	2202      	movne	r2, #2
 8005ad4:	2201      	moveq	r2, #1
 8005ad6:	6122      	str	r2, [r4, #16]
 8005ad8:	b1d5      	cbz	r5, 8005b10 <__d2b+0x98>
 8005ada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ade:	4405      	add	r5, r0
 8005ae0:	f8c9 5000 	str.w	r5, [r9]
 8005ae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ae8:	f8c8 0000 	str.w	r0, [r8]
 8005aec:	4620      	mov	r0, r4
 8005aee:	b003      	add	sp, #12
 8005af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af8:	e7d5      	b.n	8005aa6 <__d2b+0x2e>
 8005afa:	6161      	str	r1, [r4, #20]
 8005afc:	e7e5      	b.n	8005aca <__d2b+0x52>
 8005afe:	a801      	add	r0, sp, #4
 8005b00:	f7ff fd5a 	bl	80055b8 <__lo0bits>
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	6163      	str	r3, [r4, #20]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	6122      	str	r2, [r4, #16]
 8005b0c:	3020      	adds	r0, #32
 8005b0e:	e7e3      	b.n	8005ad8 <__d2b+0x60>
 8005b10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b18:	f8c9 0000 	str.w	r0, [r9]
 8005b1c:	6918      	ldr	r0, [r3, #16]
 8005b1e:	f7ff fd2b 	bl	8005578 <__hi0bits>
 8005b22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b26:	e7df      	b.n	8005ae8 <__d2b+0x70>
 8005b28:	08007983 	.word	0x08007983
 8005b2c:	08007994 	.word	0x08007994

08005b30 <_calloc_r>:
 8005b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b32:	fba1 2402 	umull	r2, r4, r1, r2
 8005b36:	b94c      	cbnz	r4, 8005b4c <_calloc_r+0x1c>
 8005b38:	4611      	mov	r1, r2
 8005b3a:	9201      	str	r2, [sp, #4]
 8005b3c:	f000 f87a 	bl	8005c34 <_malloc_r>
 8005b40:	9a01      	ldr	r2, [sp, #4]
 8005b42:	4605      	mov	r5, r0
 8005b44:	b930      	cbnz	r0, 8005b54 <_calloc_r+0x24>
 8005b46:	4628      	mov	r0, r5
 8005b48:	b003      	add	sp, #12
 8005b4a:	bd30      	pop	{r4, r5, pc}
 8005b4c:	220c      	movs	r2, #12
 8005b4e:	6002      	str	r2, [r0, #0]
 8005b50:	2500      	movs	r5, #0
 8005b52:	e7f8      	b.n	8005b46 <_calloc_r+0x16>
 8005b54:	4621      	mov	r1, r4
 8005b56:	f7fe f941 	bl	8003ddc <memset>
 8005b5a:	e7f4      	b.n	8005b46 <_calloc_r+0x16>

08005b5c <_free_r>:
 8005b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d044      	beq.n	8005bec <_free_r+0x90>
 8005b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b66:	9001      	str	r0, [sp, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b6e:	bfb8      	it	lt
 8005b70:	18e4      	addlt	r4, r4, r3
 8005b72:	f000 fa9b 	bl	80060ac <__malloc_lock>
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <_free_r+0x94>)
 8005b78:	9801      	ldr	r0, [sp, #4]
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	b933      	cbnz	r3, 8005b8c <_free_r+0x30>
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	6014      	str	r4, [r2, #0]
 8005b82:	b003      	add	sp, #12
 8005b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b88:	f000 ba96 	b.w	80060b8 <__malloc_unlock>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d908      	bls.n	8005ba2 <_free_r+0x46>
 8005b90:	6825      	ldr	r5, [r4, #0]
 8005b92:	1961      	adds	r1, r4, r5
 8005b94:	428b      	cmp	r3, r1
 8005b96:	bf01      	itttt	eq
 8005b98:	6819      	ldreq	r1, [r3, #0]
 8005b9a:	685b      	ldreq	r3, [r3, #4]
 8005b9c:	1949      	addeq	r1, r1, r5
 8005b9e:	6021      	streq	r1, [r4, #0]
 8005ba0:	e7ed      	b.n	8005b7e <_free_r+0x22>
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b10b      	cbz	r3, 8005bac <_free_r+0x50>
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d9fa      	bls.n	8005ba2 <_free_r+0x46>
 8005bac:	6811      	ldr	r1, [r2, #0]
 8005bae:	1855      	adds	r5, r2, r1
 8005bb0:	42a5      	cmp	r5, r4
 8005bb2:	d10b      	bne.n	8005bcc <_free_r+0x70>
 8005bb4:	6824      	ldr	r4, [r4, #0]
 8005bb6:	4421      	add	r1, r4
 8005bb8:	1854      	adds	r4, r2, r1
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	6011      	str	r1, [r2, #0]
 8005bbe:	d1e0      	bne.n	8005b82 <_free_r+0x26>
 8005bc0:	681c      	ldr	r4, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	6053      	str	r3, [r2, #4]
 8005bc6:	4421      	add	r1, r4
 8005bc8:	6011      	str	r1, [r2, #0]
 8005bca:	e7da      	b.n	8005b82 <_free_r+0x26>
 8005bcc:	d902      	bls.n	8005bd4 <_free_r+0x78>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	6003      	str	r3, [r0, #0]
 8005bd2:	e7d6      	b.n	8005b82 <_free_r+0x26>
 8005bd4:	6825      	ldr	r5, [r4, #0]
 8005bd6:	1961      	adds	r1, r4, r5
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	bf04      	itt	eq
 8005bdc:	6819      	ldreq	r1, [r3, #0]
 8005bde:	685b      	ldreq	r3, [r3, #4]
 8005be0:	6063      	str	r3, [r4, #4]
 8005be2:	bf04      	itt	eq
 8005be4:	1949      	addeq	r1, r1, r5
 8005be6:	6021      	streq	r1, [r4, #0]
 8005be8:	6054      	str	r4, [r2, #4]
 8005bea:	e7ca      	b.n	8005b82 <_free_r+0x26>
 8005bec:	b003      	add	sp, #12
 8005bee:	bd30      	pop	{r4, r5, pc}
 8005bf0:	200002b8 	.word	0x200002b8

08005bf4 <sbrk_aligned>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4e0e      	ldr	r6, [pc, #56]	; (8005c30 <sbrk_aligned+0x3c>)
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	6831      	ldr	r1, [r6, #0]
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	b911      	cbnz	r1, 8005c06 <sbrk_aligned+0x12>
 8005c00:	f000 f9e8 	bl	8005fd4 <_sbrk_r>
 8005c04:	6030      	str	r0, [r6, #0]
 8005c06:	4621      	mov	r1, r4
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 f9e3 	bl	8005fd4 <_sbrk_r>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	d00a      	beq.n	8005c28 <sbrk_aligned+0x34>
 8005c12:	1cc4      	adds	r4, r0, #3
 8005c14:	f024 0403 	bic.w	r4, r4, #3
 8005c18:	42a0      	cmp	r0, r4
 8005c1a:	d007      	beq.n	8005c2c <sbrk_aligned+0x38>
 8005c1c:	1a21      	subs	r1, r4, r0
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f9d8 	bl	8005fd4 <_sbrk_r>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d101      	bne.n	8005c2c <sbrk_aligned+0x38>
 8005c28:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	200002bc 	.word	0x200002bc

08005c34 <_malloc_r>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	1ccd      	adds	r5, r1, #3
 8005c3a:	f025 0503 	bic.w	r5, r5, #3
 8005c3e:	3508      	adds	r5, #8
 8005c40:	2d0c      	cmp	r5, #12
 8005c42:	bf38      	it	cc
 8005c44:	250c      	movcc	r5, #12
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	4607      	mov	r7, r0
 8005c4a:	db01      	blt.n	8005c50 <_malloc_r+0x1c>
 8005c4c:	42a9      	cmp	r1, r5
 8005c4e:	d905      	bls.n	8005c5c <_malloc_r+0x28>
 8005c50:	230c      	movs	r3, #12
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	2600      	movs	r6, #0
 8005c56:	4630      	mov	r0, r6
 8005c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c5c:	4e2e      	ldr	r6, [pc, #184]	; (8005d18 <_malloc_r+0xe4>)
 8005c5e:	f000 fa25 	bl	80060ac <__malloc_lock>
 8005c62:	6833      	ldr	r3, [r6, #0]
 8005c64:	461c      	mov	r4, r3
 8005c66:	bb34      	cbnz	r4, 8005cb6 <_malloc_r+0x82>
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f7ff ffc2 	bl	8005bf4 <sbrk_aligned>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	4604      	mov	r4, r0
 8005c74:	d14d      	bne.n	8005d12 <_malloc_r+0xde>
 8005c76:	6834      	ldr	r4, [r6, #0]
 8005c78:	4626      	mov	r6, r4
 8005c7a:	2e00      	cmp	r6, #0
 8005c7c:	d140      	bne.n	8005d00 <_malloc_r+0xcc>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	4631      	mov	r1, r6
 8005c82:	4638      	mov	r0, r7
 8005c84:	eb04 0803 	add.w	r8, r4, r3
 8005c88:	f000 f9a4 	bl	8005fd4 <_sbrk_r>
 8005c8c:	4580      	cmp	r8, r0
 8005c8e:	d13a      	bne.n	8005d06 <_malloc_r+0xd2>
 8005c90:	6821      	ldr	r1, [r4, #0]
 8005c92:	3503      	adds	r5, #3
 8005c94:	1a6d      	subs	r5, r5, r1
 8005c96:	f025 0503 	bic.w	r5, r5, #3
 8005c9a:	3508      	adds	r5, #8
 8005c9c:	2d0c      	cmp	r5, #12
 8005c9e:	bf38      	it	cc
 8005ca0:	250c      	movcc	r5, #12
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f7ff ffa5 	bl	8005bf4 <sbrk_aligned>
 8005caa:	3001      	adds	r0, #1
 8005cac:	d02b      	beq.n	8005d06 <_malloc_r+0xd2>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	442b      	add	r3, r5
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	e00e      	b.n	8005cd4 <_malloc_r+0xa0>
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	1b52      	subs	r2, r2, r5
 8005cba:	d41e      	bmi.n	8005cfa <_malloc_r+0xc6>
 8005cbc:	2a0b      	cmp	r2, #11
 8005cbe:	d916      	bls.n	8005cee <_malloc_r+0xba>
 8005cc0:	1961      	adds	r1, r4, r5
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	6025      	str	r5, [r4, #0]
 8005cc6:	bf18      	it	ne
 8005cc8:	6059      	strne	r1, [r3, #4]
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	bf08      	it	eq
 8005cce:	6031      	streq	r1, [r6, #0]
 8005cd0:	5162      	str	r2, [r4, r5]
 8005cd2:	604b      	str	r3, [r1, #4]
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f104 060b 	add.w	r6, r4, #11
 8005cda:	f000 f9ed 	bl	80060b8 <__malloc_unlock>
 8005cde:	f026 0607 	bic.w	r6, r6, #7
 8005ce2:	1d23      	adds	r3, r4, #4
 8005ce4:	1af2      	subs	r2, r6, r3
 8005ce6:	d0b6      	beq.n	8005c56 <_malloc_r+0x22>
 8005ce8:	1b9b      	subs	r3, r3, r6
 8005cea:	50a3      	str	r3, [r4, r2]
 8005cec:	e7b3      	b.n	8005c56 <_malloc_r+0x22>
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	bf0c      	ite	eq
 8005cf4:	6032      	streq	r2, [r6, #0]
 8005cf6:	605a      	strne	r2, [r3, #4]
 8005cf8:	e7ec      	b.n	8005cd4 <_malloc_r+0xa0>
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	6864      	ldr	r4, [r4, #4]
 8005cfe:	e7b2      	b.n	8005c66 <_malloc_r+0x32>
 8005d00:	4634      	mov	r4, r6
 8005d02:	6876      	ldr	r6, [r6, #4]
 8005d04:	e7b9      	b.n	8005c7a <_malloc_r+0x46>
 8005d06:	230c      	movs	r3, #12
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f000 f9d4 	bl	80060b8 <__malloc_unlock>
 8005d10:	e7a1      	b.n	8005c56 <_malloc_r+0x22>
 8005d12:	6025      	str	r5, [r4, #0]
 8005d14:	e7de      	b.n	8005cd4 <_malloc_r+0xa0>
 8005d16:	bf00      	nop
 8005d18:	200002b8 	.word	0x200002b8

08005d1c <__ssputs_r>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	688e      	ldr	r6, [r1, #8]
 8005d22:	429e      	cmp	r6, r3
 8005d24:	4682      	mov	sl, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	4690      	mov	r8, r2
 8005d2a:	461f      	mov	r7, r3
 8005d2c:	d838      	bhi.n	8005da0 <__ssputs_r+0x84>
 8005d2e:	898a      	ldrh	r2, [r1, #12]
 8005d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d34:	d032      	beq.n	8005d9c <__ssputs_r+0x80>
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	6909      	ldr	r1, [r1, #16]
 8005d3a:	eba5 0901 	sub.w	r9, r5, r1
 8005d3e:	6965      	ldr	r5, [r4, #20]
 8005d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d48:	3301      	adds	r3, #1
 8005d4a:	444b      	add	r3, r9
 8005d4c:	106d      	asrs	r5, r5, #1
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	bf38      	it	cc
 8005d52:	461d      	movcc	r5, r3
 8005d54:	0553      	lsls	r3, r2, #21
 8005d56:	d531      	bpl.n	8005dbc <__ssputs_r+0xa0>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7ff ff6b 	bl	8005c34 <_malloc_r>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	b950      	cbnz	r0, 8005d78 <__ssputs_r+0x5c>
 8005d62:	230c      	movs	r3, #12
 8005d64:	f8ca 3000 	str.w	r3, [sl]
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d78:	6921      	ldr	r1, [r4, #16]
 8005d7a:	464a      	mov	r2, r9
 8005d7c:	f7ff fb46 	bl	800540c <memcpy>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	6126      	str	r6, [r4, #16]
 8005d8e:	6165      	str	r5, [r4, #20]
 8005d90:	444e      	add	r6, r9
 8005d92:	eba5 0509 	sub.w	r5, r5, r9
 8005d96:	6026      	str	r6, [r4, #0]
 8005d98:	60a5      	str	r5, [r4, #8]
 8005d9a:	463e      	mov	r6, r7
 8005d9c:	42be      	cmp	r6, r7
 8005d9e:	d900      	bls.n	8005da2 <__ssputs_r+0x86>
 8005da0:	463e      	mov	r6, r7
 8005da2:	6820      	ldr	r0, [r4, #0]
 8005da4:	4632      	mov	r2, r6
 8005da6:	4641      	mov	r1, r8
 8005da8:	f000 f966 	bl	8006078 <memmove>
 8005dac:	68a3      	ldr	r3, [r4, #8]
 8005dae:	1b9b      	subs	r3, r3, r6
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4433      	add	r3, r6
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	2000      	movs	r0, #0
 8005dba:	e7db      	b.n	8005d74 <__ssputs_r+0x58>
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	f000 f981 	bl	80060c4 <_realloc_r>
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1e1      	bne.n	8005d8c <__ssputs_r+0x70>
 8005dc8:	6921      	ldr	r1, [r4, #16]
 8005dca:	4650      	mov	r0, sl
 8005dcc:	f7ff fec6 	bl	8005b5c <_free_r>
 8005dd0:	e7c7      	b.n	8005d62 <__ssputs_r+0x46>
	...

08005dd4 <_svfiprintf_r>:
 8005dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	4698      	mov	r8, r3
 8005dda:	898b      	ldrh	r3, [r1, #12]
 8005ddc:	061b      	lsls	r3, r3, #24
 8005dde:	b09d      	sub	sp, #116	; 0x74
 8005de0:	4607      	mov	r7, r0
 8005de2:	460d      	mov	r5, r1
 8005de4:	4614      	mov	r4, r2
 8005de6:	d50e      	bpl.n	8005e06 <_svfiprintf_r+0x32>
 8005de8:	690b      	ldr	r3, [r1, #16]
 8005dea:	b963      	cbnz	r3, 8005e06 <_svfiprintf_r+0x32>
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	f7ff ff21 	bl	8005c34 <_malloc_r>
 8005df2:	6028      	str	r0, [r5, #0]
 8005df4:	6128      	str	r0, [r5, #16]
 8005df6:	b920      	cbnz	r0, 8005e02 <_svfiprintf_r+0x2e>
 8005df8:	230c      	movs	r3, #12
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	e0d1      	b.n	8005fa6 <_svfiprintf_r+0x1d2>
 8005e02:	2340      	movs	r3, #64	; 0x40
 8005e04:	616b      	str	r3, [r5, #20]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e14:	2330      	movs	r3, #48	; 0x30
 8005e16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fc0 <_svfiprintf_r+0x1ec>
 8005e1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e1e:	f04f 0901 	mov.w	r9, #1
 8005e22:	4623      	mov	r3, r4
 8005e24:	469a      	mov	sl, r3
 8005e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e2a:	b10a      	cbz	r2, 8005e30 <_svfiprintf_r+0x5c>
 8005e2c:	2a25      	cmp	r2, #37	; 0x25
 8005e2e:	d1f9      	bne.n	8005e24 <_svfiprintf_r+0x50>
 8005e30:	ebba 0b04 	subs.w	fp, sl, r4
 8005e34:	d00b      	beq.n	8005e4e <_svfiprintf_r+0x7a>
 8005e36:	465b      	mov	r3, fp
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f7ff ff6d 	bl	8005d1c <__ssputs_r>
 8005e42:	3001      	adds	r0, #1
 8005e44:	f000 80aa 	beq.w	8005f9c <_svfiprintf_r+0x1c8>
 8005e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e4a:	445a      	add	r2, fp
 8005e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80a2 	beq.w	8005f9c <_svfiprintf_r+0x1c8>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e62:	f10a 0a01 	add.w	sl, sl, #1
 8005e66:	9304      	str	r3, [sp, #16]
 8005e68:	9307      	str	r3, [sp, #28]
 8005e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e70:	4654      	mov	r4, sl
 8005e72:	2205      	movs	r2, #5
 8005e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e78:	4851      	ldr	r0, [pc, #324]	; (8005fc0 <_svfiprintf_r+0x1ec>)
 8005e7a:	f7fa f9d9 	bl	8000230 <memchr>
 8005e7e:	9a04      	ldr	r2, [sp, #16]
 8005e80:	b9d8      	cbnz	r0, 8005eba <_svfiprintf_r+0xe6>
 8005e82:	06d0      	lsls	r0, r2, #27
 8005e84:	bf44      	itt	mi
 8005e86:	2320      	movmi	r3, #32
 8005e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e8c:	0711      	lsls	r1, r2, #28
 8005e8e:	bf44      	itt	mi
 8005e90:	232b      	movmi	r3, #43	; 0x2b
 8005e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e96:	f89a 3000 	ldrb.w	r3, [sl]
 8005e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9c:	d015      	beq.n	8005eca <_svfiprintf_r+0xf6>
 8005e9e:	9a07      	ldr	r2, [sp, #28]
 8005ea0:	4654      	mov	r4, sl
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f04f 0c0a 	mov.w	ip, #10
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eae:	3b30      	subs	r3, #48	; 0x30
 8005eb0:	2b09      	cmp	r3, #9
 8005eb2:	d94e      	bls.n	8005f52 <_svfiprintf_r+0x17e>
 8005eb4:	b1b0      	cbz	r0, 8005ee4 <_svfiprintf_r+0x110>
 8005eb6:	9207      	str	r2, [sp, #28]
 8005eb8:	e014      	b.n	8005ee4 <_svfiprintf_r+0x110>
 8005eba:	eba0 0308 	sub.w	r3, r0, r8
 8005ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	9304      	str	r3, [sp, #16]
 8005ec6:	46a2      	mov	sl, r4
 8005ec8:	e7d2      	b.n	8005e70 <_svfiprintf_r+0x9c>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	1d19      	adds	r1, r3, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	9103      	str	r1, [sp, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfbb      	ittet	lt
 8005ed6:	425b      	neglt	r3, r3
 8005ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8005edc:	9307      	strge	r3, [sp, #28]
 8005ede:	9307      	strlt	r3, [sp, #28]
 8005ee0:	bfb8      	it	lt
 8005ee2:	9204      	strlt	r2, [sp, #16]
 8005ee4:	7823      	ldrb	r3, [r4, #0]
 8005ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ee8:	d10c      	bne.n	8005f04 <_svfiprintf_r+0x130>
 8005eea:	7863      	ldrb	r3, [r4, #1]
 8005eec:	2b2a      	cmp	r3, #42	; 0x2a
 8005eee:	d135      	bne.n	8005f5c <_svfiprintf_r+0x188>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	1d1a      	adds	r2, r3, #4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	9203      	str	r2, [sp, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfb8      	it	lt
 8005efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f00:	3402      	adds	r4, #2
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005fd0 <_svfiprintf_r+0x1fc>
 8005f08:	7821      	ldrb	r1, [r4, #0]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	f7fa f98f 	bl	8000230 <memchr>
 8005f12:	b140      	cbz	r0, 8005f26 <_svfiprintf_r+0x152>
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	eba0 000a 	sub.w	r0, r0, sl
 8005f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f1e:	9b04      	ldr	r3, [sp, #16]
 8005f20:	4303      	orrs	r3, r0
 8005f22:	3401      	adds	r4, #1
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2a:	4826      	ldr	r0, [pc, #152]	; (8005fc4 <_svfiprintf_r+0x1f0>)
 8005f2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f30:	2206      	movs	r2, #6
 8005f32:	f7fa f97d 	bl	8000230 <memchr>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d038      	beq.n	8005fac <_svfiprintf_r+0x1d8>
 8005f3a:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <_svfiprintf_r+0x1f4>)
 8005f3c:	bb1b      	cbnz	r3, 8005f86 <_svfiprintf_r+0x1b2>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	3307      	adds	r3, #7
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	3308      	adds	r3, #8
 8005f48:	9303      	str	r3, [sp, #12]
 8005f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4c:	4433      	add	r3, r6
 8005f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f50:	e767      	b.n	8005e22 <_svfiprintf_r+0x4e>
 8005f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f56:	460c      	mov	r4, r1
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e7a5      	b.n	8005ea8 <_svfiprintf_r+0xd4>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	3401      	adds	r4, #1
 8005f60:	9305      	str	r3, [sp, #20]
 8005f62:	4619      	mov	r1, r3
 8005f64:	f04f 0c0a 	mov.w	ip, #10
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f6e:	3a30      	subs	r2, #48	; 0x30
 8005f70:	2a09      	cmp	r2, #9
 8005f72:	d903      	bls.n	8005f7c <_svfiprintf_r+0x1a8>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0c5      	beq.n	8005f04 <_svfiprintf_r+0x130>
 8005f78:	9105      	str	r1, [sp, #20]
 8005f7a:	e7c3      	b.n	8005f04 <_svfiprintf_r+0x130>
 8005f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f80:	4604      	mov	r4, r0
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7f0      	b.n	8005f68 <_svfiprintf_r+0x194>
 8005f86:	ab03      	add	r3, sp, #12
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <_svfiprintf_r+0x1f8>)
 8005f8e:	a904      	add	r1, sp, #16
 8005f90:	4638      	mov	r0, r7
 8005f92:	f7fd ffcb 	bl	8003f2c <_printf_float>
 8005f96:	1c42      	adds	r2, r0, #1
 8005f98:	4606      	mov	r6, r0
 8005f9a:	d1d6      	bne.n	8005f4a <_svfiprintf_r+0x176>
 8005f9c:	89ab      	ldrh	r3, [r5, #12]
 8005f9e:	065b      	lsls	r3, r3, #25
 8005fa0:	f53f af2c 	bmi.w	8005dfc <_svfiprintf_r+0x28>
 8005fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa6:	b01d      	add	sp, #116	; 0x74
 8005fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <_svfiprintf_r+0x1f8>)
 8005fb4:	a904      	add	r1, sp, #16
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7fe fa5c 	bl	8004474 <_printf_i>
 8005fbc:	e7eb      	b.n	8005f96 <_svfiprintf_r+0x1c2>
 8005fbe:	bf00      	nop
 8005fc0:	08007aec 	.word	0x08007aec
 8005fc4:	08007af6 	.word	0x08007af6
 8005fc8:	08003f2d 	.word	0x08003f2d
 8005fcc:	08005d1d 	.word	0x08005d1d
 8005fd0:	08007af2 	.word	0x08007af2

08005fd4 <_sbrk_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d06      	ldr	r5, [pc, #24]	; (8005ff0 <_sbrk_r+0x1c>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	f7fb fbec 	bl	80017bc <_sbrk>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_sbrk_r+0x1a>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_sbrk_r+0x1a>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	200002c0 	.word	0x200002c0

08005ff4 <__assert_func>:
 8005ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ff6:	4614      	mov	r4, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b09      	ldr	r3, [pc, #36]	; (8006020 <__assert_func+0x2c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4605      	mov	r5, r0
 8006000:	68d8      	ldr	r0, [r3, #12]
 8006002:	b14c      	cbz	r4, 8006018 <__assert_func+0x24>
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <__assert_func+0x30>)
 8006006:	9100      	str	r1, [sp, #0]
 8006008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800600c:	4906      	ldr	r1, [pc, #24]	; (8006028 <__assert_func+0x34>)
 800600e:	462b      	mov	r3, r5
 8006010:	f000 f80e 	bl	8006030 <fiprintf>
 8006014:	f000 faac 	bl	8006570 <abort>
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <__assert_func+0x38>)
 800601a:	461c      	mov	r4, r3
 800601c:	e7f3      	b.n	8006006 <__assert_func+0x12>
 800601e:	bf00      	nop
 8006020:	2000000c 	.word	0x2000000c
 8006024:	08007afd 	.word	0x08007afd
 8006028:	08007b0a 	.word	0x08007b0a
 800602c:	08007b38 	.word	0x08007b38

08006030 <fiprintf>:
 8006030:	b40e      	push	{r1, r2, r3}
 8006032:	b503      	push	{r0, r1, lr}
 8006034:	4601      	mov	r1, r0
 8006036:	ab03      	add	r3, sp, #12
 8006038:	4805      	ldr	r0, [pc, #20]	; (8006050 <fiprintf+0x20>)
 800603a:	f853 2b04 	ldr.w	r2, [r3], #4
 800603e:	6800      	ldr	r0, [r0, #0]
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	f000 f897 	bl	8006174 <_vfiprintf_r>
 8006046:	b002      	add	sp, #8
 8006048:	f85d eb04 	ldr.w	lr, [sp], #4
 800604c:	b003      	add	sp, #12
 800604e:	4770      	bx	lr
 8006050:	2000000c 	.word	0x2000000c

08006054 <__ascii_mbtowc>:
 8006054:	b082      	sub	sp, #8
 8006056:	b901      	cbnz	r1, 800605a <__ascii_mbtowc+0x6>
 8006058:	a901      	add	r1, sp, #4
 800605a:	b142      	cbz	r2, 800606e <__ascii_mbtowc+0x1a>
 800605c:	b14b      	cbz	r3, 8006072 <__ascii_mbtowc+0x1e>
 800605e:	7813      	ldrb	r3, [r2, #0]
 8006060:	600b      	str	r3, [r1, #0]
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	1e10      	subs	r0, r2, #0
 8006066:	bf18      	it	ne
 8006068:	2001      	movne	r0, #1
 800606a:	b002      	add	sp, #8
 800606c:	4770      	bx	lr
 800606e:	4610      	mov	r0, r2
 8006070:	e7fb      	b.n	800606a <__ascii_mbtowc+0x16>
 8006072:	f06f 0001 	mvn.w	r0, #1
 8006076:	e7f8      	b.n	800606a <__ascii_mbtowc+0x16>

08006078 <memmove>:
 8006078:	4288      	cmp	r0, r1
 800607a:	b510      	push	{r4, lr}
 800607c:	eb01 0402 	add.w	r4, r1, r2
 8006080:	d902      	bls.n	8006088 <memmove+0x10>
 8006082:	4284      	cmp	r4, r0
 8006084:	4623      	mov	r3, r4
 8006086:	d807      	bhi.n	8006098 <memmove+0x20>
 8006088:	1e43      	subs	r3, r0, #1
 800608a:	42a1      	cmp	r1, r4
 800608c:	d008      	beq.n	80060a0 <memmove+0x28>
 800608e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006096:	e7f8      	b.n	800608a <memmove+0x12>
 8006098:	4402      	add	r2, r0
 800609a:	4601      	mov	r1, r0
 800609c:	428a      	cmp	r2, r1
 800609e:	d100      	bne.n	80060a2 <memmove+0x2a>
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060aa:	e7f7      	b.n	800609c <memmove+0x24>

080060ac <__malloc_lock>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__malloc_lock+0x8>)
 80060ae:	f000 bc1f 	b.w	80068f0 <__retarget_lock_acquire_recursive>
 80060b2:	bf00      	nop
 80060b4:	200002c4 	.word	0x200002c4

080060b8 <__malloc_unlock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_unlock+0x8>)
 80060ba:	f000 bc1a 	b.w	80068f2 <__retarget_lock_release_recursive>
 80060be:	bf00      	nop
 80060c0:	200002c4 	.word	0x200002c4

080060c4 <_realloc_r>:
 80060c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	4680      	mov	r8, r0
 80060ca:	4614      	mov	r4, r2
 80060cc:	460e      	mov	r6, r1
 80060ce:	b921      	cbnz	r1, 80060da <_realloc_r+0x16>
 80060d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	4611      	mov	r1, r2
 80060d6:	f7ff bdad 	b.w	8005c34 <_malloc_r>
 80060da:	b92a      	cbnz	r2, 80060e8 <_realloc_r+0x24>
 80060dc:	f7ff fd3e 	bl	8005b5c <_free_r>
 80060e0:	4625      	mov	r5, r4
 80060e2:	4628      	mov	r0, r5
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e8:	f000 fc6a 	bl	80069c0 <_malloc_usable_size_r>
 80060ec:	4284      	cmp	r4, r0
 80060ee:	4607      	mov	r7, r0
 80060f0:	d802      	bhi.n	80060f8 <_realloc_r+0x34>
 80060f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060f6:	d812      	bhi.n	800611e <_realloc_r+0x5a>
 80060f8:	4621      	mov	r1, r4
 80060fa:	4640      	mov	r0, r8
 80060fc:	f7ff fd9a 	bl	8005c34 <_malloc_r>
 8006100:	4605      	mov	r5, r0
 8006102:	2800      	cmp	r0, #0
 8006104:	d0ed      	beq.n	80060e2 <_realloc_r+0x1e>
 8006106:	42bc      	cmp	r4, r7
 8006108:	4622      	mov	r2, r4
 800610a:	4631      	mov	r1, r6
 800610c:	bf28      	it	cs
 800610e:	463a      	movcs	r2, r7
 8006110:	f7ff f97c 	bl	800540c <memcpy>
 8006114:	4631      	mov	r1, r6
 8006116:	4640      	mov	r0, r8
 8006118:	f7ff fd20 	bl	8005b5c <_free_r>
 800611c:	e7e1      	b.n	80060e2 <_realloc_r+0x1e>
 800611e:	4635      	mov	r5, r6
 8006120:	e7df      	b.n	80060e2 <_realloc_r+0x1e>

08006122 <__sfputc_r>:
 8006122:	6893      	ldr	r3, [r2, #8]
 8006124:	3b01      	subs	r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	b410      	push	{r4}
 800612a:	6093      	str	r3, [r2, #8]
 800612c:	da08      	bge.n	8006140 <__sfputc_r+0x1e>
 800612e:	6994      	ldr	r4, [r2, #24]
 8006130:	42a3      	cmp	r3, r4
 8006132:	db01      	blt.n	8006138 <__sfputc_r+0x16>
 8006134:	290a      	cmp	r1, #10
 8006136:	d103      	bne.n	8006140 <__sfputc_r+0x1e>
 8006138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613c:	f000 b94a 	b.w	80063d4 <__swbuf_r>
 8006140:	6813      	ldr	r3, [r2, #0]
 8006142:	1c58      	adds	r0, r3, #1
 8006144:	6010      	str	r0, [r2, #0]
 8006146:	7019      	strb	r1, [r3, #0]
 8006148:	4608      	mov	r0, r1
 800614a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800614e:	4770      	bx	lr

08006150 <__sfputs_r>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	4606      	mov	r6, r0
 8006154:	460f      	mov	r7, r1
 8006156:	4614      	mov	r4, r2
 8006158:	18d5      	adds	r5, r2, r3
 800615a:	42ac      	cmp	r4, r5
 800615c:	d101      	bne.n	8006162 <__sfputs_r+0x12>
 800615e:	2000      	movs	r0, #0
 8006160:	e007      	b.n	8006172 <__sfputs_r+0x22>
 8006162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006166:	463a      	mov	r2, r7
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff ffda 	bl	8006122 <__sfputc_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	d1f3      	bne.n	800615a <__sfputs_r+0xa>
 8006172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006174 <_vfiprintf_r>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	460d      	mov	r5, r1
 800617a:	b09d      	sub	sp, #116	; 0x74
 800617c:	4614      	mov	r4, r2
 800617e:	4698      	mov	r8, r3
 8006180:	4606      	mov	r6, r0
 8006182:	b118      	cbz	r0, 800618c <_vfiprintf_r+0x18>
 8006184:	6983      	ldr	r3, [r0, #24]
 8006186:	b90b      	cbnz	r3, 800618c <_vfiprintf_r+0x18>
 8006188:	f000 fb14 	bl	80067b4 <__sinit>
 800618c:	4b89      	ldr	r3, [pc, #548]	; (80063b4 <_vfiprintf_r+0x240>)
 800618e:	429d      	cmp	r5, r3
 8006190:	d11b      	bne.n	80061ca <_vfiprintf_r+0x56>
 8006192:	6875      	ldr	r5, [r6, #4]
 8006194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006196:	07d9      	lsls	r1, r3, #31
 8006198:	d405      	bmi.n	80061a6 <_vfiprintf_r+0x32>
 800619a:	89ab      	ldrh	r3, [r5, #12]
 800619c:	059a      	lsls	r2, r3, #22
 800619e:	d402      	bmi.n	80061a6 <_vfiprintf_r+0x32>
 80061a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061a2:	f000 fba5 	bl	80068f0 <__retarget_lock_acquire_recursive>
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	071b      	lsls	r3, r3, #28
 80061aa:	d501      	bpl.n	80061b0 <_vfiprintf_r+0x3c>
 80061ac:	692b      	ldr	r3, [r5, #16]
 80061ae:	b9eb      	cbnz	r3, 80061ec <_vfiprintf_r+0x78>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4630      	mov	r0, r6
 80061b4:	f000 f96e 	bl	8006494 <__swsetup_r>
 80061b8:	b1c0      	cbz	r0, 80061ec <_vfiprintf_r+0x78>
 80061ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061bc:	07dc      	lsls	r4, r3, #31
 80061be:	d50e      	bpl.n	80061de <_vfiprintf_r+0x6a>
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	b01d      	add	sp, #116	; 0x74
 80061c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ca:	4b7b      	ldr	r3, [pc, #492]	; (80063b8 <_vfiprintf_r+0x244>)
 80061cc:	429d      	cmp	r5, r3
 80061ce:	d101      	bne.n	80061d4 <_vfiprintf_r+0x60>
 80061d0:	68b5      	ldr	r5, [r6, #8]
 80061d2:	e7df      	b.n	8006194 <_vfiprintf_r+0x20>
 80061d4:	4b79      	ldr	r3, [pc, #484]	; (80063bc <_vfiprintf_r+0x248>)
 80061d6:	429d      	cmp	r5, r3
 80061d8:	bf08      	it	eq
 80061da:	68f5      	ldreq	r5, [r6, #12]
 80061dc:	e7da      	b.n	8006194 <_vfiprintf_r+0x20>
 80061de:	89ab      	ldrh	r3, [r5, #12]
 80061e0:	0598      	lsls	r0, r3, #22
 80061e2:	d4ed      	bmi.n	80061c0 <_vfiprintf_r+0x4c>
 80061e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061e6:	f000 fb84 	bl	80068f2 <__retarget_lock_release_recursive>
 80061ea:	e7e9      	b.n	80061c0 <_vfiprintf_r+0x4c>
 80061ec:	2300      	movs	r3, #0
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	2320      	movs	r3, #32
 80061f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061fa:	2330      	movs	r3, #48	; 0x30
 80061fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063c0 <_vfiprintf_r+0x24c>
 8006200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006204:	f04f 0901 	mov.w	r9, #1
 8006208:	4623      	mov	r3, r4
 800620a:	469a      	mov	sl, r3
 800620c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006210:	b10a      	cbz	r2, 8006216 <_vfiprintf_r+0xa2>
 8006212:	2a25      	cmp	r2, #37	; 0x25
 8006214:	d1f9      	bne.n	800620a <_vfiprintf_r+0x96>
 8006216:	ebba 0b04 	subs.w	fp, sl, r4
 800621a:	d00b      	beq.n	8006234 <_vfiprintf_r+0xc0>
 800621c:	465b      	mov	r3, fp
 800621e:	4622      	mov	r2, r4
 8006220:	4629      	mov	r1, r5
 8006222:	4630      	mov	r0, r6
 8006224:	f7ff ff94 	bl	8006150 <__sfputs_r>
 8006228:	3001      	adds	r0, #1
 800622a:	f000 80aa 	beq.w	8006382 <_vfiprintf_r+0x20e>
 800622e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006230:	445a      	add	r2, fp
 8006232:	9209      	str	r2, [sp, #36]	; 0x24
 8006234:	f89a 3000 	ldrb.w	r3, [sl]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80a2 	beq.w	8006382 <_vfiprintf_r+0x20e>
 800623e:	2300      	movs	r3, #0
 8006240:	f04f 32ff 	mov.w	r2, #4294967295
 8006244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006248:	f10a 0a01 	add.w	sl, sl, #1
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006254:	931a      	str	r3, [sp, #104]	; 0x68
 8006256:	4654      	mov	r4, sl
 8006258:	2205      	movs	r2, #5
 800625a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625e:	4858      	ldr	r0, [pc, #352]	; (80063c0 <_vfiprintf_r+0x24c>)
 8006260:	f7f9 ffe6 	bl	8000230 <memchr>
 8006264:	9a04      	ldr	r2, [sp, #16]
 8006266:	b9d8      	cbnz	r0, 80062a0 <_vfiprintf_r+0x12c>
 8006268:	06d1      	lsls	r1, r2, #27
 800626a:	bf44      	itt	mi
 800626c:	2320      	movmi	r3, #32
 800626e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006272:	0713      	lsls	r3, r2, #28
 8006274:	bf44      	itt	mi
 8006276:	232b      	movmi	r3, #43	; 0x2b
 8006278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800627c:	f89a 3000 	ldrb.w	r3, [sl]
 8006280:	2b2a      	cmp	r3, #42	; 0x2a
 8006282:	d015      	beq.n	80062b0 <_vfiprintf_r+0x13c>
 8006284:	9a07      	ldr	r2, [sp, #28]
 8006286:	4654      	mov	r4, sl
 8006288:	2000      	movs	r0, #0
 800628a:	f04f 0c0a 	mov.w	ip, #10
 800628e:	4621      	mov	r1, r4
 8006290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006294:	3b30      	subs	r3, #48	; 0x30
 8006296:	2b09      	cmp	r3, #9
 8006298:	d94e      	bls.n	8006338 <_vfiprintf_r+0x1c4>
 800629a:	b1b0      	cbz	r0, 80062ca <_vfiprintf_r+0x156>
 800629c:	9207      	str	r2, [sp, #28]
 800629e:	e014      	b.n	80062ca <_vfiprintf_r+0x156>
 80062a0:	eba0 0308 	sub.w	r3, r0, r8
 80062a4:	fa09 f303 	lsl.w	r3, r9, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	9304      	str	r3, [sp, #16]
 80062ac:	46a2      	mov	sl, r4
 80062ae:	e7d2      	b.n	8006256 <_vfiprintf_r+0xe2>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	1d19      	adds	r1, r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	9103      	str	r1, [sp, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bfbb      	ittet	lt
 80062bc:	425b      	neglt	r3, r3
 80062be:	f042 0202 	orrlt.w	r2, r2, #2
 80062c2:	9307      	strge	r3, [sp, #28]
 80062c4:	9307      	strlt	r3, [sp, #28]
 80062c6:	bfb8      	it	lt
 80062c8:	9204      	strlt	r2, [sp, #16]
 80062ca:	7823      	ldrb	r3, [r4, #0]
 80062cc:	2b2e      	cmp	r3, #46	; 0x2e
 80062ce:	d10c      	bne.n	80062ea <_vfiprintf_r+0x176>
 80062d0:	7863      	ldrb	r3, [r4, #1]
 80062d2:	2b2a      	cmp	r3, #42	; 0x2a
 80062d4:	d135      	bne.n	8006342 <_vfiprintf_r+0x1ce>
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	9203      	str	r2, [sp, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfb8      	it	lt
 80062e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80062e6:	3402      	adds	r4, #2
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063d0 <_vfiprintf_r+0x25c>
 80062ee:	7821      	ldrb	r1, [r4, #0]
 80062f0:	2203      	movs	r2, #3
 80062f2:	4650      	mov	r0, sl
 80062f4:	f7f9 ff9c 	bl	8000230 <memchr>
 80062f8:	b140      	cbz	r0, 800630c <_vfiprintf_r+0x198>
 80062fa:	2340      	movs	r3, #64	; 0x40
 80062fc:	eba0 000a 	sub.w	r0, r0, sl
 8006300:	fa03 f000 	lsl.w	r0, r3, r0
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	4303      	orrs	r3, r0
 8006308:	3401      	adds	r4, #1
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	482c      	ldr	r0, [pc, #176]	; (80063c4 <_vfiprintf_r+0x250>)
 8006312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006316:	2206      	movs	r2, #6
 8006318:	f7f9 ff8a 	bl	8000230 <memchr>
 800631c:	2800      	cmp	r0, #0
 800631e:	d03f      	beq.n	80063a0 <_vfiprintf_r+0x22c>
 8006320:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <_vfiprintf_r+0x254>)
 8006322:	bb1b      	cbnz	r3, 800636c <_vfiprintf_r+0x1f8>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	3307      	adds	r3, #7
 8006328:	f023 0307 	bic.w	r3, r3, #7
 800632c:	3308      	adds	r3, #8
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006332:	443b      	add	r3, r7
 8006334:	9309      	str	r3, [sp, #36]	; 0x24
 8006336:	e767      	b.n	8006208 <_vfiprintf_r+0x94>
 8006338:	fb0c 3202 	mla	r2, ip, r2, r3
 800633c:	460c      	mov	r4, r1
 800633e:	2001      	movs	r0, #1
 8006340:	e7a5      	b.n	800628e <_vfiprintf_r+0x11a>
 8006342:	2300      	movs	r3, #0
 8006344:	3401      	adds	r4, #1
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	4619      	mov	r1, r3
 800634a:	f04f 0c0a 	mov.w	ip, #10
 800634e:	4620      	mov	r0, r4
 8006350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006354:	3a30      	subs	r2, #48	; 0x30
 8006356:	2a09      	cmp	r2, #9
 8006358:	d903      	bls.n	8006362 <_vfiprintf_r+0x1ee>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0c5      	beq.n	80062ea <_vfiprintf_r+0x176>
 800635e:	9105      	str	r1, [sp, #20]
 8006360:	e7c3      	b.n	80062ea <_vfiprintf_r+0x176>
 8006362:	fb0c 2101 	mla	r1, ip, r1, r2
 8006366:	4604      	mov	r4, r0
 8006368:	2301      	movs	r3, #1
 800636a:	e7f0      	b.n	800634e <_vfiprintf_r+0x1da>
 800636c:	ab03      	add	r3, sp, #12
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	462a      	mov	r2, r5
 8006372:	4b16      	ldr	r3, [pc, #88]	; (80063cc <_vfiprintf_r+0x258>)
 8006374:	a904      	add	r1, sp, #16
 8006376:	4630      	mov	r0, r6
 8006378:	f7fd fdd8 	bl	8003f2c <_printf_float>
 800637c:	4607      	mov	r7, r0
 800637e:	1c78      	adds	r0, r7, #1
 8006380:	d1d6      	bne.n	8006330 <_vfiprintf_r+0x1bc>
 8006382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006384:	07d9      	lsls	r1, r3, #31
 8006386:	d405      	bmi.n	8006394 <_vfiprintf_r+0x220>
 8006388:	89ab      	ldrh	r3, [r5, #12]
 800638a:	059a      	lsls	r2, r3, #22
 800638c:	d402      	bmi.n	8006394 <_vfiprintf_r+0x220>
 800638e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006390:	f000 faaf 	bl	80068f2 <__retarget_lock_release_recursive>
 8006394:	89ab      	ldrh	r3, [r5, #12]
 8006396:	065b      	lsls	r3, r3, #25
 8006398:	f53f af12 	bmi.w	80061c0 <_vfiprintf_r+0x4c>
 800639c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800639e:	e711      	b.n	80061c4 <_vfiprintf_r+0x50>
 80063a0:	ab03      	add	r3, sp, #12
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	462a      	mov	r2, r5
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <_vfiprintf_r+0x258>)
 80063a8:	a904      	add	r1, sp, #16
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7fe f862 	bl	8004474 <_printf_i>
 80063b0:	e7e4      	b.n	800637c <_vfiprintf_r+0x208>
 80063b2:	bf00      	nop
 80063b4:	08007c64 	.word	0x08007c64
 80063b8:	08007c84 	.word	0x08007c84
 80063bc:	08007c44 	.word	0x08007c44
 80063c0:	08007aec 	.word	0x08007aec
 80063c4:	08007af6 	.word	0x08007af6
 80063c8:	08003f2d 	.word	0x08003f2d
 80063cc:	08006151 	.word	0x08006151
 80063d0:	08007af2 	.word	0x08007af2

080063d4 <__swbuf_r>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	460e      	mov	r6, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	4605      	mov	r5, r0
 80063dc:	b118      	cbz	r0, 80063e6 <__swbuf_r+0x12>
 80063de:	6983      	ldr	r3, [r0, #24]
 80063e0:	b90b      	cbnz	r3, 80063e6 <__swbuf_r+0x12>
 80063e2:	f000 f9e7 	bl	80067b4 <__sinit>
 80063e6:	4b21      	ldr	r3, [pc, #132]	; (800646c <__swbuf_r+0x98>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	d12b      	bne.n	8006444 <__swbuf_r+0x70>
 80063ec:	686c      	ldr	r4, [r5, #4]
 80063ee:	69a3      	ldr	r3, [r4, #24]
 80063f0:	60a3      	str	r3, [r4, #8]
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	071a      	lsls	r2, r3, #28
 80063f6:	d52f      	bpl.n	8006458 <__swbuf_r+0x84>
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	b36b      	cbz	r3, 8006458 <__swbuf_r+0x84>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	6820      	ldr	r0, [r4, #0]
 8006400:	1ac0      	subs	r0, r0, r3
 8006402:	6963      	ldr	r3, [r4, #20]
 8006404:	b2f6      	uxtb	r6, r6
 8006406:	4283      	cmp	r3, r0
 8006408:	4637      	mov	r7, r6
 800640a:	dc04      	bgt.n	8006416 <__swbuf_r+0x42>
 800640c:	4621      	mov	r1, r4
 800640e:	4628      	mov	r0, r5
 8006410:	f000 f93c 	bl	800668c <_fflush_r>
 8006414:	bb30      	cbnz	r0, 8006464 <__swbuf_r+0x90>
 8006416:	68a3      	ldr	r3, [r4, #8]
 8006418:	3b01      	subs	r3, #1
 800641a:	60a3      	str	r3, [r4, #8]
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	6022      	str	r2, [r4, #0]
 8006422:	701e      	strb	r6, [r3, #0]
 8006424:	6963      	ldr	r3, [r4, #20]
 8006426:	3001      	adds	r0, #1
 8006428:	4283      	cmp	r3, r0
 800642a:	d004      	beq.n	8006436 <__swbuf_r+0x62>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	07db      	lsls	r3, r3, #31
 8006430:	d506      	bpl.n	8006440 <__swbuf_r+0x6c>
 8006432:	2e0a      	cmp	r6, #10
 8006434:	d104      	bne.n	8006440 <__swbuf_r+0x6c>
 8006436:	4621      	mov	r1, r4
 8006438:	4628      	mov	r0, r5
 800643a:	f000 f927 	bl	800668c <_fflush_r>
 800643e:	b988      	cbnz	r0, 8006464 <__swbuf_r+0x90>
 8006440:	4638      	mov	r0, r7
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <__swbuf_r+0x9c>)
 8006446:	429c      	cmp	r4, r3
 8006448:	d101      	bne.n	800644e <__swbuf_r+0x7a>
 800644a:	68ac      	ldr	r4, [r5, #8]
 800644c:	e7cf      	b.n	80063ee <__swbuf_r+0x1a>
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <__swbuf_r+0xa0>)
 8006450:	429c      	cmp	r4, r3
 8006452:	bf08      	it	eq
 8006454:	68ec      	ldreq	r4, [r5, #12]
 8006456:	e7ca      	b.n	80063ee <__swbuf_r+0x1a>
 8006458:	4621      	mov	r1, r4
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f81a 	bl	8006494 <__swsetup_r>
 8006460:	2800      	cmp	r0, #0
 8006462:	d0cb      	beq.n	80063fc <__swbuf_r+0x28>
 8006464:	f04f 37ff 	mov.w	r7, #4294967295
 8006468:	e7ea      	b.n	8006440 <__swbuf_r+0x6c>
 800646a:	bf00      	nop
 800646c:	08007c64 	.word	0x08007c64
 8006470:	08007c84 	.word	0x08007c84
 8006474:	08007c44 	.word	0x08007c44

08006478 <__ascii_wctomb>:
 8006478:	b149      	cbz	r1, 800648e <__ascii_wctomb+0x16>
 800647a:	2aff      	cmp	r2, #255	; 0xff
 800647c:	bf85      	ittet	hi
 800647e:	238a      	movhi	r3, #138	; 0x8a
 8006480:	6003      	strhi	r3, [r0, #0]
 8006482:	700a      	strbls	r2, [r1, #0]
 8006484:	f04f 30ff 	movhi.w	r0, #4294967295
 8006488:	bf98      	it	ls
 800648a:	2001      	movls	r0, #1
 800648c:	4770      	bx	lr
 800648e:	4608      	mov	r0, r1
 8006490:	4770      	bx	lr
	...

08006494 <__swsetup_r>:
 8006494:	4b32      	ldr	r3, [pc, #200]	; (8006560 <__swsetup_r+0xcc>)
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	4606      	mov	r6, r0
 800649c:	460c      	mov	r4, r1
 800649e:	b125      	cbz	r5, 80064aa <__swsetup_r+0x16>
 80064a0:	69ab      	ldr	r3, [r5, #24]
 80064a2:	b913      	cbnz	r3, 80064aa <__swsetup_r+0x16>
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f985 	bl	80067b4 <__sinit>
 80064aa:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <__swsetup_r+0xd0>)
 80064ac:	429c      	cmp	r4, r3
 80064ae:	d10f      	bne.n	80064d0 <__swsetup_r+0x3c>
 80064b0:	686c      	ldr	r4, [r5, #4]
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064b8:	0719      	lsls	r1, r3, #28
 80064ba:	d42c      	bmi.n	8006516 <__swsetup_r+0x82>
 80064bc:	06dd      	lsls	r5, r3, #27
 80064be:	d411      	bmi.n	80064e4 <__swsetup_r+0x50>
 80064c0:	2309      	movs	r3, #9
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295
 80064ce:	e03e      	b.n	800654e <__swsetup_r+0xba>
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <__swsetup_r+0xd4>)
 80064d2:	429c      	cmp	r4, r3
 80064d4:	d101      	bne.n	80064da <__swsetup_r+0x46>
 80064d6:	68ac      	ldr	r4, [r5, #8]
 80064d8:	e7eb      	b.n	80064b2 <__swsetup_r+0x1e>
 80064da:	4b24      	ldr	r3, [pc, #144]	; (800656c <__swsetup_r+0xd8>)
 80064dc:	429c      	cmp	r4, r3
 80064de:	bf08      	it	eq
 80064e0:	68ec      	ldreq	r4, [r5, #12]
 80064e2:	e7e6      	b.n	80064b2 <__swsetup_r+0x1e>
 80064e4:	0758      	lsls	r0, r3, #29
 80064e6:	d512      	bpl.n	800650e <__swsetup_r+0x7a>
 80064e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ea:	b141      	cbz	r1, 80064fe <__swsetup_r+0x6a>
 80064ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064f0:	4299      	cmp	r1, r3
 80064f2:	d002      	beq.n	80064fa <__swsetup_r+0x66>
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff fb31 	bl	8005b5c <_free_r>
 80064fa:	2300      	movs	r3, #0
 80064fc:	6363      	str	r3, [r4, #52]	; 0x34
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	2300      	movs	r3, #0
 8006508:	6063      	str	r3, [r4, #4]
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f043 0308 	orr.w	r3, r3, #8
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	b94b      	cbnz	r3, 800652e <__swsetup_r+0x9a>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006524:	d003      	beq.n	800652e <__swsetup_r+0x9a>
 8006526:	4621      	mov	r1, r4
 8006528:	4630      	mov	r0, r6
 800652a:	f000 fa09 	bl	8006940 <__smakebuf_r>
 800652e:	89a0      	ldrh	r0, [r4, #12]
 8006530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006534:	f010 0301 	ands.w	r3, r0, #1
 8006538:	d00a      	beq.n	8006550 <__swsetup_r+0xbc>
 800653a:	2300      	movs	r3, #0
 800653c:	60a3      	str	r3, [r4, #8]
 800653e:	6963      	ldr	r3, [r4, #20]
 8006540:	425b      	negs	r3, r3
 8006542:	61a3      	str	r3, [r4, #24]
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	b943      	cbnz	r3, 800655a <__swsetup_r+0xc6>
 8006548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800654c:	d1ba      	bne.n	80064c4 <__swsetup_r+0x30>
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	0781      	lsls	r1, r0, #30
 8006552:	bf58      	it	pl
 8006554:	6963      	ldrpl	r3, [r4, #20]
 8006556:	60a3      	str	r3, [r4, #8]
 8006558:	e7f4      	b.n	8006544 <__swsetup_r+0xb0>
 800655a:	2000      	movs	r0, #0
 800655c:	e7f7      	b.n	800654e <__swsetup_r+0xba>
 800655e:	bf00      	nop
 8006560:	2000000c 	.word	0x2000000c
 8006564:	08007c64 	.word	0x08007c64
 8006568:	08007c84 	.word	0x08007c84
 800656c:	08007c44 	.word	0x08007c44

08006570 <abort>:
 8006570:	b508      	push	{r3, lr}
 8006572:	2006      	movs	r0, #6
 8006574:	f000 fa54 	bl	8006a20 <raise>
 8006578:	2001      	movs	r0, #1
 800657a:	f7fb f8a7 	bl	80016cc <_exit>
	...

08006580 <__sflush_r>:
 8006580:	898a      	ldrh	r2, [r1, #12]
 8006582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	4605      	mov	r5, r0
 8006588:	0710      	lsls	r0, r2, #28
 800658a:	460c      	mov	r4, r1
 800658c:	d458      	bmi.n	8006640 <__sflush_r+0xc0>
 800658e:	684b      	ldr	r3, [r1, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dc05      	bgt.n	80065a0 <__sflush_r+0x20>
 8006594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	dc02      	bgt.n	80065a0 <__sflush_r+0x20>
 800659a:	2000      	movs	r0, #0
 800659c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065a2:	2e00      	cmp	r6, #0
 80065a4:	d0f9      	beq.n	800659a <__sflush_r+0x1a>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065ac:	682f      	ldr	r7, [r5, #0]
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	d032      	beq.n	8006618 <__sflush_r+0x98>
 80065b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	075a      	lsls	r2, r3, #29
 80065b8:	d505      	bpl.n	80065c6 <__sflush_r+0x46>
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	1ac0      	subs	r0, r0, r3
 80065be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065c0:	b10b      	cbz	r3, 80065c6 <__sflush_r+0x46>
 80065c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065c4:	1ac0      	subs	r0, r0, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	4602      	mov	r2, r0
 80065ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065cc:	6a21      	ldr	r1, [r4, #32]
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b0      	blx	r6
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	d106      	bne.n	80065e6 <__sflush_r+0x66>
 80065d8:	6829      	ldr	r1, [r5, #0]
 80065da:	291d      	cmp	r1, #29
 80065dc:	d82c      	bhi.n	8006638 <__sflush_r+0xb8>
 80065de:	4a2a      	ldr	r2, [pc, #168]	; (8006688 <__sflush_r+0x108>)
 80065e0:	40ca      	lsrs	r2, r1
 80065e2:	07d6      	lsls	r6, r2, #31
 80065e4:	d528      	bpl.n	8006638 <__sflush_r+0xb8>
 80065e6:	2200      	movs	r2, #0
 80065e8:	6062      	str	r2, [r4, #4]
 80065ea:	04d9      	lsls	r1, r3, #19
 80065ec:	6922      	ldr	r2, [r4, #16]
 80065ee:	6022      	str	r2, [r4, #0]
 80065f0:	d504      	bpl.n	80065fc <__sflush_r+0x7c>
 80065f2:	1c42      	adds	r2, r0, #1
 80065f4:	d101      	bne.n	80065fa <__sflush_r+0x7a>
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	b903      	cbnz	r3, 80065fc <__sflush_r+0x7c>
 80065fa:	6560      	str	r0, [r4, #84]	; 0x54
 80065fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065fe:	602f      	str	r7, [r5, #0]
 8006600:	2900      	cmp	r1, #0
 8006602:	d0ca      	beq.n	800659a <__sflush_r+0x1a>
 8006604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006608:	4299      	cmp	r1, r3
 800660a:	d002      	beq.n	8006612 <__sflush_r+0x92>
 800660c:	4628      	mov	r0, r5
 800660e:	f7ff faa5 	bl	8005b5c <_free_r>
 8006612:	2000      	movs	r0, #0
 8006614:	6360      	str	r0, [r4, #52]	; 0x34
 8006616:	e7c1      	b.n	800659c <__sflush_r+0x1c>
 8006618:	6a21      	ldr	r1, [r4, #32]
 800661a:	2301      	movs	r3, #1
 800661c:	4628      	mov	r0, r5
 800661e:	47b0      	blx	r6
 8006620:	1c41      	adds	r1, r0, #1
 8006622:	d1c7      	bne.n	80065b4 <__sflush_r+0x34>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0c4      	beq.n	80065b4 <__sflush_r+0x34>
 800662a:	2b1d      	cmp	r3, #29
 800662c:	d001      	beq.n	8006632 <__sflush_r+0xb2>
 800662e:	2b16      	cmp	r3, #22
 8006630:	d101      	bne.n	8006636 <__sflush_r+0xb6>
 8006632:	602f      	str	r7, [r5, #0]
 8006634:	e7b1      	b.n	800659a <__sflush_r+0x1a>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	e7ad      	b.n	800659c <__sflush_r+0x1c>
 8006640:	690f      	ldr	r7, [r1, #16]
 8006642:	2f00      	cmp	r7, #0
 8006644:	d0a9      	beq.n	800659a <__sflush_r+0x1a>
 8006646:	0793      	lsls	r3, r2, #30
 8006648:	680e      	ldr	r6, [r1, #0]
 800664a:	bf08      	it	eq
 800664c:	694b      	ldreq	r3, [r1, #20]
 800664e:	600f      	str	r7, [r1, #0]
 8006650:	bf18      	it	ne
 8006652:	2300      	movne	r3, #0
 8006654:	eba6 0807 	sub.w	r8, r6, r7
 8006658:	608b      	str	r3, [r1, #8]
 800665a:	f1b8 0f00 	cmp.w	r8, #0
 800665e:	dd9c      	ble.n	800659a <__sflush_r+0x1a>
 8006660:	6a21      	ldr	r1, [r4, #32]
 8006662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006664:	4643      	mov	r3, r8
 8006666:	463a      	mov	r2, r7
 8006668:	4628      	mov	r0, r5
 800666a:	47b0      	blx	r6
 800666c:	2800      	cmp	r0, #0
 800666e:	dc06      	bgt.n	800667e <__sflush_r+0xfe>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e78e      	b.n	800659c <__sflush_r+0x1c>
 800667e:	4407      	add	r7, r0
 8006680:	eba8 0800 	sub.w	r8, r8, r0
 8006684:	e7e9      	b.n	800665a <__sflush_r+0xda>
 8006686:	bf00      	nop
 8006688:	20400001 	.word	0x20400001

0800668c <_fflush_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	4605      	mov	r5, r0
 8006692:	460c      	mov	r4, r1
 8006694:	b913      	cbnz	r3, 800669c <_fflush_r+0x10>
 8006696:	2500      	movs	r5, #0
 8006698:	4628      	mov	r0, r5
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	b118      	cbz	r0, 80066a6 <_fflush_r+0x1a>
 800669e:	6983      	ldr	r3, [r0, #24]
 80066a0:	b90b      	cbnz	r3, 80066a6 <_fflush_r+0x1a>
 80066a2:	f000 f887 	bl	80067b4 <__sinit>
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <_fflush_r+0x6c>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	d11b      	bne.n	80066e4 <_fflush_r+0x58>
 80066ac:	686c      	ldr	r4, [r5, #4]
 80066ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0ef      	beq.n	8006696 <_fflush_r+0xa>
 80066b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066b8:	07d0      	lsls	r0, r2, #31
 80066ba:	d404      	bmi.n	80066c6 <_fflush_r+0x3a>
 80066bc:	0599      	lsls	r1, r3, #22
 80066be:	d402      	bmi.n	80066c6 <_fflush_r+0x3a>
 80066c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066c2:	f000 f915 	bl	80068f0 <__retarget_lock_acquire_recursive>
 80066c6:	4628      	mov	r0, r5
 80066c8:	4621      	mov	r1, r4
 80066ca:	f7ff ff59 	bl	8006580 <__sflush_r>
 80066ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d0:	07da      	lsls	r2, r3, #31
 80066d2:	4605      	mov	r5, r0
 80066d4:	d4e0      	bmi.n	8006698 <_fflush_r+0xc>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	059b      	lsls	r3, r3, #22
 80066da:	d4dd      	bmi.n	8006698 <_fflush_r+0xc>
 80066dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066de:	f000 f908 	bl	80068f2 <__retarget_lock_release_recursive>
 80066e2:	e7d9      	b.n	8006698 <_fflush_r+0xc>
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <_fflush_r+0x70>)
 80066e6:	429c      	cmp	r4, r3
 80066e8:	d101      	bne.n	80066ee <_fflush_r+0x62>
 80066ea:	68ac      	ldr	r4, [r5, #8]
 80066ec:	e7df      	b.n	80066ae <_fflush_r+0x22>
 80066ee:	4b04      	ldr	r3, [pc, #16]	; (8006700 <_fflush_r+0x74>)
 80066f0:	429c      	cmp	r4, r3
 80066f2:	bf08      	it	eq
 80066f4:	68ec      	ldreq	r4, [r5, #12]
 80066f6:	e7da      	b.n	80066ae <_fflush_r+0x22>
 80066f8:	08007c64 	.word	0x08007c64
 80066fc:	08007c84 	.word	0x08007c84
 8006700:	08007c44 	.word	0x08007c44

08006704 <std>:
 8006704:	2300      	movs	r3, #0
 8006706:	b510      	push	{r4, lr}
 8006708:	4604      	mov	r4, r0
 800670a:	e9c0 3300 	strd	r3, r3, [r0]
 800670e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006712:	6083      	str	r3, [r0, #8]
 8006714:	8181      	strh	r1, [r0, #12]
 8006716:	6643      	str	r3, [r0, #100]	; 0x64
 8006718:	81c2      	strh	r2, [r0, #14]
 800671a:	6183      	str	r3, [r0, #24]
 800671c:	4619      	mov	r1, r3
 800671e:	2208      	movs	r2, #8
 8006720:	305c      	adds	r0, #92	; 0x5c
 8006722:	f7fd fb5b 	bl	8003ddc <memset>
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <std+0x38>)
 8006728:	6263      	str	r3, [r4, #36]	; 0x24
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <std+0x3c>)
 800672c:	62a3      	str	r3, [r4, #40]	; 0x28
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <std+0x40>)
 8006730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <std+0x44>)
 8006734:	6224      	str	r4, [r4, #32]
 8006736:	6323      	str	r3, [r4, #48]	; 0x30
 8006738:	bd10      	pop	{r4, pc}
 800673a:	bf00      	nop
 800673c:	08006a59 	.word	0x08006a59
 8006740:	08006a7b 	.word	0x08006a7b
 8006744:	08006ab3 	.word	0x08006ab3
 8006748:	08006ad7 	.word	0x08006ad7

0800674c <_cleanup_r>:
 800674c:	4901      	ldr	r1, [pc, #4]	; (8006754 <_cleanup_r+0x8>)
 800674e:	f000 b8af 	b.w	80068b0 <_fwalk_reent>
 8006752:	bf00      	nop
 8006754:	0800668d 	.word	0x0800668d

08006758 <__sfmoreglue>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	2268      	movs	r2, #104	; 0x68
 800675c:	1e4d      	subs	r5, r1, #1
 800675e:	4355      	muls	r5, r2
 8006760:	460e      	mov	r6, r1
 8006762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006766:	f7ff fa65 	bl	8005c34 <_malloc_r>
 800676a:	4604      	mov	r4, r0
 800676c:	b140      	cbz	r0, 8006780 <__sfmoreglue+0x28>
 800676e:	2100      	movs	r1, #0
 8006770:	e9c0 1600 	strd	r1, r6, [r0]
 8006774:	300c      	adds	r0, #12
 8006776:	60a0      	str	r0, [r4, #8]
 8006778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800677c:	f7fd fb2e 	bl	8003ddc <memset>
 8006780:	4620      	mov	r0, r4
 8006782:	bd70      	pop	{r4, r5, r6, pc}

08006784 <__sfp_lock_acquire>:
 8006784:	4801      	ldr	r0, [pc, #4]	; (800678c <__sfp_lock_acquire+0x8>)
 8006786:	f000 b8b3 	b.w	80068f0 <__retarget_lock_acquire_recursive>
 800678a:	bf00      	nop
 800678c:	200002c5 	.word	0x200002c5

08006790 <__sfp_lock_release>:
 8006790:	4801      	ldr	r0, [pc, #4]	; (8006798 <__sfp_lock_release+0x8>)
 8006792:	f000 b8ae 	b.w	80068f2 <__retarget_lock_release_recursive>
 8006796:	bf00      	nop
 8006798:	200002c5 	.word	0x200002c5

0800679c <__sinit_lock_acquire>:
 800679c:	4801      	ldr	r0, [pc, #4]	; (80067a4 <__sinit_lock_acquire+0x8>)
 800679e:	f000 b8a7 	b.w	80068f0 <__retarget_lock_acquire_recursive>
 80067a2:	bf00      	nop
 80067a4:	200002c6 	.word	0x200002c6

080067a8 <__sinit_lock_release>:
 80067a8:	4801      	ldr	r0, [pc, #4]	; (80067b0 <__sinit_lock_release+0x8>)
 80067aa:	f000 b8a2 	b.w	80068f2 <__retarget_lock_release_recursive>
 80067ae:	bf00      	nop
 80067b0:	200002c6 	.word	0x200002c6

080067b4 <__sinit>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	4604      	mov	r4, r0
 80067b8:	f7ff fff0 	bl	800679c <__sinit_lock_acquire>
 80067bc:	69a3      	ldr	r3, [r4, #24]
 80067be:	b11b      	cbz	r3, 80067c8 <__sinit+0x14>
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f7ff bff0 	b.w	80067a8 <__sinit_lock_release>
 80067c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067cc:	6523      	str	r3, [r4, #80]	; 0x50
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <__sinit+0x68>)
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <__sinit+0x6c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	bf04      	itt	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	61a3      	streq	r3, [r4, #24]
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f820 	bl	8006824 <__sfp>
 80067e4:	6060      	str	r0, [r4, #4]
 80067e6:	4620      	mov	r0, r4
 80067e8:	f000 f81c 	bl	8006824 <__sfp>
 80067ec:	60a0      	str	r0, [r4, #8]
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 f818 	bl	8006824 <__sfp>
 80067f4:	2200      	movs	r2, #0
 80067f6:	60e0      	str	r0, [r4, #12]
 80067f8:	2104      	movs	r1, #4
 80067fa:	6860      	ldr	r0, [r4, #4]
 80067fc:	f7ff ff82 	bl	8006704 <std>
 8006800:	68a0      	ldr	r0, [r4, #8]
 8006802:	2201      	movs	r2, #1
 8006804:	2109      	movs	r1, #9
 8006806:	f7ff ff7d 	bl	8006704 <std>
 800680a:	68e0      	ldr	r0, [r4, #12]
 800680c:	2202      	movs	r2, #2
 800680e:	2112      	movs	r1, #18
 8006810:	f7ff ff78 	bl	8006704 <std>
 8006814:	2301      	movs	r3, #1
 8006816:	61a3      	str	r3, [r4, #24]
 8006818:	e7d2      	b.n	80067c0 <__sinit+0xc>
 800681a:	bf00      	nop
 800681c:	080078cc 	.word	0x080078cc
 8006820:	0800674d 	.word	0x0800674d

08006824 <__sfp>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	4607      	mov	r7, r0
 8006828:	f7ff ffac 	bl	8006784 <__sfp_lock_acquire>
 800682c:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <__sfp+0x84>)
 800682e:	681e      	ldr	r6, [r3, #0]
 8006830:	69b3      	ldr	r3, [r6, #24]
 8006832:	b913      	cbnz	r3, 800683a <__sfp+0x16>
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff ffbd 	bl	80067b4 <__sinit>
 800683a:	3648      	adds	r6, #72	; 0x48
 800683c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006840:	3b01      	subs	r3, #1
 8006842:	d503      	bpl.n	800684c <__sfp+0x28>
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	b30b      	cbz	r3, 800688c <__sfp+0x68>
 8006848:	6836      	ldr	r6, [r6, #0]
 800684a:	e7f7      	b.n	800683c <__sfp+0x18>
 800684c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006850:	b9d5      	cbnz	r5, 8006888 <__sfp+0x64>
 8006852:	4b16      	ldr	r3, [pc, #88]	; (80068ac <__sfp+0x88>)
 8006854:	60e3      	str	r3, [r4, #12]
 8006856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800685a:	6665      	str	r5, [r4, #100]	; 0x64
 800685c:	f000 f847 	bl	80068ee <__retarget_lock_init_recursive>
 8006860:	f7ff ff96 	bl	8006790 <__sfp_lock_release>
 8006864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800686c:	6025      	str	r5, [r4, #0]
 800686e:	61a5      	str	r5, [r4, #24]
 8006870:	2208      	movs	r2, #8
 8006872:	4629      	mov	r1, r5
 8006874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006878:	f7fd fab0 	bl	8003ddc <memset>
 800687c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006884:	4620      	mov	r0, r4
 8006886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006888:	3468      	adds	r4, #104	; 0x68
 800688a:	e7d9      	b.n	8006840 <__sfp+0x1c>
 800688c:	2104      	movs	r1, #4
 800688e:	4638      	mov	r0, r7
 8006890:	f7ff ff62 	bl	8006758 <__sfmoreglue>
 8006894:	4604      	mov	r4, r0
 8006896:	6030      	str	r0, [r6, #0]
 8006898:	2800      	cmp	r0, #0
 800689a:	d1d5      	bne.n	8006848 <__sfp+0x24>
 800689c:	f7ff ff78 	bl	8006790 <__sfp_lock_release>
 80068a0:	230c      	movs	r3, #12
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	e7ee      	b.n	8006884 <__sfp+0x60>
 80068a6:	bf00      	nop
 80068a8:	080078cc 	.word	0x080078cc
 80068ac:	ffff0001 	.word	0xffff0001

080068b0 <_fwalk_reent>:
 80068b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	4606      	mov	r6, r0
 80068b6:	4688      	mov	r8, r1
 80068b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068bc:	2700      	movs	r7, #0
 80068be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068c2:	f1b9 0901 	subs.w	r9, r9, #1
 80068c6:	d505      	bpl.n	80068d4 <_fwalk_reent+0x24>
 80068c8:	6824      	ldr	r4, [r4, #0]
 80068ca:	2c00      	cmp	r4, #0
 80068cc:	d1f7      	bne.n	80068be <_fwalk_reent+0xe>
 80068ce:	4638      	mov	r0, r7
 80068d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d4:	89ab      	ldrh	r3, [r5, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d907      	bls.n	80068ea <_fwalk_reent+0x3a>
 80068da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068de:	3301      	adds	r3, #1
 80068e0:	d003      	beq.n	80068ea <_fwalk_reent+0x3a>
 80068e2:	4629      	mov	r1, r5
 80068e4:	4630      	mov	r0, r6
 80068e6:	47c0      	blx	r8
 80068e8:	4307      	orrs	r7, r0
 80068ea:	3568      	adds	r5, #104	; 0x68
 80068ec:	e7e9      	b.n	80068c2 <_fwalk_reent+0x12>

080068ee <__retarget_lock_init_recursive>:
 80068ee:	4770      	bx	lr

080068f0 <__retarget_lock_acquire_recursive>:
 80068f0:	4770      	bx	lr

080068f2 <__retarget_lock_release_recursive>:
 80068f2:	4770      	bx	lr

080068f4 <__swhatbuf_r>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	460e      	mov	r6, r1
 80068f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fc:	2900      	cmp	r1, #0
 80068fe:	b096      	sub	sp, #88	; 0x58
 8006900:	4614      	mov	r4, r2
 8006902:	461d      	mov	r5, r3
 8006904:	da08      	bge.n	8006918 <__swhatbuf_r+0x24>
 8006906:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	602a      	str	r2, [r5, #0]
 800690e:	061a      	lsls	r2, r3, #24
 8006910:	d410      	bmi.n	8006934 <__swhatbuf_r+0x40>
 8006912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006916:	e00e      	b.n	8006936 <__swhatbuf_r+0x42>
 8006918:	466a      	mov	r2, sp
 800691a:	f000 f903 	bl	8006b24 <_fstat_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	dbf1      	blt.n	8006906 <__swhatbuf_r+0x12>
 8006922:	9a01      	ldr	r2, [sp, #4]
 8006924:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006928:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800692c:	425a      	negs	r2, r3
 800692e:	415a      	adcs	r2, r3
 8006930:	602a      	str	r2, [r5, #0]
 8006932:	e7ee      	b.n	8006912 <__swhatbuf_r+0x1e>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	2000      	movs	r0, #0
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	b016      	add	sp, #88	; 0x58
 800693c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006940 <__smakebuf_r>:
 8006940:	898b      	ldrh	r3, [r1, #12]
 8006942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006944:	079d      	lsls	r5, r3, #30
 8006946:	4606      	mov	r6, r0
 8006948:	460c      	mov	r4, r1
 800694a:	d507      	bpl.n	800695c <__smakebuf_r+0x1c>
 800694c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	6123      	str	r3, [r4, #16]
 8006954:	2301      	movs	r3, #1
 8006956:	6163      	str	r3, [r4, #20]
 8006958:	b002      	add	sp, #8
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	ab01      	add	r3, sp, #4
 800695e:	466a      	mov	r2, sp
 8006960:	f7ff ffc8 	bl	80068f4 <__swhatbuf_r>
 8006964:	9900      	ldr	r1, [sp, #0]
 8006966:	4605      	mov	r5, r0
 8006968:	4630      	mov	r0, r6
 800696a:	f7ff f963 	bl	8005c34 <_malloc_r>
 800696e:	b948      	cbnz	r0, 8006984 <__smakebuf_r+0x44>
 8006970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006974:	059a      	lsls	r2, r3, #22
 8006976:	d4ef      	bmi.n	8006958 <__smakebuf_r+0x18>
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	81a3      	strh	r3, [r4, #12]
 8006982:	e7e3      	b.n	800694c <__smakebuf_r+0xc>
 8006984:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <__smakebuf_r+0x7c>)
 8006986:	62b3      	str	r3, [r6, #40]	; 0x28
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	6020      	str	r0, [r4, #0]
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	9b00      	ldr	r3, [sp, #0]
 8006994:	6163      	str	r3, [r4, #20]
 8006996:	9b01      	ldr	r3, [sp, #4]
 8006998:	6120      	str	r0, [r4, #16]
 800699a:	b15b      	cbz	r3, 80069b4 <__smakebuf_r+0x74>
 800699c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 f8d1 	bl	8006b48 <_isatty_r>
 80069a6:	b128      	cbz	r0, 80069b4 <__smakebuf_r+0x74>
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	81a3      	strh	r3, [r4, #12]
 80069b4:	89a0      	ldrh	r0, [r4, #12]
 80069b6:	4305      	orrs	r5, r0
 80069b8:	81a5      	strh	r5, [r4, #12]
 80069ba:	e7cd      	b.n	8006958 <__smakebuf_r+0x18>
 80069bc:	0800674d 	.word	0x0800674d

080069c0 <_malloc_usable_size_r>:
 80069c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c4:	1f18      	subs	r0, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfbc      	itt	lt
 80069ca:	580b      	ldrlt	r3, [r1, r0]
 80069cc:	18c0      	addlt	r0, r0, r3
 80069ce:	4770      	bx	lr

080069d0 <_raise_r>:
 80069d0:	291f      	cmp	r1, #31
 80069d2:	b538      	push	{r3, r4, r5, lr}
 80069d4:	4604      	mov	r4, r0
 80069d6:	460d      	mov	r5, r1
 80069d8:	d904      	bls.n	80069e4 <_raise_r+0x14>
 80069da:	2316      	movs	r3, #22
 80069dc:	6003      	str	r3, [r0, #0]
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069e6:	b112      	cbz	r2, 80069ee <_raise_r+0x1e>
 80069e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069ec:	b94b      	cbnz	r3, 8006a02 <_raise_r+0x32>
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 f830 	bl	8006a54 <_getpid_r>
 80069f4:	462a      	mov	r2, r5
 80069f6:	4601      	mov	r1, r0
 80069f8:	4620      	mov	r0, r4
 80069fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069fe:	f000 b817 	b.w	8006a30 <_kill_r>
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d00a      	beq.n	8006a1c <_raise_r+0x4c>
 8006a06:	1c59      	adds	r1, r3, #1
 8006a08:	d103      	bne.n	8006a12 <_raise_r+0x42>
 8006a0a:	2316      	movs	r3, #22
 8006a0c:	6003      	str	r3, [r0, #0]
 8006a0e:	2001      	movs	r0, #1
 8006a10:	e7e7      	b.n	80069e2 <_raise_r+0x12>
 8006a12:	2400      	movs	r4, #0
 8006a14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a18:	4628      	mov	r0, r5
 8006a1a:	4798      	blx	r3
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	e7e0      	b.n	80069e2 <_raise_r+0x12>

08006a20 <raise>:
 8006a20:	4b02      	ldr	r3, [pc, #8]	; (8006a2c <raise+0xc>)
 8006a22:	4601      	mov	r1, r0
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f7ff bfd3 	b.w	80069d0 <_raise_r>
 8006a2a:	bf00      	nop
 8006a2c:	2000000c 	.word	0x2000000c

08006a30 <_kill_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <_kill_r+0x20>)
 8006a34:	2300      	movs	r3, #0
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	f7fa fe35 	bl	80016ac <_kill>
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	d102      	bne.n	8006a4c <_kill_r+0x1c>
 8006a46:	682b      	ldr	r3, [r5, #0]
 8006a48:	b103      	cbz	r3, 8006a4c <_kill_r+0x1c>
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	bd38      	pop	{r3, r4, r5, pc}
 8006a4e:	bf00      	nop
 8006a50:	200002c0 	.word	0x200002c0

08006a54 <_getpid_r>:
 8006a54:	f7fa be22 	b.w	800169c <_getpid>

08006a58 <__sread>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	f000 f894 	bl	8006b8c <_read_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	bfab      	itete	ge
 8006a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a6c:	181b      	addge	r3, r3, r0
 8006a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a72:	bfac      	ite	ge
 8006a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a76:	81a3      	strhlt	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__swrite>:
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	461f      	mov	r7, r3
 8006a80:	898b      	ldrh	r3, [r1, #12]
 8006a82:	05db      	lsls	r3, r3, #23
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4616      	mov	r6, r2
 8006a8a:	d505      	bpl.n	8006a98 <__swrite+0x1e>
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	2302      	movs	r3, #2
 8006a92:	2200      	movs	r2, #0
 8006a94:	f000 f868 	bl	8006b68 <_lseek_r>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aae:	f000 b817 	b.w	8006ae0 <_write_r>

08006ab2 <__sseek>:
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aba:	f000 f855 	bl	8006b68 <_lseek_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	bf15      	itete	ne
 8006ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ace:	81a3      	strheq	r3, [r4, #12]
 8006ad0:	bf18      	it	ne
 8006ad2:	81a3      	strhne	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__sclose>:
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 b813 	b.w	8006b04 <_close_r>
	...

08006ae0 <_write_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	; (8006b00 <_write_r+0x20>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fa fe13 	bl	800171a <_write>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_write_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_write_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200002c0 	.word	0x200002c0

08006b04 <_close_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d06      	ldr	r5, [pc, #24]	; (8006b20 <_close_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f7fa fe1f 	bl	8001752 <_close>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_close_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_close_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	200002c0 	.word	0x200002c0

08006b24 <_fstat_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	; (8006b44 <_fstat_r+0x20>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f7fa fe1a 	bl	800176a <_fstat>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d102      	bne.n	8006b40 <_fstat_r+0x1c>
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	b103      	cbz	r3, 8006b40 <_fstat_r+0x1c>
 8006b3e:	6023      	str	r3, [r4, #0]
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	200002c0 	.word	0x200002c0

08006b48 <_isatty_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	; (8006b64 <_isatty_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa fe19 	bl	800178a <_isatty>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_isatty_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_isatty_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	200002c0 	.word	0x200002c0

08006b68 <_lseek_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	; (8006b88 <_lseek_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fa fe12 	bl	80017a0 <_lseek>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_lseek_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_lseek_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	200002c0 	.word	0x200002c0

08006b8c <_read_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	; (8006bac <_read_r+0x20>)
 8006b90:	4604      	mov	r4, r0
 8006b92:	4608      	mov	r0, r1
 8006b94:	4611      	mov	r1, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	602a      	str	r2, [r5, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f7fa fda0 	bl	80016e0 <_read>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_read_r+0x1e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_read_r+0x1e>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	200002c0 	.word	0x200002c0

08006bb0 <cosf>:
 8006bb0:	ee10 3a10 	vmov	r3, s0
 8006bb4:	b507      	push	{r0, r1, r2, lr}
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <cosf+0x80>)
 8006bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	dc06      	bgt.n	8006bce <cosf+0x1e>
 8006bc0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006c34 <cosf+0x84>
 8006bc4:	b003      	add	sp, #12
 8006bc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bca:	f000 ba59 	b.w	8007080 <__kernel_cosf>
 8006bce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006bd2:	db04      	blt.n	8006bde <cosf+0x2e>
 8006bd4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006bd8:	b003      	add	sp, #12
 8006bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bde:	4668      	mov	r0, sp
 8006be0:	f000 f912 	bl	8006e08 <__ieee754_rem_pio2f>
 8006be4:	f000 0003 	and.w	r0, r0, #3
 8006be8:	2801      	cmp	r0, #1
 8006bea:	d009      	beq.n	8006c00 <cosf+0x50>
 8006bec:	2802      	cmp	r0, #2
 8006bee:	d010      	beq.n	8006c12 <cosf+0x62>
 8006bf0:	b9b0      	cbnz	r0, 8006c20 <cosf+0x70>
 8006bf2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006bf6:	ed9d 0a00 	vldr	s0, [sp]
 8006bfa:	f000 fa41 	bl	8007080 <__kernel_cosf>
 8006bfe:	e7eb      	b.n	8006bd8 <cosf+0x28>
 8006c00:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c04:	ed9d 0a00 	vldr	s0, [sp]
 8006c08:	f000 fd10 	bl	800762c <__kernel_sinf>
 8006c0c:	eeb1 0a40 	vneg.f32	s0, s0
 8006c10:	e7e2      	b.n	8006bd8 <cosf+0x28>
 8006c12:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c16:	ed9d 0a00 	vldr	s0, [sp]
 8006c1a:	f000 fa31 	bl	8007080 <__kernel_cosf>
 8006c1e:	e7f5      	b.n	8006c0c <cosf+0x5c>
 8006c20:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c24:	ed9d 0a00 	vldr	s0, [sp]
 8006c28:	2001      	movs	r0, #1
 8006c2a:	f000 fcff 	bl	800762c <__kernel_sinf>
 8006c2e:	e7d3      	b.n	8006bd8 <cosf+0x28>
 8006c30:	3f490fd8 	.word	0x3f490fd8
 8006c34:	00000000 	.word	0x00000000

08006c38 <sinf>:
 8006c38:	ee10 3a10 	vmov	r3, s0
 8006c3c:	b507      	push	{r0, r1, r2, lr}
 8006c3e:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <sinf+0x84>)
 8006c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c44:	4293      	cmp	r3, r2
 8006c46:	dc07      	bgt.n	8006c58 <sinf+0x20>
 8006c48:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006cc0 <sinf+0x88>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	b003      	add	sp, #12
 8006c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c54:	f000 bcea 	b.w	800762c <__kernel_sinf>
 8006c58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c5c:	db04      	blt.n	8006c68 <sinf+0x30>
 8006c5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006c62:	b003      	add	sp, #12
 8006c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c68:	4668      	mov	r0, sp
 8006c6a:	f000 f8cd 	bl	8006e08 <__ieee754_rem_pio2f>
 8006c6e:	f000 0003 	and.w	r0, r0, #3
 8006c72:	2801      	cmp	r0, #1
 8006c74:	d00a      	beq.n	8006c8c <sinf+0x54>
 8006c76:	2802      	cmp	r0, #2
 8006c78:	d00f      	beq.n	8006c9a <sinf+0x62>
 8006c7a:	b9c0      	cbnz	r0, 8006cae <sinf+0x76>
 8006c7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c80:	ed9d 0a00 	vldr	s0, [sp]
 8006c84:	2001      	movs	r0, #1
 8006c86:	f000 fcd1 	bl	800762c <__kernel_sinf>
 8006c8a:	e7ea      	b.n	8006c62 <sinf+0x2a>
 8006c8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c90:	ed9d 0a00 	vldr	s0, [sp]
 8006c94:	f000 f9f4 	bl	8007080 <__kernel_cosf>
 8006c98:	e7e3      	b.n	8006c62 <sinf+0x2a>
 8006c9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c9e:	ed9d 0a00 	vldr	s0, [sp]
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f000 fcc2 	bl	800762c <__kernel_sinf>
 8006ca8:	eeb1 0a40 	vneg.f32	s0, s0
 8006cac:	e7d9      	b.n	8006c62 <sinf+0x2a>
 8006cae:	eddd 0a01 	vldr	s1, [sp, #4]
 8006cb2:	ed9d 0a00 	vldr	s0, [sp]
 8006cb6:	f000 f9e3 	bl	8007080 <__kernel_cosf>
 8006cba:	e7f5      	b.n	8006ca8 <sinf+0x70>
 8006cbc:	3f490fd8 	.word	0x3f490fd8
 8006cc0:	00000000 	.word	0x00000000

08006cc4 <fmodf>:
 8006cc4:	b508      	push	{r3, lr}
 8006cc6:	ed2d 8b02 	vpush	{d8}
 8006cca:	eef0 8a40 	vmov.f32	s17, s0
 8006cce:	eeb0 8a60 	vmov.f32	s16, s1
 8006cd2:	f000 f817 	bl	8006d04 <__ieee754_fmodf>
 8006cd6:	eef4 8a48 	vcmp.f32	s17, s16
 8006cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cde:	d60c      	bvs.n	8006cfa <fmodf+0x36>
 8006ce0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006d00 <fmodf+0x3c>
 8006ce4:	eeb4 8a68 	vcmp.f32	s16, s17
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	d105      	bne.n	8006cfa <fmodf+0x36>
 8006cee:	f7fd f84b 	bl	8003d88 <__errno>
 8006cf2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006cf6:	2321      	movs	r3, #33	; 0x21
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	ecbd 8b02 	vpop	{d8}
 8006cfe:	bd08      	pop	{r3, pc}
 8006d00:	00000000 	.word	0x00000000

08006d04 <__ieee754_fmodf>:
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	ee10 5a90 	vmov	r5, s1
 8006d0a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8006d0e:	d009      	beq.n	8006d24 <__ieee754_fmodf+0x20>
 8006d10:	ee10 2a10 	vmov	r2, s0
 8006d14:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006d18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006d1c:	da02      	bge.n	8006d24 <__ieee754_fmodf+0x20>
 8006d1e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006d22:	dd04      	ble.n	8006d2e <__ieee754_fmodf+0x2a>
 8006d24:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006d28:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	dbfc      	blt.n	8006d2c <__ieee754_fmodf+0x28>
 8006d32:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8006d36:	d105      	bne.n	8006d44 <__ieee754_fmodf+0x40>
 8006d38:	4b32      	ldr	r3, [pc, #200]	; (8006e04 <__ieee754_fmodf+0x100>)
 8006d3a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8006d3e:	ed93 0a00 	vldr	s0, [r3]
 8006d42:	e7f3      	b.n	8006d2c <__ieee754_fmodf+0x28>
 8006d44:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8006d48:	d13f      	bne.n	8006dca <__ieee754_fmodf+0xc6>
 8006d4a:	0219      	lsls	r1, r3, #8
 8006d4c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8006d50:	2900      	cmp	r1, #0
 8006d52:	dc37      	bgt.n	8006dc4 <__ieee754_fmodf+0xc0>
 8006d54:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8006d58:	d13d      	bne.n	8006dd6 <__ieee754_fmodf+0xd2>
 8006d5a:	0227      	lsls	r7, r4, #8
 8006d5c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	da35      	bge.n	8006dd0 <__ieee754_fmodf+0xcc>
 8006d64:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8006d68:	bfbb      	ittet	lt
 8006d6a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8006d6e:	1a12      	sublt	r2, r2, r0
 8006d70:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8006d74:	4093      	lsllt	r3, r2
 8006d76:	bfa8      	it	ge
 8006d78:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8006d7c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8006d80:	bfb5      	itete	lt
 8006d82:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8006d86:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8006d8a:	1a52      	sublt	r2, r2, r1
 8006d8c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8006d90:	bfb8      	it	lt
 8006d92:	4094      	lsllt	r4, r2
 8006d94:	1a40      	subs	r0, r0, r1
 8006d96:	1b1a      	subs	r2, r3, r4
 8006d98:	bb00      	cbnz	r0, 8006ddc <__ieee754_fmodf+0xd8>
 8006d9a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8006d9e:	bf38      	it	cc
 8006da0:	4613      	movcc	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0c8      	beq.n	8006d38 <__ieee754_fmodf+0x34>
 8006da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006daa:	db1f      	blt.n	8006dec <__ieee754_fmodf+0xe8>
 8006dac:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8006db0:	db1f      	blt.n	8006df2 <__ieee754_fmodf+0xee>
 8006db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8006db6:	317f      	adds	r1, #127	; 0x7f
 8006db8:	4333      	orrs	r3, r6
 8006dba:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8006dbe:	ee00 3a10 	vmov	s0, r3
 8006dc2:	e7b3      	b.n	8006d2c <__ieee754_fmodf+0x28>
 8006dc4:	3801      	subs	r0, #1
 8006dc6:	0049      	lsls	r1, r1, #1
 8006dc8:	e7c2      	b.n	8006d50 <__ieee754_fmodf+0x4c>
 8006dca:	15d8      	asrs	r0, r3, #23
 8006dcc:	387f      	subs	r0, #127	; 0x7f
 8006dce:	e7c1      	b.n	8006d54 <__ieee754_fmodf+0x50>
 8006dd0:	3901      	subs	r1, #1
 8006dd2:	007f      	lsls	r7, r7, #1
 8006dd4:	e7c4      	b.n	8006d60 <__ieee754_fmodf+0x5c>
 8006dd6:	15e1      	asrs	r1, r4, #23
 8006dd8:	397f      	subs	r1, #127	; 0x7f
 8006dda:	e7c3      	b.n	8006d64 <__ieee754_fmodf+0x60>
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	da02      	bge.n	8006de6 <__ieee754_fmodf+0xe2>
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	3801      	subs	r0, #1
 8006de4:	e7d7      	b.n	8006d96 <__ieee754_fmodf+0x92>
 8006de6:	d0a7      	beq.n	8006d38 <__ieee754_fmodf+0x34>
 8006de8:	0053      	lsls	r3, r2, #1
 8006dea:	e7fa      	b.n	8006de2 <__ieee754_fmodf+0xde>
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	3901      	subs	r1, #1
 8006df0:	e7d9      	b.n	8006da6 <__ieee754_fmodf+0xa2>
 8006df2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8006df6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8006dfa:	3182      	adds	r1, #130	; 0x82
 8006dfc:	410b      	asrs	r3, r1
 8006dfe:	4333      	orrs	r3, r6
 8006e00:	e7dd      	b.n	8006dbe <__ieee754_fmodf+0xba>
 8006e02:	bf00      	nop
 8006e04:	08007ca4 	.word	0x08007ca4

08006e08 <__ieee754_rem_pio2f>:
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	ee10 6a10 	vmov	r6, s0
 8006e0e:	4b8e      	ldr	r3, [pc, #568]	; (8007048 <__ieee754_rem_pio2f+0x240>)
 8006e10:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006e14:	429d      	cmp	r5, r3
 8006e16:	b087      	sub	sp, #28
 8006e18:	eef0 7a40 	vmov.f32	s15, s0
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	dc05      	bgt.n	8006e2c <__ieee754_rem_pio2f+0x24>
 8006e20:	2300      	movs	r3, #0
 8006e22:	ed80 0a00 	vstr	s0, [r0]
 8006e26:	6043      	str	r3, [r0, #4]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e01a      	b.n	8006e62 <__ieee754_rem_pio2f+0x5a>
 8006e2c:	4b87      	ldr	r3, [pc, #540]	; (800704c <__ieee754_rem_pio2f+0x244>)
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	dc46      	bgt.n	8006ec0 <__ieee754_rem_pio2f+0xb8>
 8006e32:	2e00      	cmp	r6, #0
 8006e34:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007050 <__ieee754_rem_pio2f+0x248>
 8006e38:	4b86      	ldr	r3, [pc, #536]	; (8007054 <__ieee754_rem_pio2f+0x24c>)
 8006e3a:	f025 050f 	bic.w	r5, r5, #15
 8006e3e:	dd1f      	ble.n	8006e80 <__ieee754_rem_pio2f+0x78>
 8006e40:	429d      	cmp	r5, r3
 8006e42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e46:	d00e      	beq.n	8006e66 <__ieee754_rem_pio2f+0x5e>
 8006e48:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007058 <__ieee754_rem_pio2f+0x250>
 8006e4c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006e50:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e54:	ed80 0a00 	vstr	s0, [r0]
 8006e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	edc4 7a01 	vstr	s15, [r4, #4]
 8006e62:	b007      	add	sp, #28
 8006e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e66:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800705c <__ieee754_rem_pio2f+0x254>
 8006e6a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007060 <__ieee754_rem_pio2f+0x258>
 8006e6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e72:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006e76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e7a:	edc0 6a00 	vstr	s13, [r0]
 8006e7e:	e7eb      	b.n	8006e58 <__ieee754_rem_pio2f+0x50>
 8006e80:	429d      	cmp	r5, r3
 8006e82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006e86:	d00e      	beq.n	8006ea6 <__ieee754_rem_pio2f+0x9e>
 8006e88:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007058 <__ieee754_rem_pio2f+0x250>
 8006e8c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8006e90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006e94:	ed80 0a00 	vstr	s0, [r0]
 8006e98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	edc4 7a01 	vstr	s15, [r4, #4]
 8006ea4:	e7dd      	b.n	8006e62 <__ieee754_rem_pio2f+0x5a>
 8006ea6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800705c <__ieee754_rem_pio2f+0x254>
 8006eaa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007060 <__ieee754_rem_pio2f+0x258>
 8006eae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006eb2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006eb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006eba:	edc0 6a00 	vstr	s13, [r0]
 8006ebe:	e7eb      	b.n	8006e98 <__ieee754_rem_pio2f+0x90>
 8006ec0:	4b68      	ldr	r3, [pc, #416]	; (8007064 <__ieee754_rem_pio2f+0x25c>)
 8006ec2:	429d      	cmp	r5, r3
 8006ec4:	dc72      	bgt.n	8006fac <__ieee754_rem_pio2f+0x1a4>
 8006ec6:	f000 fbf9 	bl	80076bc <fabsf>
 8006eca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007068 <__ieee754_rem_pio2f+0x260>
 8006ece:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006ed2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ede:	ee17 0a90 	vmov	r0, s15
 8006ee2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007050 <__ieee754_rem_pio2f+0x248>
 8006ee6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006eea:	281f      	cmp	r0, #31
 8006eec:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007058 <__ieee754_rem_pio2f+0x250>
 8006ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef4:	eeb1 6a47 	vneg.f32	s12, s14
 8006ef8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006efc:	ee16 2a90 	vmov	r2, s13
 8006f00:	dc1c      	bgt.n	8006f3c <__ieee754_rem_pio2f+0x134>
 8006f02:	495a      	ldr	r1, [pc, #360]	; (800706c <__ieee754_rem_pio2f+0x264>)
 8006f04:	1e47      	subs	r7, r0, #1
 8006f06:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8006f0a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006f0e:	428b      	cmp	r3, r1
 8006f10:	d014      	beq.n	8006f3c <__ieee754_rem_pio2f+0x134>
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	ed94 7a00 	vldr	s14, [r4]
 8006f18:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006f1c:	2e00      	cmp	r6, #0
 8006f1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006f22:	ed84 0a01 	vstr	s0, [r4, #4]
 8006f26:	da9c      	bge.n	8006e62 <__ieee754_rem_pio2f+0x5a>
 8006f28:	eeb1 7a47 	vneg.f32	s14, s14
 8006f2c:	eeb1 0a40 	vneg.f32	s0, s0
 8006f30:	ed84 7a00 	vstr	s14, [r4]
 8006f34:	ed84 0a01 	vstr	s0, [r4, #4]
 8006f38:	4240      	negs	r0, r0
 8006f3a:	e792      	b.n	8006e62 <__ieee754_rem_pio2f+0x5a>
 8006f3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006f40:	15eb      	asrs	r3, r5, #23
 8006f42:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8006f46:	2d08      	cmp	r5, #8
 8006f48:	dde3      	ble.n	8006f12 <__ieee754_rem_pio2f+0x10a>
 8006f4a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800705c <__ieee754_rem_pio2f+0x254>
 8006f4e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007060 <__ieee754_rem_pio2f+0x258>
 8006f52:	eef0 6a40 	vmov.f32	s13, s0
 8006f56:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006f5a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006f5e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8006f62:	eef0 7a40 	vmov.f32	s15, s0
 8006f66:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006f6a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006f6e:	ee15 2a90 	vmov	r2, s11
 8006f72:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006f76:	1a5b      	subs	r3, r3, r1
 8006f78:	2b19      	cmp	r3, #25
 8006f7a:	dc04      	bgt.n	8006f86 <__ieee754_rem_pio2f+0x17e>
 8006f7c:	edc4 5a00 	vstr	s11, [r4]
 8006f80:	eeb0 0a66 	vmov.f32	s0, s13
 8006f84:	e7c6      	b.n	8006f14 <__ieee754_rem_pio2f+0x10c>
 8006f86:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007070 <__ieee754_rem_pio2f+0x268>
 8006f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8006f8e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006f92:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006f96:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007074 <__ieee754_rem_pio2f+0x26c>
 8006f9a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006f9e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006fa2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006fa6:	ed84 7a00 	vstr	s14, [r4]
 8006faa:	e7b3      	b.n	8006f14 <__ieee754_rem_pio2f+0x10c>
 8006fac:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006fb0:	db06      	blt.n	8006fc0 <__ieee754_rem_pio2f+0x1b8>
 8006fb2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006fb6:	edc0 7a01 	vstr	s15, [r0, #4]
 8006fba:	edc0 7a00 	vstr	s15, [r0]
 8006fbe:	e733      	b.n	8006e28 <__ieee754_rem_pio2f+0x20>
 8006fc0:	15ea      	asrs	r2, r5, #23
 8006fc2:	3a86      	subs	r2, #134	; 0x86
 8006fc4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fd0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007078 <__ieee754_rem_pio2f+0x270>
 8006fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fdc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006fe0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006fe4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fe8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ff0:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006ff4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ff8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	edcd 7a05 	vstr	s15, [sp, #20]
 8007004:	d11e      	bne.n	8007044 <__ieee754_rem_pio2f+0x23c>
 8007006:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800700a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700e:	bf14      	ite	ne
 8007010:	2302      	movne	r3, #2
 8007012:	2301      	moveq	r3, #1
 8007014:	4919      	ldr	r1, [pc, #100]	; (800707c <__ieee754_rem_pio2f+0x274>)
 8007016:	9101      	str	r1, [sp, #4]
 8007018:	2102      	movs	r1, #2
 800701a:	9100      	str	r1, [sp, #0]
 800701c:	a803      	add	r0, sp, #12
 800701e:	4621      	mov	r1, r4
 8007020:	f000 f88e 	bl	8007140 <__kernel_rem_pio2f>
 8007024:	2e00      	cmp	r6, #0
 8007026:	f6bf af1c 	bge.w	8006e62 <__ieee754_rem_pio2f+0x5a>
 800702a:	edd4 7a00 	vldr	s15, [r4]
 800702e:	eef1 7a67 	vneg.f32	s15, s15
 8007032:	edc4 7a00 	vstr	s15, [r4]
 8007036:	edd4 7a01 	vldr	s15, [r4, #4]
 800703a:	eef1 7a67 	vneg.f32	s15, s15
 800703e:	edc4 7a01 	vstr	s15, [r4, #4]
 8007042:	e779      	b.n	8006f38 <__ieee754_rem_pio2f+0x130>
 8007044:	2303      	movs	r3, #3
 8007046:	e7e5      	b.n	8007014 <__ieee754_rem_pio2f+0x20c>
 8007048:	3f490fd8 	.word	0x3f490fd8
 800704c:	4016cbe3 	.word	0x4016cbe3
 8007050:	3fc90f80 	.word	0x3fc90f80
 8007054:	3fc90fd0 	.word	0x3fc90fd0
 8007058:	37354443 	.word	0x37354443
 800705c:	37354400 	.word	0x37354400
 8007060:	2e85a308 	.word	0x2e85a308
 8007064:	43490f80 	.word	0x43490f80
 8007068:	3f22f984 	.word	0x3f22f984
 800706c:	08007cac 	.word	0x08007cac
 8007070:	2e85a300 	.word	0x2e85a300
 8007074:	248d3132 	.word	0x248d3132
 8007078:	43800000 	.word	0x43800000
 800707c:	08007d2c 	.word	0x08007d2c

08007080 <__kernel_cosf>:
 8007080:	ee10 3a10 	vmov	r3, s0
 8007084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007088:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800708c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007090:	da05      	bge.n	800709e <__kernel_cosf+0x1e>
 8007092:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007096:	ee17 2a90 	vmov	r2, s15
 800709a:	2a00      	cmp	r2, #0
 800709c:	d03d      	beq.n	800711a <__kernel_cosf+0x9a>
 800709e:	ee60 5a00 	vmul.f32	s11, s0, s0
 80070a2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007120 <__kernel_cosf+0xa0>
 80070a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007124 <__kernel_cosf+0xa4>
 80070aa:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007128 <__kernel_cosf+0xa8>
 80070ae:	4a1f      	ldr	r2, [pc, #124]	; (800712c <__kernel_cosf+0xac>)
 80070b0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80070b4:	4293      	cmp	r3, r2
 80070b6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007130 <__kernel_cosf+0xb0>
 80070ba:	eee7 7a25 	vfma.f32	s15, s14, s11
 80070be:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007134 <__kernel_cosf+0xb4>
 80070c2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80070c6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007138 <__kernel_cosf+0xb8>
 80070ca:	eee7 7a25 	vfma.f32	s15, s14, s11
 80070ce:	eeb0 7a66 	vmov.f32	s14, s13
 80070d2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80070d6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80070da:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80070de:	ee67 6a25 	vmul.f32	s13, s14, s11
 80070e2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80070e6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80070ea:	dc04      	bgt.n	80070f6 <__kernel_cosf+0x76>
 80070ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80070f0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80070f4:	4770      	bx	lr
 80070f6:	4a11      	ldr	r2, [pc, #68]	; (800713c <__kernel_cosf+0xbc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	bfda      	itte	le
 80070fc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007100:	ee06 3a90 	vmovle	s13, r3
 8007104:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007108:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800710c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007114:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007118:	4770      	bx	lr
 800711a:	eeb0 0a46 	vmov.f32	s0, s12
 800711e:	4770      	bx	lr
 8007120:	ad47d74e 	.word	0xad47d74e
 8007124:	310f74f6 	.word	0x310f74f6
 8007128:	3d2aaaab 	.word	0x3d2aaaab
 800712c:	3e999999 	.word	0x3e999999
 8007130:	b493f27c 	.word	0xb493f27c
 8007134:	37d00d01 	.word	0x37d00d01
 8007138:	bab60b61 	.word	0xbab60b61
 800713c:	3f480000 	.word	0x3f480000

08007140 <__kernel_rem_pio2f>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b04 	vpush	{d8-d9}
 8007148:	b0d9      	sub	sp, #356	; 0x164
 800714a:	4688      	mov	r8, r1
 800714c:	9002      	str	r0, [sp, #8]
 800714e:	49bb      	ldr	r1, [pc, #748]	; (800743c <__kernel_rem_pio2f+0x2fc>)
 8007150:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007158:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800715c:	1e59      	subs	r1, r3, #1
 800715e:	1d13      	adds	r3, r2, #4
 8007160:	db27      	blt.n	80071b2 <__kernel_rem_pio2f+0x72>
 8007162:	f1b2 0b03 	subs.w	fp, r2, #3
 8007166:	bf48      	it	mi
 8007168:	f102 0b04 	addmi.w	fp, r2, #4
 800716c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007170:	1c45      	adds	r5, r0, #1
 8007172:	00ec      	lsls	r4, r5, #3
 8007174:	1a47      	subs	r7, r0, r1
 8007176:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800744c <__kernel_rem_pio2f+0x30c>
 800717a:	9403      	str	r4, [sp, #12]
 800717c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007180:	eb0a 0c01 	add.w	ip, sl, r1
 8007184:	ae1c      	add	r6, sp, #112	; 0x70
 8007186:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800718a:	2400      	movs	r4, #0
 800718c:	4564      	cmp	r4, ip
 800718e:	dd12      	ble.n	80071b6 <__kernel_rem_pio2f+0x76>
 8007190:	9b01      	ldr	r3, [sp, #4]
 8007192:	ac1c      	add	r4, sp, #112	; 0x70
 8007194:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007198:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800719c:	f04f 0c00 	mov.w	ip, #0
 80071a0:	45d4      	cmp	ip, sl
 80071a2:	dc27      	bgt.n	80071f4 <__kernel_rem_pio2f+0xb4>
 80071a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80071a8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800744c <__kernel_rem_pio2f+0x30c>
 80071ac:	4627      	mov	r7, r4
 80071ae:	2600      	movs	r6, #0
 80071b0:	e016      	b.n	80071e0 <__kernel_rem_pio2f+0xa0>
 80071b2:	2000      	movs	r0, #0
 80071b4:	e7dc      	b.n	8007170 <__kernel_rem_pio2f+0x30>
 80071b6:	42e7      	cmn	r7, r4
 80071b8:	bf5d      	ittte	pl
 80071ba:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80071be:	ee07 3a90 	vmovpl	s15, r3
 80071c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80071c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80071ca:	ece6 7a01 	vstmia	r6!, {s15}
 80071ce:	3401      	adds	r4, #1
 80071d0:	e7dc      	b.n	800718c <__kernel_rem_pio2f+0x4c>
 80071d2:	ecf9 6a01 	vldmia	r9!, {s13}
 80071d6:	ed97 7a00 	vldr	s14, [r7]
 80071da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80071de:	3601      	adds	r6, #1
 80071e0:	428e      	cmp	r6, r1
 80071e2:	f1a7 0704 	sub.w	r7, r7, #4
 80071e6:	ddf4      	ble.n	80071d2 <__kernel_rem_pio2f+0x92>
 80071e8:	eceb 7a01 	vstmia	fp!, {s15}
 80071ec:	f10c 0c01 	add.w	ip, ip, #1
 80071f0:	3404      	adds	r4, #4
 80071f2:	e7d5      	b.n	80071a0 <__kernel_rem_pio2f+0x60>
 80071f4:	ab08      	add	r3, sp, #32
 80071f6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80071fa:	eddf 8a93 	vldr	s17, [pc, #588]	; 8007448 <__kernel_rem_pio2f+0x308>
 80071fe:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8007444 <__kernel_rem_pio2f+0x304>
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007208:	4656      	mov	r6, sl
 800720a:	00b3      	lsls	r3, r6, #2
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	ab58      	add	r3, sp, #352	; 0x160
 8007210:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007214:	ac08      	add	r4, sp, #32
 8007216:	ab44      	add	r3, sp, #272	; 0x110
 8007218:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800721c:	46a4      	mov	ip, r4
 800721e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007222:	4637      	mov	r7, r6
 8007224:	2f00      	cmp	r7, #0
 8007226:	f1a0 0004 	sub.w	r0, r0, #4
 800722a:	dc4f      	bgt.n	80072cc <__kernel_rem_pio2f+0x18c>
 800722c:	4628      	mov	r0, r5
 800722e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007232:	f000 fa8d 	bl	8007750 <scalbnf>
 8007236:	eeb0 8a40 	vmov.f32	s16, s0
 800723a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800723e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007242:	f000 fa43 	bl	80076cc <floorf>
 8007246:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800724a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800724e:	2d00      	cmp	r5, #0
 8007250:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007254:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007258:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800725c:	ee17 9a90 	vmov	r9, s15
 8007260:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007264:	dd44      	ble.n	80072f0 <__kernel_rem_pio2f+0x1b0>
 8007266:	f106 3cff 	add.w	ip, r6, #4294967295
 800726a:	ab08      	add	r3, sp, #32
 800726c:	f1c5 0e08 	rsb	lr, r5, #8
 8007270:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8007274:	fa47 f00e 	asr.w	r0, r7, lr
 8007278:	4481      	add	r9, r0
 800727a:	fa00 f00e 	lsl.w	r0, r0, lr
 800727e:	1a3f      	subs	r7, r7, r0
 8007280:	f1c5 0007 	rsb	r0, r5, #7
 8007284:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007288:	4107      	asrs	r7, r0
 800728a:	2f00      	cmp	r7, #0
 800728c:	dd3f      	ble.n	800730e <__kernel_rem_pio2f+0x1ce>
 800728e:	f04f 0e00 	mov.w	lr, #0
 8007292:	f109 0901 	add.w	r9, r9, #1
 8007296:	4673      	mov	r3, lr
 8007298:	4576      	cmp	r6, lr
 800729a:	dc6b      	bgt.n	8007374 <__kernel_rem_pio2f+0x234>
 800729c:	2d00      	cmp	r5, #0
 800729e:	dd04      	ble.n	80072aa <__kernel_rem_pio2f+0x16a>
 80072a0:	2d01      	cmp	r5, #1
 80072a2:	d078      	beq.n	8007396 <__kernel_rem_pio2f+0x256>
 80072a4:	2d02      	cmp	r5, #2
 80072a6:	f000 8081 	beq.w	80073ac <__kernel_rem_pio2f+0x26c>
 80072aa:	2f02      	cmp	r7, #2
 80072ac:	d12f      	bne.n	800730e <__kernel_rem_pio2f+0x1ce>
 80072ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072b2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80072b6:	b353      	cbz	r3, 800730e <__kernel_rem_pio2f+0x1ce>
 80072b8:	4628      	mov	r0, r5
 80072ba:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80072be:	f000 fa47 	bl	8007750 <scalbnf>
 80072c2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80072c6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80072ca:	e020      	b.n	800730e <__kernel_rem_pio2f+0x1ce>
 80072cc:	ee60 7a28 	vmul.f32	s15, s0, s17
 80072d0:	3f01      	subs	r7, #1
 80072d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072da:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80072de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80072e2:	ecac 0a01 	vstmia	ip!, {s0}
 80072e6:	ed90 0a00 	vldr	s0, [r0]
 80072ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 80072ee:	e799      	b.n	8007224 <__kernel_rem_pio2f+0xe4>
 80072f0:	d105      	bne.n	80072fe <__kernel_rem_pio2f+0x1be>
 80072f2:	1e70      	subs	r0, r6, #1
 80072f4:	ab08      	add	r3, sp, #32
 80072f6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80072fa:	11ff      	asrs	r7, r7, #7
 80072fc:	e7c5      	b.n	800728a <__kernel_rem_pio2f+0x14a>
 80072fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007302:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730a:	da31      	bge.n	8007370 <__kernel_rem_pio2f+0x230>
 800730c:	2700      	movs	r7, #0
 800730e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007316:	f040 809b 	bne.w	8007450 <__kernel_rem_pio2f+0x310>
 800731a:	1e74      	subs	r4, r6, #1
 800731c:	46a4      	mov	ip, r4
 800731e:	2000      	movs	r0, #0
 8007320:	45d4      	cmp	ip, sl
 8007322:	da4a      	bge.n	80073ba <__kernel_rem_pio2f+0x27a>
 8007324:	2800      	cmp	r0, #0
 8007326:	d07a      	beq.n	800741e <__kernel_rem_pio2f+0x2de>
 8007328:	ab08      	add	r3, sp, #32
 800732a:	3d08      	subs	r5, #8
 800732c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8081 	beq.w	8007438 <__kernel_rem_pio2f+0x2f8>
 8007336:	4628      	mov	r0, r5
 8007338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800733c:	00a5      	lsls	r5, r4, #2
 800733e:	f000 fa07 	bl	8007750 <scalbnf>
 8007342:	aa44      	add	r2, sp, #272	; 0x110
 8007344:	1d2b      	adds	r3, r5, #4
 8007346:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007448 <__kernel_rem_pio2f+0x308>
 800734a:	18d1      	adds	r1, r2, r3
 800734c:	4622      	mov	r2, r4
 800734e:	2a00      	cmp	r2, #0
 8007350:	f280 80ae 	bge.w	80074b0 <__kernel_rem_pio2f+0x370>
 8007354:	4622      	mov	r2, r4
 8007356:	2a00      	cmp	r2, #0
 8007358:	f2c0 80cc 	blt.w	80074f4 <__kernel_rem_pio2f+0x3b4>
 800735c:	a944      	add	r1, sp, #272	; 0x110
 800735e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8007362:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8007440 <__kernel_rem_pio2f+0x300>
 8007366:	eddf 7a39 	vldr	s15, [pc, #228]	; 800744c <__kernel_rem_pio2f+0x30c>
 800736a:	2000      	movs	r0, #0
 800736c:	1aa1      	subs	r1, r4, r2
 800736e:	e0b6      	b.n	80074de <__kernel_rem_pio2f+0x39e>
 8007370:	2702      	movs	r7, #2
 8007372:	e78c      	b.n	800728e <__kernel_rem_pio2f+0x14e>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b94b      	cbnz	r3, 800738c <__kernel_rem_pio2f+0x24c>
 8007378:	b118      	cbz	r0, 8007382 <__kernel_rem_pio2f+0x242>
 800737a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800737e:	6020      	str	r0, [r4, #0]
 8007380:	2001      	movs	r0, #1
 8007382:	f10e 0e01 	add.w	lr, lr, #1
 8007386:	3404      	adds	r4, #4
 8007388:	4603      	mov	r3, r0
 800738a:	e785      	b.n	8007298 <__kernel_rem_pio2f+0x158>
 800738c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007390:	6020      	str	r0, [r4, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	e7f5      	b.n	8007382 <__kernel_rem_pio2f+0x242>
 8007396:	1e74      	subs	r4, r6, #1
 8007398:	a808      	add	r0, sp, #32
 800739a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800739e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80073a2:	f10d 0c20 	add.w	ip, sp, #32
 80073a6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80073aa:	e77e      	b.n	80072aa <__kernel_rem_pio2f+0x16a>
 80073ac:	1e74      	subs	r4, r6, #1
 80073ae:	a808      	add	r0, sp, #32
 80073b0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80073b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80073b8:	e7f3      	b.n	80073a2 <__kernel_rem_pio2f+0x262>
 80073ba:	ab08      	add	r3, sp, #32
 80073bc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80073c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073c4:	4318      	orrs	r0, r3
 80073c6:	e7ab      	b.n	8007320 <__kernel_rem_pio2f+0x1e0>
 80073c8:	f10c 0c01 	add.w	ip, ip, #1
 80073cc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	d0f9      	beq.n	80073c8 <__kernel_rem_pio2f+0x288>
 80073d4:	9b05      	ldr	r3, [sp, #20]
 80073d6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80073da:	eb0d 0003 	add.w	r0, sp, r3
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	18f4      	adds	r4, r6, r3
 80073e2:	ab1c      	add	r3, sp, #112	; 0x70
 80073e4:	1c77      	adds	r7, r6, #1
 80073e6:	384c      	subs	r0, #76	; 0x4c
 80073e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073ec:	4466      	add	r6, ip
 80073ee:	42be      	cmp	r6, r7
 80073f0:	f6ff af0b 	blt.w	800720a <__kernel_rem_pio2f+0xca>
 80073f4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80073f8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007404:	f04f 0c00 	mov.w	ip, #0
 8007408:	ece4 7a01 	vstmia	r4!, {s15}
 800740c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800744c <__kernel_rem_pio2f+0x30c>
 8007410:	46a1      	mov	r9, r4
 8007412:	458c      	cmp	ip, r1
 8007414:	dd07      	ble.n	8007426 <__kernel_rem_pio2f+0x2e6>
 8007416:	ece0 7a01 	vstmia	r0!, {s15}
 800741a:	3701      	adds	r7, #1
 800741c:	e7e7      	b.n	80073ee <__kernel_rem_pio2f+0x2ae>
 800741e:	9804      	ldr	r0, [sp, #16]
 8007420:	f04f 0c01 	mov.w	ip, #1
 8007424:	e7d2      	b.n	80073cc <__kernel_rem_pio2f+0x28c>
 8007426:	ecfe 6a01 	vldmia	lr!, {s13}
 800742a:	ed39 7a01 	vldmdb	r9!, {s14}
 800742e:	f10c 0c01 	add.w	ip, ip, #1
 8007432:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007436:	e7ec      	b.n	8007412 <__kernel_rem_pio2f+0x2d2>
 8007438:	3c01      	subs	r4, #1
 800743a:	e775      	b.n	8007328 <__kernel_rem_pio2f+0x1e8>
 800743c:	08008070 	.word	0x08008070
 8007440:	08008044 	.word	0x08008044
 8007444:	43800000 	.word	0x43800000
 8007448:	3b800000 	.word	0x3b800000
 800744c:	00000000 	.word	0x00000000
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	eeb0 0a48 	vmov.f32	s0, s16
 8007456:	1a98      	subs	r0, r3, r2
 8007458:	f000 f97a 	bl	8007750 <scalbnf>
 800745c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007444 <__kernel_rem_pio2f+0x304>
 8007460:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	db19      	blt.n	800749e <__kernel_rem_pio2f+0x35e>
 800746a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007448 <__kernel_rem_pio2f+0x308>
 800746e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007472:	aa08      	add	r2, sp, #32
 8007474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007478:	1c74      	adds	r4, r6, #1
 800747a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800747e:	3508      	adds	r5, #8
 8007480:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007488:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800748c:	ee10 3a10 	vmov	r3, s0
 8007490:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007494:	ee17 3a90 	vmov	r3, s15
 8007498:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800749c:	e74b      	b.n	8007336 <__kernel_rem_pio2f+0x1f6>
 800749e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80074a2:	aa08      	add	r2, sp, #32
 80074a4:	ee10 3a10 	vmov	r3, s0
 80074a8:	4634      	mov	r4, r6
 80074aa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80074ae:	e742      	b.n	8007336 <__kernel_rem_pio2f+0x1f6>
 80074b0:	a808      	add	r0, sp, #32
 80074b2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80074b6:	9001      	str	r0, [sp, #4]
 80074b8:	ee07 0a90 	vmov	s15, r0
 80074bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074c0:	3a01      	subs	r2, #1
 80074c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80074c6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80074ca:	ed61 7a01 	vstmdb	r1!, {s15}
 80074ce:	e73e      	b.n	800734e <__kernel_rem_pio2f+0x20e>
 80074d0:	ecfc 6a01 	vldmia	ip!, {s13}
 80074d4:	ecb6 7a01 	vldmia	r6!, {s14}
 80074d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80074dc:	3001      	adds	r0, #1
 80074de:	4550      	cmp	r0, sl
 80074e0:	dc01      	bgt.n	80074e6 <__kernel_rem_pio2f+0x3a6>
 80074e2:	4288      	cmp	r0, r1
 80074e4:	ddf4      	ble.n	80074d0 <__kernel_rem_pio2f+0x390>
 80074e6:	a858      	add	r0, sp, #352	; 0x160
 80074e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074ec:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80074f0:	3a01      	subs	r2, #1
 80074f2:	e730      	b.n	8007356 <__kernel_rem_pio2f+0x216>
 80074f4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80074f6:	2a02      	cmp	r2, #2
 80074f8:	dc09      	bgt.n	800750e <__kernel_rem_pio2f+0x3ce>
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	dc2a      	bgt.n	8007554 <__kernel_rem_pio2f+0x414>
 80074fe:	d043      	beq.n	8007588 <__kernel_rem_pio2f+0x448>
 8007500:	f009 0007 	and.w	r0, r9, #7
 8007504:	b059      	add	sp, #356	; 0x164
 8007506:	ecbd 8b04 	vpop	{d8-d9}
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007510:	2b03      	cmp	r3, #3
 8007512:	d1f5      	bne.n	8007500 <__kernel_rem_pio2f+0x3c0>
 8007514:	ab30      	add	r3, sp, #192	; 0xc0
 8007516:	442b      	add	r3, r5
 8007518:	461a      	mov	r2, r3
 800751a:	4619      	mov	r1, r3
 800751c:	4620      	mov	r0, r4
 800751e:	2800      	cmp	r0, #0
 8007520:	f1a1 0104 	sub.w	r1, r1, #4
 8007524:	dc51      	bgt.n	80075ca <__kernel_rem_pio2f+0x48a>
 8007526:	4621      	mov	r1, r4
 8007528:	2901      	cmp	r1, #1
 800752a:	f1a2 0204 	sub.w	r2, r2, #4
 800752e:	dc5c      	bgt.n	80075ea <__kernel_rem_pio2f+0x4aa>
 8007530:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800744c <__kernel_rem_pio2f+0x30c>
 8007534:	3304      	adds	r3, #4
 8007536:	2c01      	cmp	r4, #1
 8007538:	dc67      	bgt.n	800760a <__kernel_rem_pio2f+0x4ca>
 800753a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800753e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8007542:	2f00      	cmp	r7, #0
 8007544:	d167      	bne.n	8007616 <__kernel_rem_pio2f+0x4d6>
 8007546:	edc8 6a00 	vstr	s13, [r8]
 800754a:	ed88 7a01 	vstr	s14, [r8, #4]
 800754e:	edc8 7a02 	vstr	s15, [r8, #8]
 8007552:	e7d5      	b.n	8007500 <__kernel_rem_pio2f+0x3c0>
 8007554:	aa30      	add	r2, sp, #192	; 0xc0
 8007556:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800744c <__kernel_rem_pio2f+0x30c>
 800755a:	4413      	add	r3, r2
 800755c:	4622      	mov	r2, r4
 800755e:	2a00      	cmp	r2, #0
 8007560:	da24      	bge.n	80075ac <__kernel_rem_pio2f+0x46c>
 8007562:	b34f      	cbz	r7, 80075b8 <__kernel_rem_pio2f+0x478>
 8007564:	eef1 7a47 	vneg.f32	s15, s14
 8007568:	edc8 7a00 	vstr	s15, [r8]
 800756c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007570:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007574:	aa31      	add	r2, sp, #196	; 0xc4
 8007576:	2301      	movs	r3, #1
 8007578:	429c      	cmp	r4, r3
 800757a:	da20      	bge.n	80075be <__kernel_rem_pio2f+0x47e>
 800757c:	b10f      	cbz	r7, 8007582 <__kernel_rem_pio2f+0x442>
 800757e:	eef1 7a67 	vneg.f32	s15, s15
 8007582:	edc8 7a01 	vstr	s15, [r8, #4]
 8007586:	e7bb      	b.n	8007500 <__kernel_rem_pio2f+0x3c0>
 8007588:	aa30      	add	r2, sp, #192	; 0xc0
 800758a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800744c <__kernel_rem_pio2f+0x30c>
 800758e:	4413      	add	r3, r2
 8007590:	2c00      	cmp	r4, #0
 8007592:	da05      	bge.n	80075a0 <__kernel_rem_pio2f+0x460>
 8007594:	b10f      	cbz	r7, 800759a <__kernel_rem_pio2f+0x45a>
 8007596:	eef1 7a67 	vneg.f32	s15, s15
 800759a:	edc8 7a00 	vstr	s15, [r8]
 800759e:	e7af      	b.n	8007500 <__kernel_rem_pio2f+0x3c0>
 80075a0:	ed33 7a01 	vldmdb	r3!, {s14}
 80075a4:	3c01      	subs	r4, #1
 80075a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075aa:	e7f1      	b.n	8007590 <__kernel_rem_pio2f+0x450>
 80075ac:	ed73 7a01 	vldmdb	r3!, {s15}
 80075b0:	3a01      	subs	r2, #1
 80075b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075b6:	e7d2      	b.n	800755e <__kernel_rem_pio2f+0x41e>
 80075b8:	eef0 7a47 	vmov.f32	s15, s14
 80075bc:	e7d4      	b.n	8007568 <__kernel_rem_pio2f+0x428>
 80075be:	ecb2 7a01 	vldmia	r2!, {s14}
 80075c2:	3301      	adds	r3, #1
 80075c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075c8:	e7d6      	b.n	8007578 <__kernel_rem_pio2f+0x438>
 80075ca:	edd1 7a00 	vldr	s15, [r1]
 80075ce:	edd1 6a01 	vldr	s13, [r1, #4]
 80075d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80075d6:	3801      	subs	r0, #1
 80075d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075dc:	ed81 7a00 	vstr	s14, [r1]
 80075e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e4:	edc1 7a01 	vstr	s15, [r1, #4]
 80075e8:	e799      	b.n	800751e <__kernel_rem_pio2f+0x3de>
 80075ea:	edd2 7a00 	vldr	s15, [r2]
 80075ee:	edd2 6a01 	vldr	s13, [r2, #4]
 80075f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80075f6:	3901      	subs	r1, #1
 80075f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075fc:	ed82 7a00 	vstr	s14, [r2]
 8007600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007604:	edc2 7a01 	vstr	s15, [r2, #4]
 8007608:	e78e      	b.n	8007528 <__kernel_rem_pio2f+0x3e8>
 800760a:	ed33 7a01 	vldmdb	r3!, {s14}
 800760e:	3c01      	subs	r4, #1
 8007610:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007614:	e78f      	b.n	8007536 <__kernel_rem_pio2f+0x3f6>
 8007616:	eef1 6a66 	vneg.f32	s13, s13
 800761a:	eeb1 7a47 	vneg.f32	s14, s14
 800761e:	edc8 6a00 	vstr	s13, [r8]
 8007622:	ed88 7a01 	vstr	s14, [r8, #4]
 8007626:	eef1 7a67 	vneg.f32	s15, s15
 800762a:	e790      	b.n	800754e <__kernel_rem_pio2f+0x40e>

0800762c <__kernel_sinf>:
 800762c:	ee10 3a10 	vmov	r3, s0
 8007630:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007634:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007638:	da04      	bge.n	8007644 <__kernel_sinf+0x18>
 800763a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800763e:	ee17 3a90 	vmov	r3, s15
 8007642:	b35b      	cbz	r3, 800769c <__kernel_sinf+0x70>
 8007644:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007648:	eddf 7a15 	vldr	s15, [pc, #84]	; 80076a0 <__kernel_sinf+0x74>
 800764c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80076a4 <__kernel_sinf+0x78>
 8007650:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007654:	eddf 7a14 	vldr	s15, [pc, #80]	; 80076a8 <__kernel_sinf+0x7c>
 8007658:	eee6 7a07 	vfma.f32	s15, s12, s14
 800765c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80076ac <__kernel_sinf+0x80>
 8007660:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007664:	eddf 7a12 	vldr	s15, [pc, #72]	; 80076b0 <__kernel_sinf+0x84>
 8007668:	ee60 6a07 	vmul.f32	s13, s0, s14
 800766c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007670:	b930      	cbnz	r0, 8007680 <__kernel_sinf+0x54>
 8007672:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80076b4 <__kernel_sinf+0x88>
 8007676:	eea7 6a27 	vfma.f32	s12, s14, s15
 800767a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800767e:	4770      	bx	lr
 8007680:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007684:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007688:	eee0 7a86 	vfma.f32	s15, s1, s12
 800768c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007690:	eddf 7a09 	vldr	s15, [pc, #36]	; 80076b8 <__kernel_sinf+0x8c>
 8007694:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007698:	ee30 0a60 	vsub.f32	s0, s0, s1
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	2f2ec9d3 	.word	0x2f2ec9d3
 80076a4:	b2d72f34 	.word	0xb2d72f34
 80076a8:	3638ef1b 	.word	0x3638ef1b
 80076ac:	b9500d01 	.word	0xb9500d01
 80076b0:	3c088889 	.word	0x3c088889
 80076b4:	be2aaaab 	.word	0xbe2aaaab
 80076b8:	3e2aaaab 	.word	0x3e2aaaab

080076bc <fabsf>:
 80076bc:	ee10 3a10 	vmov	r3, s0
 80076c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076c4:	ee00 3a10 	vmov	s0, r3
 80076c8:	4770      	bx	lr
	...

080076cc <floorf>:
 80076cc:	ee10 3a10 	vmov	r3, s0
 80076d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80076d4:	3a7f      	subs	r2, #127	; 0x7f
 80076d6:	2a16      	cmp	r2, #22
 80076d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80076dc:	dc2a      	bgt.n	8007734 <floorf+0x68>
 80076de:	2a00      	cmp	r2, #0
 80076e0:	da11      	bge.n	8007706 <floorf+0x3a>
 80076e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007744 <floorf+0x78>
 80076e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80076ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80076ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f2:	dd05      	ble.n	8007700 <floorf+0x34>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da23      	bge.n	8007740 <floorf+0x74>
 80076f8:	4a13      	ldr	r2, [pc, #76]	; (8007748 <floorf+0x7c>)
 80076fa:	2900      	cmp	r1, #0
 80076fc:	bf18      	it	ne
 80076fe:	4613      	movne	r3, r2
 8007700:	ee00 3a10 	vmov	s0, r3
 8007704:	4770      	bx	lr
 8007706:	4911      	ldr	r1, [pc, #68]	; (800774c <floorf+0x80>)
 8007708:	4111      	asrs	r1, r2
 800770a:	420b      	tst	r3, r1
 800770c:	d0fa      	beq.n	8007704 <floorf+0x38>
 800770e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007744 <floorf+0x78>
 8007712:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007716:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771e:	ddef      	ble.n	8007700 <floorf+0x34>
 8007720:	2b00      	cmp	r3, #0
 8007722:	bfbe      	ittt	lt
 8007724:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007728:	fa40 f202 	asrlt.w	r2, r0, r2
 800772c:	189b      	addlt	r3, r3, r2
 800772e:	ea23 0301 	bic.w	r3, r3, r1
 8007732:	e7e5      	b.n	8007700 <floorf+0x34>
 8007734:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007738:	d3e4      	bcc.n	8007704 <floorf+0x38>
 800773a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800773e:	4770      	bx	lr
 8007740:	2300      	movs	r3, #0
 8007742:	e7dd      	b.n	8007700 <floorf+0x34>
 8007744:	7149f2ca 	.word	0x7149f2ca
 8007748:	bf800000 	.word	0xbf800000
 800774c:	007fffff 	.word	0x007fffff

08007750 <scalbnf>:
 8007750:	ee10 3a10 	vmov	r3, s0
 8007754:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007758:	d025      	beq.n	80077a6 <scalbnf+0x56>
 800775a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800775e:	d302      	bcc.n	8007766 <scalbnf+0x16>
 8007760:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007764:	4770      	bx	lr
 8007766:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800776a:	d122      	bne.n	80077b2 <scalbnf+0x62>
 800776c:	4b2a      	ldr	r3, [pc, #168]	; (8007818 <scalbnf+0xc8>)
 800776e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800781c <scalbnf+0xcc>
 8007772:	4298      	cmp	r0, r3
 8007774:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007778:	db16      	blt.n	80077a8 <scalbnf+0x58>
 800777a:	ee10 3a10 	vmov	r3, s0
 800777e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007782:	3a19      	subs	r2, #25
 8007784:	4402      	add	r2, r0
 8007786:	2afe      	cmp	r2, #254	; 0xfe
 8007788:	dd15      	ble.n	80077b6 <scalbnf+0x66>
 800778a:	ee10 3a10 	vmov	r3, s0
 800778e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007820 <scalbnf+0xd0>
 8007792:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007824 <scalbnf+0xd4>
 8007796:	2b00      	cmp	r3, #0
 8007798:	eeb0 7a67 	vmov.f32	s14, s15
 800779c:	bfb8      	it	lt
 800779e:	eef0 7a66 	vmovlt.f32	s15, s13
 80077a2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80077a6:	4770      	bx	lr
 80077a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007828 <scalbnf+0xd8>
 80077ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077b0:	4770      	bx	lr
 80077b2:	0dd2      	lsrs	r2, r2, #23
 80077b4:	e7e6      	b.n	8007784 <scalbnf+0x34>
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	dd06      	ble.n	80077c8 <scalbnf+0x78>
 80077ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80077be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80077c2:	ee00 3a10 	vmov	s0, r3
 80077c6:	4770      	bx	lr
 80077c8:	f112 0f16 	cmn.w	r2, #22
 80077cc:	da1a      	bge.n	8007804 <scalbnf+0xb4>
 80077ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80077d2:	4298      	cmp	r0, r3
 80077d4:	ee10 3a10 	vmov	r3, s0
 80077d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077dc:	dd0a      	ble.n	80077f4 <scalbnf+0xa4>
 80077de:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007820 <scalbnf+0xd0>
 80077e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007824 <scalbnf+0xd4>
 80077e6:	eef0 7a40 	vmov.f32	s15, s0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bf18      	it	ne
 80077ee:	eeb0 0a47 	vmovne.f32	s0, s14
 80077f2:	e7db      	b.n	80077ac <scalbnf+0x5c>
 80077f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007828 <scalbnf+0xd8>
 80077f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800782c <scalbnf+0xdc>
 80077fc:	eef0 7a40 	vmov.f32	s15, s0
 8007800:	2b00      	cmp	r3, #0
 8007802:	e7f3      	b.n	80077ec <scalbnf+0x9c>
 8007804:	3219      	adds	r2, #25
 8007806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800780a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800780e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007830 <scalbnf+0xe0>
 8007812:	ee07 3a10 	vmov	s14, r3
 8007816:	e7c4      	b.n	80077a2 <scalbnf+0x52>
 8007818:	ffff3cb0 	.word	0xffff3cb0
 800781c:	4c000000 	.word	0x4c000000
 8007820:	7149f2ca 	.word	0x7149f2ca
 8007824:	f149f2ca 	.word	0xf149f2ca
 8007828:	0da24260 	.word	0x0da24260
 800782c:	8da24260 	.word	0x8da24260
 8007830:	33000000 	.word	0x33000000

08007834 <_init>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr

08007840 <_fini>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr
